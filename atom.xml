<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[WooLong's Notes]]></title>
  <subtitle><![CDATA[生命不息，奋斗不止]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-01-18T17:39:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[WooLong]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP系列问答学习之正则表达式]]></title>
    <link href="http://yoursite.com/2015/12/25/PHP%E7%B3%BB%E5%88%97%E9%97%AE%E7%AD%94%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/12/25/PHP系列问答学习之正则表达式/</id>
    <published>2015-12-24T16:08:32.000Z</published>
    <updated>2016-01-18T17:39:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="正则表达式入门">正则表达式入门</h2><h3 id="如何用正则查找一个空行">如何用正则查找一个空行</h3><pre><code><span class="string">'/^\s+/m'</span>
</code></pre><h3 id="正则中哪些字符需要转义">正则中哪些字符需要转义</h3><p>正则表达式的特殊字符包括：<code>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | :</code></p>
<h3 id="正则中’+’、’*’的区别">正则中’+’、’*’的区别</h3><ul>
<li><code>*</code> 匹配前面的子表达式零次或多次。</li>
<li><code>+</code> 匹配前面的子表达式一次或多次。</li>
</ul>
<h2 id="正则表达式匹配原理">正则表达式匹配原理</h2><h3 id="正则的引擎有哪些？有什么区别">正则的引擎有哪些？有什么区别</h3><p>正则引擎主要可以分为两大类：一种是 DFA，一种是 NFA。这两种引擎都有了很久的历史(至今二十多年)，当中也由这两种引擎产生了很多变体！于是 POSIX 的出台产生规范了不必要变体的继续产生。这样一来，目前的主流正则引擎又分为3类：一、DFA，二、传统型NFA，三、POSIX NFA。</p>
<p>DFA 引擎在线性时状态下执行，因为它们不要求回溯（并因此它们永远不测试相同的字符两次）。DFA 引擎还可以确保匹配最长的可能的字符串。但是，因为 DFA 引擎只包含有限的状态，所以它不能匹配具有反向引用的模式；并且因为它不构造显示扩展，所以它不可以捕获子表达式。</p>
<p>传统的 NFA 引擎运行所谓的“贪婪的”匹配回溯算法，以指定顺序测试正则表达式的所有可能的扩展并接受第一个匹配项。因为传统的 NFA 构造正则表达式的特定扩展以获得成功的匹配，所以它可以捕获子表达式匹配和匹配的反向引用。但是，因为传统的 NFA 回溯，所以它可以访问完全相同的状态多次（如果通过不同的路径到达该状态）。因此，在最坏情况下，它的执行速度可能非常慢。因为传统的 NFA 接受它找到的第一个匹配，所以它还可能会导致其他（可能更长）匹配未被发现。</p>
<p>POSIX NFA 引擎与传统的 NFA 引擎类似，不同的一点在于：在它们可以确保已找到了可能的最长的匹配之前，它们将继续回溯。因此，POSIX NFA 引擎的速度慢于传统的 NFA 引擎；并且在使用 POSIX NFA 时，您恐怕不会愿意在更改回溯搜索的顺序的情况下来支持较短的匹配搜索，而非较长的匹配搜索。</p>
<h3 id="什么是正则的回溯？">什么是正则的回溯？</h3><p>NFA引擎最重要的性质是，它会依次处理各个子表达式或组成元素，遇到需要在两个可能成功的可能中进行选择的时候，它会选择其一，同时记住另一个，以备稍后可能的需要。</p>
<p>需要做出选择的情形包括量词（决定是否尝试另一次匹配）和多选结构（决定选择哪个多选分支，留下哪个稍后尝试）。</p>
<p>不论选择那一种途径，如果它能匹配成功，而且正则表达式的余下部分也成功了，匹配即告完成。如果正则表达式中余下的部分最终匹配失败，引擎会知道需要回溯到之前做出选择的地方，选择其他的备用分支继续尝试。这样，引擎最终会尝试表达式的所有可能途径（或者是匹配完成之前需要的所有途径）。</p>
<h2 id="正则表达式的优化">正则表达式的优化</h2><h3 id="如何测试一个正则的性能">如何测试一个正则的性能</h3><p>基本的性能测试就是记录程序运行的时间：先取系统时间，运行程序，再取系统时间，计算两者的差，就是程序运行的时间。</p>
<ul>
<li>只记录“真正关心的”处理时间。尽可能准确地记录“处理”时间，尽可能避免“非处理时间”地影响。如果在开始前必须进行初始化或其他准备工作，请在它们完成之后开始计时，如果需要收尾工作，请在计时停止之后进行这些工作。</li>
<li>进行“足够多”的处理。通常，测试需要的时间是相当短暂的，而计算机时钟的单位精度不够，无法给出有意义的数值。</li>
<li>进行“准确的”处理。进行 1000 万次快速操作需要在负责计时的代码块中升级 1000 万次计数器。如果可能，最好的办法是增加真正的处理部分的比例，而不增加额外的开销。在 Perl 的例子中，正则表达式应用的文本相当短：如果应用到长得多的字符串，在每次循环中所作的“真正的”处理也会多一些。</li>
</ul>
<h3 id="提高正则效率的窍门有哪些">提高正则效率的窍门有哪些</h3><p>聪明的正则表达式实现有许多办法来优化，提高取得结果的速度。优化通常有两种方法：</p>
<ul>
<li>加速某些操作。某些类型的匹配，例如「\b+」，极为常见，引擎可能对此有特殊的处理方案，执行速度比通用的处理机制要快。</li>
<li>避免冗余操作。如果引擎认为，对于产生正确结果来说，某些特殊的操作是不必要的，或者某些操作能够应用到比之前更少的文本，忽略这些操作能够节省时间。例如，一个以「\A」（行开头）的正则表达式只有在字符串的开头位置才能匹配，如果在此处无法匹配，传动装置不会徒劳地尝试其他位置（进行无谓的尝试）。</li>
</ul>
<p>另：具体的优化有好多方法，实际用到的时候在去校验。</p>
<h2 id="PHP_中的正则">PHP 中的正则</h2><h3 id="PHP_正则中单引号和双引号的区别？">PHP 正则中单引号和双引号的区别？</h3><p>双引号解析的字符</p>
<ul>
<li>变量将会被解析</li>
<li>一些转义字符：「\n」「\r」「\t」「\v」「\e」「\f」「\」「$」「\”」</li>
</ul>
<p>单引号解析的字符</p>
<ul>
<li>单引号只转义单引号「\’」和反斜线「\」</li>
</ul>
<h3 id="preg_match_和_preg_match_all_的区别？">preg_match 和 preg_match_all 的区别？</h3><p>preg_match() 函数用于进行正则表达式匹配，成功返回1，否则返回0.第一次匹配成功后就会停止匹配。</p>
<p>preg_match_all() 函数用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为0），如果出错返回 FALSE。会进行全文匹配。</p>
<h3 id="preg_replace_和_preg_replace_callback_的区别？">preg_replace 和 preg_replace_callback 的区别？</h3><p>preg_replace($pattern，$replacement，$subject， $limit = -1) 函数执行一个正则表达式的搜索和替换。搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。 </p>
<p>preg_replace_callback($pattern， $callback，$subject， $limit = -1) 函数执行一个正则表达式搜索并且使用一个回调进行替换。这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。</p>
<h3 id="preg_split_怎么使用？">preg_split 怎么使用？</h3><p><strong>作用:</strong> 通过一个正则表达式分隔字符串</p>
<p><strong>说明：</strong> preg_split($pattern, $subject, $limit = -1, $flags = 0)</p>
<ul>
<li>$pattern 用于搜索的模式，字符串形式。 </li>
<li>$subject 输入字符串</li>
<li>$limit 如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表”不限制”， 作为php的标准，你可以使用null跳过对flags的设置。 </li>
<li><p>$flags 可以是任何下面标记的组合(以位或运算 | 组合)</p>
<p>  PREG_SPLIT_NO_EMPTY 如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。</p>
<p>  PREG_SPLIT_DELIM_CAPTURE 如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。</p>
<p>  PREG_SPLIT_OFFSET_CAPTURE 如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。 </p>
</li>
</ul>
<p><strong>返回值：</strong> 返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组。 </p>
<p><strong>范例：</strong></p>
<p>1.获取搜索字符串的部分</p>
<pre><code>//使用逗号或空格(包含<span class="string">" "</span>, \r, \t, \n, \f)分隔短语
<span class="variable">$keywords</span> = preg_split(<span class="string">"/[\s,]+/"</span>, <span class="string">"hypertext language, programming"</span>);
echo <span class="string">'&lt;pre&gt;'</span>;
print_r(<span class="variable">$keywords</span>);
echo <span class="string">'&lt;/pre&gt;'</span>;

结果：

Array
(
    [<span class="number">0</span>] =&gt; hypertext
    [<span class="number">1</span>] =&gt; language
    [<span class="number">2</span>] =&gt; programming
)
</code></pre><p>2.将一个字符串分隔为组成它的字符</p>
<pre><code><span class="variable">$str</span> = <span class="string">'string'</span>;
<span class="variable">$chars</span> = preg_split(<span class="string">'//'</span>, <span class="variable">$str</span>, -<span class="number">1</span>, PREG_SPLIT_NO_EMPTY);
echo <span class="string">'&lt;pre&gt;'</span>;
print_r(<span class="variable">$chars</span>);
echo <span class="string">'&lt;/pre&gt;'</span>;

结果

Array
(
    [<span class="number">0</span>] =&gt; s
    [<span class="number">1</span>] =&gt; t
    [<span class="number">2</span>] =&gt; r
    [<span class="number">3</span>] =&gt; i
    [<span class="number">4</span>] =&gt; n
    [<span class="number">5</span>] =&gt; g
)
</code></pre><p>3.分隔一个字符串并获取每部分的偏移量</p>
<pre><code><span class="variable">$str</span> = <span class="string">'hypertext language programming'</span>;
<span class="variable">$chars</span> = preg_split(<span class="string">'/ /'</span>, <span class="variable">$str</span>, -<span class="number">1</span>, PREG_SPLIT_OFFSET_CAPTURE);
echo <span class="string">'&lt;pre&gt;'</span>;
print_r(<span class="variable">$chars</span>);
echo <span class="string">'&lt;/pre&gt;'</span>;

结果

Array
(
    [<span class="number">0</span>] =&gt; Array
        (
            [<span class="number">0</span>] =&gt; hypertext
            [<span class="number">1</span>] =&gt; <span class="number">0</span>
        )

    [<span class="number">1</span>] =&gt; Array
        (
            [<span class="number">0</span>] =&gt; language
            [<span class="number">1</span>] =&gt; <span class="number">10</span>
        )

    [<span class="number">2</span>] =&gt; Array
        (
            [<span class="number">0</span>] =&gt; programming
            [<span class="number">1</span>] =&gt; <span class="number">19</span>
        )
)
</code></pre><h3 id="preg_grep_怎么使用？">preg_grep 怎么使用？</h3><p><strong>作用:</strong> 返回匹配模式的数组条目</p>
<p><strong>说明：</strong> preg_grep($pattern, $input, $flags = 0)</p>
<ul>
<li>$pattern 要搜索的模式, 字符串形式. </li>
<li>$input 输入数组</li>
<li>$flags 如果设置为 PREG_GREP_INVERT , 这个函数返回输入数组中与 给定模式 pattern 不匹配的元素组成的数组.</li>
</ul>
<p><strong>返回值：</strong> 返回使用input中key做索引的数组</p>
<p><strong>范例：</strong></p>
<pre><code><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">"23.32"</span>,<span class="string">"22"</span>,<span class="string">"12.009"</span>,<span class="string">"23.43.43"</span>);
echo <span class="string">'&lt;pre&gt;'</span>;
print_r(preg_grep(<span class="string">"/^(\d+)?\.\d+\.\d+$/"</span>,<span class="variable">$array</span>));
echo <span class="string">'&lt;/pre&gt;'</span>;

结果

Array
(
    [<span class="number">3</span>] =&gt; <span class="number">23.43</span>.<span class="number">43</span>
)
</code></pre><h2 id="正则实例">正则实例</h2><h3 id="如何匹配_URL_地址">如何匹配 URL 地址</h3><p>一个比较全的PHP正则</p>
<pre><code><span class="string">"/((https|http|ftp|rtsp|mms)?://)?"</span> <span class="comment">// </span>
 + <span class="string">"(([0-9a-z_!~*'().&amp;=+$%-]+: )?[0-9a-z_!~*'().&amp;=+$%-]+@)?"</span> <span class="comment">// ftp的user@ </span>
 + <span class="string">"(([0-9]{1,3}.){3}[0-9]{1,3}"</span> <span class="comment">// IP形式的URL- 199.194.52.184 </span>
 + <span class="string">"|"</span> <span class="comment">// 允许IP和DOMAIN（域名） </span>
 + <span class="string">"([0-9a-z_!~*'()-]+.)*"</span> <span class="comment">// 域名- www. </span>
 + <span class="string">"([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]."</span> <span class="comment">// 二级域名 </span>
 + <span class="string">"[a-z]{2,6})"</span> <span class="comment">// first level domain- .com or .museum </span>
 + <span class="string">"(:[0-9]{1,4})?"</span> <span class="comment">// 端口- :80 </span>
 + <span class="string">"((/?)|"</span> <span class="comment">// a slash isn't required if there is no file name </span>
 + <span class="string">"(/[0-9a-z_!~*'().;?:@&amp;=+$,%#-]+)+/?)/"</span>
</code></pre><h3 id="如何匹配一个_IP_地址">如何匹配一个 IP 地址</h3><pre><code><span class="variable">'/^</span><span class="list">(<span class="list">[<span class="keyword">0-9</span>]{<span class="number">1</span>,<span class="number">3</span>}.){<span class="number">3</span>}<span class="list">[<span class="keyword">0-9</span>]{<span class="number">1</span>,<span class="number">3</span>}$/'</span></span></span>
</code></pre><h3 id="如何匹配_HTML_标签">如何匹配 HTML 标签</h3><pre><code>'/<span class="variable">&lt;(\S*?) [^&gt;</span>]<span class="keyword">*</span>&gt;.<span class="keyword">*</span>?<span class="variable">&lt;/\1&gt;</span>|<span class="string">&lt;.*? /&gt;/'</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="正则表达式入门">正则表达式入门</h2><h3 id="如何用正则查找一个空行">如何用正则查找一个空行</h3><pre><code><span class="string">'/^\s+/m'</span>
</code></pre><h3 id="正则中哪]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP系列问答学习之String]]></title>
    <link href="http://yoursite.com/2015/12/08/PHP%E7%B3%BB%E5%88%97%E9%97%AE%E7%AD%94%E5%AD%A6%E4%B9%A0%E4%B9%8BString/"/>
    <id>http://yoursite.com/2015/12/08/PHP系列问答学习之String/</id>
    <published>2015-12-07T16:22:19.000Z</published>
    <updated>2015-12-23T18:10:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="字符串语法">字符串语法</h2><h3 id="PHP_中字符串的定义方式有哪些？">PHP 中字符串的定义方式有哪些？</h3><ul>
<li>单引号</li>
<li>双引号</li>
<li>heredoc 语法结构</li>
<li>nowdoc 语法结构（自 PHP 5.3.0 起）    </li>
</ul>
<h3 id="双引号中的字符串除了解析变量意外还解析哪些字符？">双引号中的字符串除了解析变量意外还解析哪些字符？</h3><table>
<thead>
<tr>
<th>序列</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行（ASII 字符集中的 LF 或 0x0A(10)）</td>
</tr>
<tr>
<td>\r</td>
<td>回车（ASCII 字符集中的 CR 或 0x0D (13)）</td>
</tr>
<tr>
<td> \t</td>
<td>水平制表符（ASCII 字符集中的 HT 或 0x09(9)）</td>
</tr>
<tr>
<td> \v</td>
<td>垂直制表符（ASCII 字符集中的 VT 或 0x0B(11)）（自 PHP 5.2.5 起）</td>
</tr>
<tr>
<td> \e</td>
<td>Escape（ASCII 字符集中的 ESC 或 0x1B(27)）（自 PHP 5.4.0 起）</td>
</tr>
<tr>
<td> \f</td>
<td>换页（ASCII 字符集中的 FF 或 0x0C(12)）（自 PHP 5.2.5 起）</td>
</tr>
<tr>
<td> \</td>
<td>反斜线</td>
</tr>
<tr>
<td> \$</td>
<td>美元标记</td>
</tr>
<tr>
<td> \”</td>
<td>双引号</td>
</tr>
<tr>
<td> [0-7]{1,3}</td>
<td>符合该正则表达式序列的是一个以八进制方式来表达的字符</td>
</tr>
<tr>
<td> \x[0-9A-Fa-f]{1,2}</td>
<td>符合该正则表达式序列的是一个以十六进制方式来表达的字符</td>
</tr>
</tbody>
</table>
<h3 id="字符串与其他类型是如何转换的？">字符串与其他类型是如何转换的？</h3><h4 id="转换成字符串">转换成字符串</h4><p>一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串。</p>
<pre><code><span class="variable">$a</span> = <span class="number">1</span>;
<span class="variable">$b</span> = (sting)<span class="variable">$a</span>;
<span class="variable">$c</span> = strval(<span class="variable">$a</span>);
<span class="variable">$d</span> = <span class="string">"$a"</span>; // 这样也可以转成字符串
var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>);
</code></pre><p>在一个需要字符串的表达式中，会自动转换为 string。比如在使用函数 echo 或 print 时，或在一个变量和一个 string 进行比较时，就会发生这种转换。类型和类型转换可以更好的解释下面的事情。</p>
<ul>
<li>一个布尔值 boolean 的 TRUE 被转换成 string 的 “1”。Boolean 的 FALSE 被转换成 “”（空字符串）。这种转换可以在 boolean 和 string 之间相互进行。</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$c</span> = strval(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$d</span> = strval(<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>一个整数 integer 或浮点数 float 被转换为数字的字面样式的 string（包括 float 中的指数部分）。使用指数计数法的浮点数（4.1E+6）也可转换。</p>
</li>
<li><p>数组 array 总是转换成字符串 “Array”，因此，echo 和 print 无法显示出该数组的内容。要显示某个单元，可以用 echo $arr[‘foo’] 这种结构。要显示整个数组内容见下文。</p>
</li>
<li><p>在 PHP 4 中对象 object 总是被转换成字符串 “Object”，如果为了调试原因需要打印出对象的值，请继续阅读下文。为了得到对象的类的名称，可以用 get_class() 函数。自 PHP 5 起，适当时可以用 __toString 方法。</p>
</li>
<li><p>资源 resource 总会被转变成 “Resource id #1” 这种结构的字符串，其中的 1 是 PHP 在运行时分配给该 resource 的唯一值。不要依赖此结构，可能会有变更。要得到一个 resource 的类型，可以用函数 get_resource_type()。</p>
</li>
<li><p>NULL 总是被转变成空字符串。</p>
</li>
</ul>
<p>如上面所说的，直接把 array，object 或 resource 转换成 string 不会得到除了其类型之外的任何有用信息。可以使用函数 print_r() 和 var_dump() 列出这些类型的内容。</p>
<h4 id="设置变量的类型_–_settype">设置变量的类型 – settype</h4><figure class="highlight"><figcaption><span>settype(mixed &$var, string $type);``` 将变量 var 的类型设置成 type。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#21442;&#25968;&#10;&#10;var&#65306;&#35201;&#36716;&#25442;&#30340;&#21464;&#37327;&#10;&#10;type&#65306;&#21487;&#33021;&#30340;&#21462;&#20540;&#10;&#10;* boolean&#65288;&#25110;&#20026; bool&#65292;&#20174; PHP 4.2.0 &#36215;&#65289;&#10;* integer&#65288;&#25110;&#20026; int&#65292;&#20174; PHP 4.2.0 &#36215;&#65289;&#10;* float&#65288;&#21482;&#22312; PHP 4.2.0 &#20043;&#21518;&#21487;&#20197;&#20351;&#29992;&#65292;&#23545;&#20110;&#26087;&#29256;&#26412;&#20013;&#20351;&#29992;&#30340; double &#29616;&#24050;&#20572;&#29992;&#65289;&#10;* string&#10;* array&#10;* object&#10;* null&#65288;&#20174; PHP 4.2.0 &#36215;&#65289;&#10;&#10;&#36820;&#22238;&#20540;&#10;&#10;&#25104;&#21151;&#26102;&#36820;&#22238; TRUE , &#25110;&#32773;&#22833;&#36133;&#26102;&#36820;&#22238; FALSE &#12290;&#10;&#10;### &#20160;&#20040;&#26159;&#8220;&#20018;&#34892;&#21270;&#8221;&#65311;&#23454;&#29616;&#8220;&#20018;&#34892;&#21270;&#8221;&#26377;&#21738;&#20123;&#24120;&#29992;&#26041;&#27861;&#65311;&#10;&#10;&#22823;&#37096;&#20998;&#30340; PHP &#20540;&#21487;&#20197;&#36716;&#21464;&#25104; string &#26469;&#27704;&#20037;&#20445;&#23384;&#65292;&#36825;&#34987;&#31216;&#20316;&#20018;&#34892;&#21270;&#12290;&#24120;&#29992;&#30340;&#20989;&#25968;&#26159; serialize() == unserialize()&#65339;&#24674;&#22797;&#21040;&#21407;&#20808;&#21464;&#37327;&#65341; &#12290; &#22914;&#26524; PHP &#24341;&#25806;&#35774;&#23450;&#25903;&#25345; WDDX&#65292;PHP &#20540;&#20063;&#21487;&#34987;&#20018;&#34892;&#21270;&#20026;&#26684;&#24335;&#33391;&#22909;&#30340; XML &#31283;&#27493;&#12290;&#21478;&#22806;&#36824;&#26377;&#20854;&#20182;&#20989;&#25968;&#22914;__sleep() &#20018;&#34892;&#21270;&#26576;&#23545;&#35937;&#30340;&#37096;&#20998;&#23646;&#24615;&#12289;__wakeup()&#21453;&#20018;&#34892;&#21270;&#26102;&#65292;&#21021;&#22987;&#21270;&#65288;&#20854;&#23454;&#26159;&#20462;&#25913;&#65289;&#23545;&#35937;&#20869;&#23481;&#10;&#10;### &#22914;&#20309;&#33719;&#21462;&#21644;&#20462;&#25913;&#23383;&#31526;&#20018;&#20013;&#30340;&#23383;&#31526;&#65311;&#10;&#10;string &#20013;&#30340;&#23383;&#31526;&#21487;&#20197;&#36890;&#36807;&#19968;&#20010;&#20174; 0 &#24320;&#22987;&#30340;&#19979;&#26631;&#65292;&#29992;&#31867;&#20284; array &#32467;&#26500;&#20013;&#30340;&#26041;&#25324;&#21495;&#21253;&#21547;&#23545;&#24212;&#30340;&#25968;&#23383;&#26469;&#35775;&#38382;&#21644;&#20462;&#25913;&#65292;&#27604;&#22914; $str[42] &#25110; $str&#123;42&#125;&#12290;&#21487;&#20197;&#25226; string &#24403;&#25104;&#23383;&#31526;&#32452;&#25104;&#30340; array&#12290;&#20989;&#25968; substr() &#21644; substr_replace() &#21487;&#29992;&#20110;&#25805;&#20316;&#22810;&#20110;&#19968;&#20010;&#23383;&#31526;&#30340;&#24773;&#20917;&#12290;&#10;&#10;**Warning**&#65306;&#10;&#10;&#9;&#29992;&#36229;&#20986;&#23383;&#31526;&#20018;&#38271;&#24230;&#30340;&#19979;&#26631;&#20889;&#20837;&#23558;&#20250;&#25289;&#38271;&#35813;&#23383;&#31526;&#20018;&#24182;&#20197;&#31354;&#26684;&#22635;&#20805;&#12290;&#38750;&#25972;&#25968;&#31867;&#22411;&#19979;&#26631;&#20250;&#34987;&#36716;&#25442;&#25104;&#25972;&#25968;&#12290;&#38750;&#27861;&#19979;&#26631;&#31867;&#22411;&#20250;&#20135;&#29983;&#19968;&#20010; E_NOTICE &#32423;&#21035;&#38169;&#35823;&#12290;&#29992;&#36127;&#25968;&#19979;&#26631;&#20889;&#20837;&#23383;&#31526;&#20018;&#26102;&#20250;&#20135;&#29983;&#19968;&#20010; E_NOTICE &#32423;&#21035;&#38169;&#35823;&#65292;&#29992;&#36127;&#25968;&#19979;&#26631;&#35835;&#21462;&#23383;&#31526;&#20018;&#26102;&#36820;&#22238;&#31354;&#23383;&#31526;&#20018;&#12290;&#20889;&#20837;&#26102;&#21482;&#29992;&#21040;&#20102;&#36171;&#20540;&#23383;&#31526;&#20018;&#30340;&#31532;&#19968;&#20010;&#23383;&#31526;&#12290;&#29992;&#31354;&#23383;&#31526;&#20018;&#36171;&#20540;&#21017;&#36171;&#32473;&#30340;&#20540;&#26159; NULL &#23383;&#31526;&#12290;&#10;&#10;&#9;PHP &#30340;&#23383;&#31526;&#20018;&#22312;&#20869;&#37096;&#26159;&#23383;&#33410;&#32452;&#25104;&#30340;&#25968;&#32452;&#12290;&#22240;&#27492;&#29992;&#33457;&#25324;&#21495;&#35775;&#38382;&#25110;&#20462;&#25913;&#23383;&#31526;&#20018;&#23545;&#22810;&#23383;&#33410;&#23383;&#31526;&#38598;&#24456;&#19981;&#23433;&#20840;&#12290;&#20165;&#24212;&#23545;&#21333;&#23383;&#33410;&#32534;&#30721;&#20363;&#22914; ISO-8859-1 &#30340;&#23383;&#31526;&#20018;&#36827;&#34892;&#27492;&#31867;&#25805;&#20316;&#12290;&#10;&#10;&#33258; PHP 5.4 &#36215;&#23383;&#31526;&#20018;&#19979;&#26631;&#24517;&#39035;&#20026;&#25972;&#25968;&#25110;&#21487;&#36716;&#25442;&#20026;&#25972;&#25968;&#30340;&#23383;&#31526;&#20018;&#65292;&#21542;&#21017;&#20250;&#21457;&#20986;&#35686;&#21578;&#12290;&#10;&#10;## &#23383;&#31526;&#20018;&#30340;&#21407;&#29702;&#10;&#10;### &#23383;&#31526;&#20018;&#22312;&#24213;&#23618;&#26159;&#22914;&#20309;&#23384;&#20648;&#30340;&#65292;&#20160;&#20040;&#20915;&#23450;&#30528;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#65311;&#10;&#10;PHP&#20013;&#21464;&#37327;&#26159;&#29992;Zval&#65288;PHP&#20869;&#26680;&#25506;&#32034;&#20043;&#21464;&#37327;&#65288;1&#65289;Zval&#65289;&#36825;&#26679;&#19968;&#20010;&#32467;&#26500;&#20307;&#26469;&#23384;&#20648;&#30340;&#12290;Zval&#30340;&#32467;&#26500;&#26159;&#65306;&#10;&#10;&#9;struct _zval_struct &#123;&#10;&#9;&#9;zvalue_value value;&#9;&#9;&#9;/* value */&#10;&#9;&#9;zend_uint_refcount__gc;&#9;&#9;/* variable ref count */&#10;&#9;&#9;zend_uchar_type;&#9;&#9;&#9;/* active type */&#10;&#9;&#9;zend_uchar_is_ref__gc;&#9;&#9;/* if it is a ref variable */&#10;&#9;&#125;;&#10;&#10;&#32780;&#21464;&#37327;&#30340;&#20540;&#26102; zvalue_value &#36825;&#26679;&#30340;&#19968;&#20010;&#20849;&#29992;&#20307;&#65306;&#10;&#10;&#9;typedef union _zvalue_value &#123;&#10;&#9;&#9;long lval;&#10;&#9;&#9;double dval;&#10;&#9;&#9;sturct &#123;&#9;&#9;&#9;/* string */&#10;&#9;&#9;&#9;char *val;&#10;&#9;&#9;&#9;int len;&#10;&#9;&#9;&#125; str;&#10;&#9;&#9;HashTable *ht;&#10;&#9;&#9;zend_object_value_obj;&#10;&#9;&#125; zvalue_value;&#10;&#10;&#25105;&#20204;&#20174;&#20013;&#25277;&#21462;&#20986;&#23383;&#31526;&#20018;&#30340;&#32467;&#26500;&#65306;&#10;&#10;&#9;struct &#123;&#10;&#9;&#9;char *val;&#10;&#9;&#9;int len;&#10;&#9;&#125; str;&#10;&#10;&#29616;&#22312;&#27604;&#36739;&#28165;&#26970;&#20102;&#65292;PHP &#20013;&#23383;&#31526;&#20018;&#22312;&#24213;&#23618;&#23454;&#38469;&#19978;&#26159;&#19968;&#20010;&#32467;&#26500;&#20307;&#65292;&#35813;&#32467;&#26500;&#21253;&#21547;&#20102;&#25351;&#21521;&#23383;&#31526;&#20018;&#30340;&#25351;&#38024;&#21644;&#35813;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#12290;C &#20013;&#23383;&#31526;&#20018;&#26159;&#20197; \o &#32467;&#23614;&#30340;&#23383;&#31526;&#25968;&#32452;&#65292;&#36825;&#37324;&#22810;&#23384;&#20648;&#20102;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#30340;&#26102;&#38388;&#22797;&#26434;&#24230;&#26159;O(n)&#65292;&#32780;&#23383;&#31526;&#20018;&#30340;&#25805;&#20316;&#22312; PHP &#20013;&#26159;&#38750;&#24120;&#39057;&#32321;&#30340;&#65292;&#36825;&#26679;&#33021;&#36991;&#20813;&#37325;&#22797;&#35745;&#31639;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#65292;&#36825;&#33021;&#33410;&#30465;&#22823;&#37327;&#30340;&#26102;&#38388;&#65292;&#26159;&#31354;&#38388;&#25442;&#26102;&#38388;&#30340;&#20570;&#27861;&#12290;&#36825;&#20040;&#30475;&#22312; PHP &#20013; strlen() &#20989;&#25968;&#21487;&#20197;&#22312;&#24120;&#25968;&#26102;&#38388;&#20869;&#33719;&#21462;&#21040;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#12290;&#35745;&#31639;&#26426;&#35821;&#35328;&#20013;&#23383;&#31526;&#20018;&#30340;&#25805;&#20316;&#37117;&#38750;&#24120;&#20043;&#22810;&#65292;&#25152;&#20197;&#22823;&#37096;&#20998;&#39640;&#32423;&#35821;&#35328;&#20013;&#37117;&#20250;&#23384;&#20648;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#12290;&#10;&#10;&#30001;&#27492;&#21487;&#30693;&#65292;String &#38271;&#24230;&#30001;&#24213;&#23618;&#34920;&#31034;&#23383;&#31526;&#20018;&#30340;&#38271;&#24230;&#20301;&#20915;&#23450;&#21363; int &#22411;&#65292;&#25925;c&#35821;&#35328;&#20013; int &#22411;&#30340;&#26368;&#22823;&#20540;&#65292;&#23601;&#26159; php &#20013;&#30340;&#23383;&#31526;&#20018;&#26368;&#22823;&#38271;&#24230;&#30340;&#38480;&#21046;&#20043;&#19968;&#65292;&#21478;&#19968;&#20010;&#38480;&#21046;&#26159; php.ini &#20013;&#20869;&#23384;&#30340;&#38480;&#21046;&#65292;&#23383;&#31526;&#20018;&#26368;&#38271;&#19981;&#33021;&#36229;&#36807;&#36825;&#20010;&#12290;&#10;&#10;### PHP &#24182;&#19981;&#29305;&#21035;&#25351;&#26126;&#23383;&#31526;&#20018;&#30340;&#32534;&#30721;&#65292;&#37027;&#23383;&#31526;&#20018;&#21040;&#24213;&#26159;&#24590;&#26679;&#32534;&#30721;&#30340;&#21602;&#65311;&#10;&#10;&#30001;&#20110; PHP &#24182;&#19981;&#29305;&#21035;&#25351;&#26126;&#23383;&#31526;&#20018;&#30340;&#32534;&#30721;&#65292;&#37027;&#23383;&#31526;&#20018;&#21040;&#24213;&#26159;&#24590;&#26679;&#32534;&#30721;&#30340;&#21602;&#65311;&#20363;&#22914;&#23383;&#31526;&#20018; &#34;&#225;&#34; &#21040;&#24213;&#26159;&#31561;&#20110; &#34;\xE1&#34;&#65288;ISO-8859-1&#65289;&#65292;&#34;\xC3\xA1&#34;&#65288;UTF-8&#65292;C form&#65289;&#65292;&#34;\x61\xCC\x81&#34;&#65288;UTF-8&#65292;D form&#65289;&#36824;&#26159;&#20219;&#20309;&#20854;&#23427;&#21487;&#33021;&#30340;&#34920;&#36798;&#21602;&#65311;&#31572;&#26696;&#26159;```&#23383;&#31526;&#20018;&#20250;&#34987;&#25353;&#29031;&#35813;&#33050;&#26412;&#25991;&#20214;&#30456;&#21516;&#30340;&#32534;&#30721;&#26041;&#24335;&#26469;&#32534;&#30721;&#12290;``` &#22240;&#27492;&#22914;&#26524;&#19968;&#20010;&#33050;&#26412;&#30340;&#32534;&#30721;&#26159; ISO-8859-1&#65292;&#21017;&#20854;&#20013;&#30340;&#23383;&#31526;&#20018;&#20063;&#20250;&#34987;&#32534;&#30721;&#20026; ISO-8859-1&#65292;&#20197;&#27492;&#31867;&#25512;&#12290;&#19981;&#36807;&#36825;&#24182;&#19981;&#36866;&#29992;&#20110;&#28608;&#27963;&#20102; Zend Multibyte &#26102;&#65307;&#27492;&#26102;&#33050;&#26412;&#21487;&#20197;&#26159;&#20197;&#20219;&#20309;&#26041;&#24335;&#32534;&#30721;&#30340;&#65288;&#26126;&#30830;&#25351;&#23450;&#25110;&#34987;&#33258;&#21160;&#26816;&#27979;&#65289;&#28982;&#21518;&#34987;&#36716;&#25442;&#20026;&#26576;&#31181;&#20869;&#37096;&#32534;&#30721;&#65292;&#28982;&#21518;&#23383;&#31526;&#20018;&#23558;&#34987;&#29992;&#27492;&#26041;&#24335;&#32534;&#30721;&#12290;&#27880;&#24847;&#33050;&#26412;&#30340;&#32534;&#30721;&#26377;&#19968;&#20123;&#32422;&#26463;&#65288;&#22914;&#26524;&#28608;&#27963;&#20102; Zend Multibyte &#21017;&#26159;&#20854;&#20869;&#37096;&#32534;&#30721;&#65289;- &#36825;&#24847;&#21619;&#30528;&#27492;&#32534;&#30721;&#24212;&#35813;&#26159; ASCII &#30340;&#20860;&#23481;&#36229;&#38598;&#65292;&#20363;&#22914; UTF-8 &#25110; ISO-8859-1&#12290;&#19981;&#36807;&#35201;&#27880;&#24847;&#65292;&#20381;&#36182;&#29366;&#24577;&#30340;&#32534;&#30721;&#20854;&#20013;&#30456;&#21516;&#30340;&#23383;&#33410;&#20540;&#21487;&#20197;&#29992;&#20110;&#39318;&#23383;&#27597;&#21644;&#38750;&#39318;&#23383;&#27597;&#32780;&#36716;&#25442;&#29366;&#24577;&#65292;&#36825;&#21487;&#33021;&#20250;&#36896;&#25104;&#38382;&#39064;&#12290;&#10;&#10;### &#8220;&#20108;&#36827;&#21046;&#23433;&#20840;&#8221;&#26159;&#20160;&#20040;&#24847;&#24605;&#65311;&#10;&#10;php &#30340;&#20869;&#37096;&#20989;&#25968;&#22312;&#25805;&#20316;&#20108;&#36827;&#21046;&#25968;&#25454;&#26102;&#33021;&#20445;&#35777;&#36798;&#21040;&#39044;&#26399;&#30340;&#32467;&#26524;&#65292;&#20363;&#22914;str_replace&#12289;stristr&#12289;strcmp&#31561;&#20989;&#25968;&#65292;&#25105;&#20204;&#23601;&#35828;&#36825;&#20123;&#20989;&#25968;&#26159;&#20108;&#36827;&#21046;&#23433;&#20840;&#30340;&#12290;&#10;&#10;&#60;b&#62;&#20030;&#20010;&#20363;&#23376;&#60;/b&#62;&#10;&#10;```C&#20195;&#30721;&#22914;&#19979;</span><br></pre></td></tr></table></figure>
<pre><code>main(){
    <span class="keyword">char</span> ab[] = <span class="string">"aa\0b"</span>;
    cahr ac[] = <span class="string">"aa\0c"</span>;
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strcmp</span>(ab, ac));
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(ab));
}
</code></pre><p>结果：</p>
<pre><code><span class="number">0</span>

<span class="number">2</span>
</code></pre><p>解读：</p>
<p>C语言认为 ab 和 ac 这两个字符串是相等的，而且 ab 的长度为 2.</p>
<p><code>php 代码如下</code></p>
<pre><code>&lt;?php
    <span class="variable">$ab</span> = <span class="string">"aa\0b"</span>;
    <span class="variable">$ac</span> = <span class="string">"aa\0c"</span>;
    var_dump(strcmp(<span class="variable">$ab</span>, <span class="variable">$ac</span>));
    var_dump(strlen(<span class="variable">$ab</span>));
?&gt;
</code></pre><p>结果：</p>
<pre><code><span class="function"><span class="title">int</span><span class="params">(-<span class="number">1</span>)</span></span>

<span class="function"><span class="title">int</span><span class="params">(<span class="number">4</span>)</span></span>
</code></pre><p>解读：</p>
<p>也就是 php 语言认为 ab 和 ac 这两个字符串是不相等的， ab 的长度是 4.</p>
<p>为什么会这样呢？</p>
<p>对于 c 语言 ‘\0’ 是字符串的结束符，所以在 C 语言中对于字符串”aa\0b”，它读到’\0’就会默认字符读取已经结束，而抛掉后面的字符串’b’。</p>
<p>既然这样，php 都是 C 来开发的，为什么 php 做到了二进制安全呢？</p>
<p>由上面 php 的 Zval 结构知：</p>
<p>php 会根据 type 的值来决定访问 value 的哪个成员，为字符串时，我们会访问str结构，这便是底层字符串的存储结构，它有两个值，一个是指向字符串的指针 val，另一个是记录字符串长度的len值，就是因为有 len 这个值，导致了 php 是二进制安全的：因为它不需要像 C 一样通过是否遇到’\0’结尾符来判断整个字符串是否读取完毕，而是通过 len 这个值指定的长度进行读取。</p>
<h2 id="字符编码方式">字符编码方式</h2><h3 id="什么是位？什么是字节？">什么是位？什么是字节？</h3><p>位：”位(bit)”是电子计算机中最小的数据单位。每一位的状态只能是 0 或 1。</p>
<p>字节： 8 个二进制位构成 1 个“字节(Byte)”，它是存储空间的基本计量单位。</p>
<h3 id="什么是_ASCII_编码，如何编码？">什么是 ASCII 编码，如何编码？</h3><p>ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。</p>
<p>PHP 并不特别指明字符串的编码，字符串只是按照该脚本文件相同的编码方式来编码。</p>
<h3 id="什么是_Unicode_编码？">什么是 Unicode 编码？</h3><p>Unicode码扩展自ASCII字元集。在严格的ASCII中，每个字元用7位元表示，或者电脑上普遍使用的每字元有8位元宽；而Unicode使用全16位元字元集。这使得Unicode能够表示世界上所有的书写语言中可能用於电脑通讯的字元、象形文字和其他符号。Unicode最初打算作为ASCII的补充，可能的话，最终将代替它。考虑到ASCII是电脑中最具支配地位的标准，所以这的确是一个很高的目标。</p>
<h3 id="如何在_XML_中用_Unicode_表示汉字？">如何在 XML 中用 Unicode 表示汉字？</h3><p>Xml中若要用unicode码来表示字符，格式应如：&#xXXXX;</p>
<h2 id="UTF-8_和_GBK_编码原理">UTF-8 和 GBK 编码原理</h2><h3 id="什么是_UTF-8_编码？">什么是 UTF-8 编码？</h3><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，又称万国码。由Ken Thompson于1992年创建。现在已经标准化为RFC 3629。UTF-8用1到6个字节编码UNICODE字符。用在网页上可以同一页面显示中文简体繁体及其它语言（如英文，日文，韩文）。</p>
<h3 id="UTF-8_中_BOM（签名）_和不带_BOM（签名）_有什么区别？">UTF-8 中 BOM（签名） 和不带 BOM（签名） 有什么区别？</h3><p>BOM (Byte Order Mark)，就是字节序标记。对于 UTF-8 没有什么区别。</p>
<p>UTF-8 不需要 BOM，尽管 Unicode 标准允许在 UTF-8 中使用 BOM。所以不含 BOM 的 UTF-8 才是标准形式，在 UTF-8 文件中放置 BOM 主要是微软的习惯（把带有 BOM 的小端序 UTF-16 称作「Unicode」而又不详细说明，这也是微软的习惯）。BOM（byte order mark）是为 UTF-16 和 UTF-32 准备的，用于标记字节序（byte order）。微软在 UTF-8 中使用 BOM 是因为这样可以把 UTF-8 和 ASCII 等编码明确区分开，但这样的文件在 Windows 之外的操作系统里会带来问题。「UTF-8」和「带 BOM 的 UTF-8」的区别就是有没有 BOM。即文件开头有没有 U+FEFF。UTF-8 的网页代码不应使用 BOM，否则常常会出错。</p>
<h3 id="UTF-8_中汉字占几个字节？">UTF-8 中汉字占几个字节？</h3><p>首先我们要知道 UTF-8 是变长编码,不固定，1-6个字节。但是一般来说是占3、4个字节的居多。</p>
<h3 id="Unicode_和_UTF-8_编码如何相互转换？">Unicode 和 UTF-8 编码如何相互转换？</h3><h4 id="区别">区别</h4><p>Unicode是一个字符集，而UTF-8是Unicode的其中一种，Unicode是定长的都为双字节，而UTF-8是可变的，对于汉字来说Unicode占有的字节比UTF-8占用的字节少1个字节。Unicode为双字节，而UTF-8中汉字占三个字节。<br>UTF-8编码字符理论上可以最多到6个字节长,然而16位BMP（Basic Multilingual Plane）字符最多只用到3字节长。下面看一下UTF-8编码表：</p>
<pre><code>U-<span class="number">00000000</span> - U-<span class="number">0000007F</span>: <span class="number">0</span>xxxxxxx
U-<span class="number">00000080</span> - U-<span class="number">000007F</span>F: <span class="number">110</span>xxxxx <span class="number">10</span>xxxxxx
U-<span class="number">00000800</span> - U-<span class="number">0000F</span>FFF: <span class="number">1110</span>xxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx
U-<span class="number">00010000</span> - U-<span class="number">001F</span>FFFF: <span class="number">11110</span>xxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx
U-<span class="number">00200000</span> - U-<span class="number">03F</span>FFFFF: <span class="number">111110</span>xx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx
U-<span class="number">04000000</span> - U-<span class="number">7F</span>FFFFFF: <span class="number">1111110</span>x <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx
</code></pre><p>xxx 的位置由字符编码数的二进制表示的位填入， 越靠右的 x 具有越少的特殊意义，只用最短的那个足够表达一个字符编码数的多字节串。 注意在多字节串中, 第一个字节的开头”1”的数目就是整个串中字节的数目。而第一行中以0开头，是为了兼容ASCII编码，为一个字节，第二行就为双字节字符串，第三行为3字节，如汉字就属于这种，以此类推。(个人认为：其实我们可以简单的把前面的1的个数看成字节数)</p>
<h4 id="Unicode_转换成_Utf-8">Unicode 转换成 Utf-8</h4><p>为了要将 Unicode 转化为 UTF-8，当然要知道他们的区别到底在什么地方。下面来看一下，在 Unicode 中的编码是怎样转换成 UTF-8 的，在 UTF-8 中，如果一个字符的字节小于 0x80（128）则为 ASCII 字符，占一个字节，可以不用转换，因为 UTF-8 兼容 ASCII 编码。假如在 Unicode 中汉字“你”的编码为“u4F60”，把它转换为二进制为 100111101100000 ，然后按照 UTF-8 的方法进行转换。可以将 Unicode 二进制从低位往高位取出二进制数字，每次取 6 位，如上述的二进制就可以分别取出为如下所示的格式，前面按格式填补，不足 8 位用 0 填补。</p>
<pre><code><span class="attribute">unicode</span>: <span class="string">100111101100000                   4F60</span>

<span class="cpp">utf-<span class="number">8</span>:    <span class="number">11100100</span>,<span class="number">10111101</span>,<span class="number">10100000</span>       E4BDA0</span>
</code></pre><p>从上面就可以很直观的看出 Unicode 到 UTF-8 之间的转换，当然知道了 UTF-8 的格式后，就可以进行逆转运算，就是按照格式把它在二进制中的相应位置上取出，然后在转换就是所得到的 Unicode 字符了（这个运算可以通过“位移”来完成）。如上述的“你”的转换，由于其值大于 0x800 小于 0x10000，因此可以判断为三字节存储，则最高位需要向右移“12”位再根据三字节格式的最高位为11100000（0xE0）求或（|）就可以得到最高位的值了。同理第二位则是右移“6”位，则还剩下最高位和第二位的二进制值，可以通过与111111（0x3F）求按位于（&amp;）操作，再和11000000（0x80）求或（|）。第三位就不用移位了，只要直接取最后六位（与111111（ox3F）取&amp;），在与11000000(0x80)求或（|）。</p>
<h4 id="Utf-8_逆转回_Unicode">Utf-8 逆转回 Unicode</h4><p>当然在 UTF-8 到 Unicode 的转换也是通过移位等来完成的，就是把 UTF-8 那些格式相应的位置的二进制数给揪出来。在上述例子中“你”为三个字节，因此要每个字节进行处理，有高位到低位进行处理。在UTF-8中“你” 11100100,10111101,10100000。从高位起即第一个字节11100100就是把其中的”0100”给取出来，这个很简单只要和 11111（0x1F）取与（&amp;），由三字节可以得知最高位肯定位于12位之前，因为每次取六位。所以还要将得到的结果左移12位，最高位也就这样完成了0100,000000,000000。而第二位则是要把“111101”给取出来，则只需将第二字节10111101和111111(0x3F)取与（&amp;）。在将所得到的结果左移6位与最高字节所得的结果取或（|），第二位就这样完成了，得到的结果为 0100,111101,000000。以此类推最后一位直接与111111（0x3F）取与（&amp;），再与前面所得的结果取或（|）即可得到结果0100,111101,100000。</p>
<h4 id="PHP_代码实现">PHP 代码实现</h4><pre><code>/**
 * utf8字符转换成Unicode字符
 * @param  [type] <span class="variable">$utf8</span>_str Utf-<span class="number">8</span> 字符
 * @<span class="keyword">return</span> [type]           Unicode 字符
 */
<span class="keyword">function</span> utf8_to_unicode(<span class="variable">$utf8</span>_str) {
    <span class="variable">$unicode</span> = <span class="number">0</span>;
    <span class="variable">$unicode</span> = (ord(<span class="variable">$utf8</span>_str[<span class="number">0</span>]) &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">12</span>;
    <span class="variable">$unicode</span> |= (ord(<span class="variable">$utf8</span>_str[<span class="number">1</span>]) &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>;
    <span class="variable">$unicode</span> |= (ord(<span class="variable">$utf8</span>_str[<span class="number">2</span>]) &amp; <span class="number">0x3F</span>);
    return dechex(<span class="variable">$unicode</span>);
}

/**
 * Unicode字符转换成utf8字符
 * @param  [type] <span class="variable">$unicode</span>_str Unicode字符
 *  @<span class="keyword">return</span> [type]              Utf-<span class="number">8</span>字符
 */
<span class="keyword">function</span> unicode_to_utf8 (<span class="variable">$unicode</span>_str) {
    <span class="variable">$utf8</span>_str = <span class="string">''</span>;
    <span class="variable">$code</span> = intval(hexdec(<span class="variable">$unicode</span>_str));
    <span class="variable">$ord</span>_1 = decbin(<span class="number">0xe0</span> | (<span class="variable">$code</span> &gt;&gt; <span class="number">12</span>));
    <span class="variable">$ord</span>_2 = decbin(<span class="number">0x80</span> | ((<span class="variable">$code</span> &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>));
    <span class="variable">$ord</span>_3 = decbin(<span class="number">0x80</span> | (<span class="variable">$code</span> &amp; <span class="number">0x3f</span>));
    <span class="variable">$utf8</span>_str = chr(bindec(<span class="variable">$ord</span>_1)).chr(bindec(<span class="variable">$ord</span>_2)).chr(bindec(<span class="variable">$ord</span>_3));
    return <span class="variable">$utf8</span>_str;
}
</code></pre><p>这两个函数只是简单的实现了一下，只支持单个字符【一个完整的utf8字符或是一个完整的Unicode字符】互相转换，明白了原理就可以尽情去扩展了。</p>
<h3 id="GB2312_和_GBK_编码是怎么来的？">GB2312 和 GBK 编码是怎么来的？</h3><p>《信息交换用汉字编码字符集》是由中国国家标准总局 1980 年发布，1981 年 5 月 1 日开始实施的一套国家标准，标准号是GB 2312—1980。</p>
<p>GB2312 编码适用于汉字处理、汉字通信等系统之间的信息交换，通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持 GB 2312</p>
<p>GBK 向下与 GB 2312 编码兼容，向上支持 ISO 10646.1 国际标准，是前者向后者过渡过程中的一个承上启下的产物。ISO 10646 是国际标准化组织 ISO 公布的一个编码标准，即 Universal Multilpe-Octet Coded Character Set（简称UCS），大陆译为《通用多八位编码字符集》，台湾译为《广用多八位元编码字元集》，它与 Unicode 组织的 Unicode 编码完全兼容。ISO 10646.1 是该标准的第一部分《体系结构与基本多文种平面》。我国 1993 年以 GB 13000.1 国家标准的形式予以认可（即 GB 13000.1 等同于 ISO 10646.1）。</p>
<p>GBK 编码，是在 GB2312-80 标准基础上的内码扩展规范，使用了双字节编码方案，其编码范围从 8140 至 FEFE（剔除xx7F），共 23940 个码位，共收录了 21003 个汉字，完全兼容 GB2312-80 标准，支持国际标准 ISO/IEC10646-1 和国家标准 GB13000-1 中的全部中日韩汉字，并包含了 BIG5 编码中的所有汉字。GBK 编码方案于 1995 年 10 月制定， 1995 年 12 月正式发布，目前中文版的 WIN95、WIN98、WINDOWS NT 以及 WINDOWS 2000、WINDOWS XP、WIN 7 等都支持 GBK 编码方案。</p>
<h3 id="如何判断一个汉字是否是_UTF-8_编码？">如何判断一个汉字是否是 UTF-8 编码？</h3><p> mb_detect_encoding() 函数</p>
<h3 id="多字节转码函数_mbstring_和_iconv_有什么区别，如何选择？">多字节转码函数 mbstring 和 iconv 有什么区别，如何选择？</h3><p>iconv — Convert string to requested character encoding(PHP 4 &gt;= 4.0.5, PHP 5)</p>
<p>mb_convert_encoding — Convert character encoding(PHP 4 &gt;= 4.0.6, PHP 5) </p>
<h4 id="用法">用法</h4><p>string mb_convert_encoding ( string str, string to_encoding [, mixed from_encoding] ) </p>
<p>需要先启用 mbstring 扩展库</p>
<p>string iconv ( string in_charset, string out_charset, string str ) </p>
<p>注意：</p>
<pre><code>第二个参数，除了可以指定要转化到的编码以外，还可以增加两个后缀：<span class="comment">//TRANSLIT 和 //IGNORE，其中： </span>

<span class="comment">//TRANSLIT 会自动将不能直接转化的字符变成一个或多个近似的字符， </span>

<span class="comment">//IGNORE 会忽略掉不能转化的字符，而默认效果是从第一个非法字符截断。 </span>
</code></pre><p>Returns the converted string or FALSE on failure.</p>
<h4 id="使用">使用</h4><p>iconv 在转换字符”-“到 gb2312 时会出错，如果没有 ignore 参数，所有该字符后面的字符串都无法被保存。不管怎么样，这个”-“都无法转换成功，无法输出。另外 mb_convert_encoding 没有这个 bug。</p>
<p>mb_convert_encoding 可以指定多种输入编码，它会根据内容自动识别,但是执行效率比iconv差太多；如：$str = mb_convert_encoding($str,”euc-jp”,”ASCII,JIS,EUC-JP,SJIS,UTF- 8”);“ASCII,JIS,EUC-JP,SJIS,UTF-8”的顺序不同效果也有差异。</p>
<p>一般情况下用 iconv，只有当遇到无法确定原编码是何种编码，或者iconv转化后无法正常显示时才用mb_convert_encoding 函数。</p>
<h2 id="字符串常见算法和原理">字符串常见算法和原理</h2><h3 id="字符串常见算法－如何随机生成字符串？">字符串常见算法－如何随机生成字符串？</h3><pre><code><span class="keyword">function</span> random_str (<span class="variable">$lenght</span>) {
    <span class="variable">$base</span>_str = <span class="string">'123456789abcdefghijkmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ'</span>;
    <span class="variable">$str</span>_len = strlen(<span class="variable">$base</span>_str);
    <span class="variable">$result</span> = <span class="string">''</span>;
    for (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$length</span>; <span class="variable">$i</span>++) {
        <span class="variable">$result</span> .= <span class="variable">$base</span>_str{mt_rand(<span class="number">0</span>, <span class="variable">$str</span>_len - <span class="number">1</span>)};
    }
    return <span class="variable">$result</span>;
}
</code></pre><h3 id="字符串常见算法－如何实现字符串反转？">字符串常见算法－如何实现字符串反转？</h3><p>自带函数 strrev() 对汉字反转会乱码。</p>
<pre><code>/** 该方法支持中文反转 **/
<span class="keyword">function</span> str_rev_gb (<span class="variable">$str</span>) {
    // 判断输入的是否utf-<span class="number">8</span>类型的字符，不是退出
    if (!is_string(<span class="variable">$str</span>) || !mb_check_encoding(<span class="variable">$str</span>,<span class="string">'UTF-8'</span>)) {
        exit(<span class="string">'输入的类型不是 UTF8 类型的字符串'</span>);
    }
    // 将字符串存入数组
    <span class="variable">$str</span>_len = mb_strlen(<span class="variable">$str</span>, <span class="string">'UTF-8'</span>);
    <span class="variable">$tmp</span>_array = array();
    for (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$str</span>_len; <span class="variable">$i</span>++) {
        <span class="variable">$tmp</span>_array[] = mb_substr(<span class="variable">$str</span>, <span class="variable">$i</span>, <span class="number">1</span>, <span class="string">'UTF-8'</span>);
    }
    // 反转数组
    <span class="variable">$krsort</span>(<span class="variable">$tmp</span>_array);
    <span class="variable">$return</span>_str = implode(<span class="variable">$array</span>);
    return <span class="variable">$return</span>_str;
}
</code></pre><h3 id="字符串常见算法－如何实现字符串加密解密？">字符串常见算法－如何实现字符串加密解密？</h3><pre><code>/**
 * Discuz经典加密解密方法
 * @ <span class="variable">$string</span> 字符串，明文或密文
 * @ param <span class="variable">$operation</span>[ ENCODE DECODE ]
 * @ param <span class="variable">$key</span> 密钥
 * @ param <span class="variable">$expiry</span> 密文有效期
 */
<span class="keyword">function</span> authcode(<span class="variable">$string</span>, <span class="variable">$operation</span> = <span class="string">'DECODE'</span>, <span class="variable">$key</span> = <span class="string">''</span>, <span class="variable">$expiry</span> = <span class="number">0</span>) {
    <span class="variable">$GLOBALS</span>[<span class="string">'auth_key'</span>] = empty(<span class="variable">$GLOBALS</span>[<span class="string">'auth_key'</span>]) ? md5(<span class="string">'authkey'</span>) : <span class="variable">$GLOBALS</span>[<span class="string">'auth_key'</span>];
    <span class="variable">$ckey</span>_length = <span class="number">4</span>; // 动态密匙长度，相同的明文会生成不同密文就是依靠动态密匙
    <span class="variable">$key</span> = md5(<span class="variable">$key</span> ? <span class="variable">$key</span> : <span class="variable">$GLOBALS</span>[<span class="string">'discuz_auth_key'</span>]); // 密匙
    <span class="variable">$keya</span> = md5(substr(<span class="variable">$key</span>, <span class="number">0</span>, <span class="number">16</span>)); // 密匙a会参与加解密
    <span class="variable">$keyb</span> = md5(substr(<span class="variable">$key</span>, <span class="number">16</span>, <span class="number">16</span>)); // 密匙b会用来做数据完整性验证
    <span class="variable">$keyc</span> = <span class="variable">$ckey</span>_length ? (<span class="variable">$operation</span> == <span class="string">'DECODE'</span> ? substr(<span class="variable">$string</span>, <span class="number">0</span>, <span class="variable">$ckey</span>_length): substr(md5(microtime()), -<span class="variable">$ckey</span>_length)) : <span class="string">''</span>; // 密匙c用于变化生成的密文
    <span class="variable">$cryptkey</span> = <span class="variable">$keya</span>.md5(<span class="variable">$keya</span>.<span class="variable">$keyc</span>); // 参与运算的密匙
    <span class="variable">$key</span>_length = strlen(<span class="variable">$cryptkey</span>);
    // 明文，前<span class="number">10</span>位用来保存时间戳，解密时验证数据有效性，<span class="number">10</span>到<span class="number">26</span>位用来保存<span class="variable">$keyb</span>(密匙b)，
    // 解密时会通过这个密匙验证数据完整性
    // 如果是解码的话，会从第<span class="variable">$ckey</span>_length位开始，因为密文前<span class="variable">$ckey</span>_length位保存 动态密匙，以保证解密正确
    <span class="variable">$string</span> = <span class="variable">$operation</span> == <span class="string">'DECODE'</span> ? base64_decode(substr(<span class="variable">$string</span>, <span class="variable">$ckey</span>_length)) :  sprintf(<span class="string">'%010d'</span>, <span class="variable">$expiry</span> ? <span class="variable">$expiry</span> + time() : <span class="number">0</span>).substr(md5(<span class="variable">$string</span>.<span class="variable">$keyb</span>), <span class="number">0</span>, <span class="number">16</span>).<span class="variable">$string</span>;
    <span class="variable">$string</span>_length = strlen(<span class="variable">$string</span>);
    <span class="variable">$result</span> = <span class="string">''</span>;
    <span class="variable">$box</span> = range(<span class="number">0</span>, <span class="number">255</span>);
    <span class="variable">$rndkey</span> = array();
    // 产生密匙簿
    for(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt;= <span class="number">255</span>; <span class="variable">$i</span>++) {
        <span class="variable">$rndkey</span>[<span class="variable">$i</span>] = ord(<span class="variable">$cryptkey</span>[<span class="variable">$i</span> % <span class="variable">$key</span>_length]);
    }
    // 用固定的算法，打乱密匙簿，增加随机性，好像很复杂，实际上对并不会增加密文的强度
    for(<span class="variable">$j</span> = <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) {
        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$box</span>[<span class="variable">$i</span>] + <span class="variable">$rndkey</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;
        <span class="variable">$tmp</span> = <span class="variable">$box</span>[<span class="variable">$i</span>];
        <span class="variable">$box</span>[<span class="variable">$i</span>] = <span class="variable">$box</span>[<span class="variable">$j</span>];
        <span class="variable">$box</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;
    }
    // 核心加解密部分   
    for(<span class="variable">$a</span> = <span class="variable">$j</span> = <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$string</span>_length; <span class="variable">$i</span>++) {
        <span class="variable">$a</span> = (<span class="variable">$a</span> + <span class="number">1</span>) % <span class="number">256</span>;
        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$box</span>[<span class="variable">$a</span>]) % <span class="number">256</span>;
        <span class="variable">$tmp</span> = <span class="variable">$box</span>[<span class="variable">$a</span>];
        <span class="variable">$box</span>[<span class="variable">$a</span>] = <span class="variable">$box</span>[<span class="variable">$j</span>];
        <span class="variable">$box</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;
        <span class="variable">$result</span> .= chr(ord(<span class="variable">$string</span>[<span class="variable">$i</span>]) ^ (<span class="variable">$box</span>[(<span class="variable">$box</span>[<span class="variable">$a</span>] + <span class="variable">$box</span>[<span class="variable">$j</span>]) % <span class="number">256</span>])); // 从密匙簿得出密匙进行异或，再转成字符
    }
    if(<span class="variable">$operation</span> == <span class="string">'DECODE'</span>) {
        // 验证数据有效性，请看未加密明文的格式
        if((substr(<span class="variable">$result</span>, <span class="number">0</span>, <span class="number">10</span>) == <span class="number">0</span> || substr(<span class="variable">$result</span>, <span class="number">0</span>, <span class="number">10</span>) - time() &gt; <span class="number">0</span>) &amp;&amp;  substr(<span class="variable">$result</span>, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr(<span class="variable">$result</span>, <span class="number">26</span>).<span class="variable">$keyb</span>), <span class="number">0</span>, <span class="number">16</span>)) {
            return substr(<span class="variable">$result</span>, <span class="number">26</span>);
        } else {
            return <span class="string">''</span>;
        }
    } else {
        // 把动态密匙保存在密文里，这也是为什么同样的明文，生产不同密文后能解密的原因
        // 因为加密后的密文可能是一些特殊字符，复制过程可能会丢失，所以用base64编码
        return <span class="variable">$keyc</span>.str_replace(<span class="string">'='</span>, <span class="string">''</span>, base64_encode(<span class="variable">$result</span>));
    }
}

/**
 * @ param <span class="variable">$string</span> 字符串，明文或密码
 * @ param <span class="variable">$operation</span> E加密，D解密
 * @ param <span class="variable">$key</span> 密钥
 */
<span class="keyword">function</span> encrypt(<span class="variable">$string</span>, <span class="variable">$operation</span>, <span class="variable">$key</span>=<span class="string">''</span>) {
    <span class="variable">$key</span> = md5(<span class="variable">$key</span>);
    <span class="variable">$key</span>_length = strlen(<span class="variable">$key</span>);
    <span class="variable">$string</span> = <span class="variable">$operation</span> == <span class="string">'D'</span> ? base64_decode(<span class="variable">$string</span>) : substr(md5(<span class="variable">$string</span>.<span class="variable">$key</span>), <span class="number">0</span>, <span class="number">8</span>).<span class="variable">$string</span>;
    <span class="variable">$string</span>_length = strlen(<span class="variable">$string</span>);
    <span class="variable">$rndkey</span> = <span class="variable">$box</span> = array();
    <span class="variable">$result</span> = <span class="string">''</span>;
    for (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;=<span class="number">255</span>; <span class="variable">$i</span>++) {
        <span class="variable">$rndkey</span>[<span class="variable">$i</span>] = ord(<span class="variable">$key</span>[<span class="variable">$i</span> % <span class="variable">$key</span>_length]);
        <span class="variable">$box</span>[<span class="variable">$i</span>] = <span class="variable">$i</span>;
    }
    for (<span class="variable">$j</span> = <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) {
        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$box</span>[<span class="variable">$i</span>] + <span class="variable">$rndkey</span>[<span class="variable">$i</span>]) % <span class="number">256</span>;
        <span class="variable">$tmp</span> = <span class="variable">$box</span>[<span class="variable">$i</span>];
        <span class="variable">$box</span>[<span class="variable">$i</span>] = <span class="variable">$box</span>[<span class="variable">$j</span>];
        <span class="variable">$box</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;
    }
    for (<span class="variable">$a</span> = <span class="variable">$j</span> = <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$string</span>_length; <span class="variable">$i</span>++) {
        <span class="variable">$a</span> = (<span class="variable">$a</span> + <span class="number">1</span>) % <span class="number">256</span>;
        <span class="variable">$j</span> = (<span class="variable">$j</span> + <span class="variable">$box</span>[<span class="variable">$a</span>]) % <span class="number">256</span>;
        <span class="variable">$tmp</span> = <span class="variable">$box</span>[<span class="variable">$a</span>];
        <span class="variable">$box</span>[<span class="variable">$a</span>] = <span class="variable">$box</span>[<span class="variable">$j</span>];
        <span class="variable">$box</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;
        <span class="variable">$result</span> .= chr(ord(<span class="variable">$string</span>[<span class="variable">$i</span>]) ^ (<span class="variable">$box</span>[(<span class="variable">$box</span>[<span class="variable">$a</span>] + <span class="variable">$box</span>[<span class="variable">$j</span>]) % <span class="number">256</span>]));
    }
    if (<span class="variable">$operation</span> == <span class="string">'D'</span>) {
        if (substr(<span class="variable">$result</span>, <span class="number">0</span>, <span class="number">8</span>) == substr(md5(substr(<span class="variable">$result</span>, <span class="number">8</span>).<span class="variable">$key</span>), <span class="number">0</span>, <span class="number">8</span>)) {
            return substr(<span class="variable">$result</span>, <span class="number">8</span>);
        } else {
            return<span class="string">''</span>;
        }
    } else {
        return str_replace(<span class="string">'='</span>, <span class="string">''</span>, base64_encode(<span class="variable">$result</span>));
    }
}
</code></pre><h3 id="字符串常用算法－如何对字符串安全处理？">字符串常用算法－如何对字符串安全处理？</h3><pre><code><span class="keyword">function</span> get_val(<span class="variable">$val</span>, <span class="variable">$gpc</span>=<span class="string">"get"</span>, <span class="variable">$type</span>=<span class="number">0</span>) {
    switch (<span class="variable">$gpc</span>) {
        case <span class="string">'post'</span> :
            <span class="variable">$value</span> = $_POST[<span class="variable">$val</span>];
            break;
        case <span class="string">'get'</span> :
            <span class="variable">$value</span> = $_GET[<span class="string">'val'</span>];
            break;
        default:
            <span class="variable">$value</span> = $_REQUEST[<span class="string">'val'</span>];
            break;
    }

    switch (<span class="variable">$type</span>) {
        case <span class="number">0</span>:
            <span class="variable">$value</span> = addslashes(htmlspecialchars(<span class="variable">$value</span>, ENT_QUOTES));
            break;
        case <span class="number">1</span>:
            <span class="variable">$value</span> = intval(<span class="variable">$value</span>);
            break;
        case <span class="number">2</span>:
            <span class="variable">$value</span> = <span class="variable">$value</span>;
            break;
        default:
            <span class="variable">$value</span> = addslashes(htmlspecialchars(<span class="variable">$value</span>, ENT_QUOTES));
            break;
    }

    return <span class="variable">$value</span>;
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="字符串语法">字符串语法</h2><h3 id="PHP_中字符串的定义方式有哪些？">PHP 中字符串的定义方式有哪些？</h3><ul>
<li>单引号</li>
<li>双引号</li>
<li>heredoc 语法结构</li>
<li>nowdoc 语法]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 中字符串的定义方式]]></title>
    <link href="http://yoursite.com/2015/12/01/PHP-%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/12/01/PHP-中字符串的定义方式/</id>
    <published>2015-12-01T10:50:07.000Z</published>
    <updated>2015-12-02T17:53:51.000Z</updated>
    <content type="html"><![CDATA[<p>一个字符串 String 就是由一系列的字符组成，其中每个字符等同于一个字节。这就意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。最大可以达到 2GB。</p>
<h2 id="单引号">单引号</h2><p>定义一个字符串的最简单的方法是用单引号把它包围起来（字符’）。</p>
<pre><code>要表达一个单引号自身，需在它的前面加个反斜线（<span class="command">\）</span>来转义。要表达一个反斜线自身，则用两个反斜线（<span class="command">\\</span>）。其它任何方式的反斜线都会被当成反斜线本身：也就是说如果想使用其它转义序列例如 <span class="command">\r</span> 或者 <span class="command">\n</span>，并不代表任何特殊含义，就单纯是这两个字符本身。
</code></pre><h2 id="双引号">双引号</h2><p>如果字符串是包围在双引号（””）中，PHP 将对一些特殊的字符进行解析。</p>
<table>
<thead>
<tr>
<th>序列</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td> \n</td>
<td>换行（ASCII 字符集中的 LF 或 0x0A(10)）</td>
</tr>
<tr>
<td> \r</td>
<td>回车（ASCII 字符集中的 CR 或 0x0D (13)）</td>
</tr>
<tr>
<td> \t</td>
<td>水平制表符（ASCII 字符集中的 HT 或 0x09(9)）</td>
</tr>
<tr>
<td> \v</td>
<td>垂直制表符（ASCII 字符集中的 VT 或 0x0B(11)）（自 PHP 5.2.5 起）</td>
</tr>
<tr>
<td> \e</td>
<td>Escape（ASCII 字符集中的 ESC 或 0x1B(27)）（自 PHP 5.4.0 起）</td>
</tr>
<tr>
<td> \f</td>
<td>换页（ASCII 字符集中的 FF 或 0x0C(12)）（自 PHP 5.2.5 起）</td>
</tr>
<tr>
<td> \</td>
<td>反斜线</td>
</tr>
<tr>
<td> \$</td>
<td>美元标记</td>
</tr>
<tr>
<td> \”</td>
<td>双引号</td>
</tr>
<tr>
<td> [0-7]{1,3}</td>
<td>符合该正则表达式序列的是一个以八进制方式来表达的字符</td>
</tr>
<tr>
<td> \x[0-9A-Fa-f]{1,2}</td>
<td>符合该正则表达式序列的是一个以十六进制方式来表达的字符</td>
</tr>
</tbody>
</table>
<p>和单引号字符串一样，转义任何其他字符都会导致反斜线被显示出来。PHP 5.1.1 以前，{$var}中的反斜线还不会被显示出来。</p>
<p>用双引号定义的字符串最重要的特征是变量会被解析。</p>
<h2 id="heredoc_语法结构">heredoc 语法结构</h2><p>第三种表达字符串的方法是用 heredoc 句法结构：&lt;&lt;&lt; 。在该运算符之后要提供一个标识符，然后换行。接下来是字符串 String 本身，最后要用前面定义的标识符作为结束标志。</p>
<p>结束时所引用的标识符必须在该行的第一列，而且，标识符的命名也要像其他标签一样遵守 PHP 的规则：只能包含字母、数字和下划线，并且必须以字母和下划线作为开头。</p>
<pre><code><span class="rule"><span class="attribute">Warning</span>:<span class="value">
    要注意的是结束标识符这行除了可能有一个分号（</span></span>;）外，绝对不能包含其它字符。这意味着标识符不能缩进，分号的前后也不能有任何空白或制表符。更重要的是结束标识符的前面必须是个被本地操作系统认可的换行，比如在 <span class="tag">UNIX</span> 和 <span class="tag">Mac</span> <span class="tag">OS</span> <span class="tag">X</span> 系统中是 \<span class="tag">n</span>，而结束定界符（可能其后有个分号）之后也必须紧跟一个换行。

    如果不遵守该规则导致结束标识不“干净”，<span class="tag">PHP</span> 将认为它不是结束标识符而继续寻找。如果在文件结束前也没有找到一个正确的结束标识符，<span class="tag">PHP</span> 将会在最后一行产生一个解析错误。

    <span class="tag">Heredocs</span> 结构不能用来初始化类的属性。自 <span class="tag">PHP</span> 5<span class="class">.3</span> 起，此限制仅对 <span class="tag">heredoc</span> 包含变量时有效。
</code></pre><p>Heredoc 结构就象是没有使用双引号的双引号字符串，这就是说在 heredoc 结构中单引号不用被转义，但是上文中列出的转义序列还可以使用。变量将被替换，但在 heredoc 结构中含有复杂的变量时要格外小心。</p>
<h2 id="nowdoc_语法结构（自_PHP_5-3-0_起）">nowdoc 语法结构（自 PHP 5.3.0 起）</h2><p>就像 heredoc 结构类似于双引号字符串，Nowdoc 结构是类似于单引号字符串的。Nowdoc 结构很象 heredoc 结构，但是 nowdoc 中不进行解析操作。这种结构很适合用于嵌入 PHP 代码或其它大段文本而无需对其中的特殊字符进行转义。与 SGML 的 &lt;![CDATA[ ]]&gt; 结构是用来声明大段的不用解析的文本类似，nowdoc 结构也有相同的特征。</p>
<p>一个 nowdoc 结构也用和 heredocs 结构一样的标记 &lt;&lt;&lt;， 但是跟在后面的标识符要用单引号括起来，即 &lt;&lt;&lt;’EOT’。Heredoc 结构的所有规则也同样适用于 nowdoc 结构，尤其是结束标识符的规则。</p>
<h2 id="变量解析">变量解析</h2><p>当字符串用双引号或 heredoc 结构定义时，其中的变量将会被解析。</p>
<p>这里共有两种语法规则：一种简单规则，一种复杂规则。简单的语法规则是最常用和最方便的，它可以用最少的代码在一个 string 中嵌入一个变量，一个 array 的值，或一个 object 的属性。</p>
<p>复杂规则语法的显著标记是用花括号包围的表达式。</p>
<h3 id="简单语法">简单语法</h3><p>当 PHP 解析器遇到一个美元符号（$）时，它会和其它很多解析器一样，去组合尽量多的标识以形成一个合法的变量名。可以用花括号来明确变量名的界线。</p>
<p>一个 array 索引或一个 object 属性也可被解析。数组索引要用方括号（]）来表示索引结束的边际，对象属性则是和上述的变量规则相同。</p>
<h3 id="复杂（花括号）语法">复杂（花括号）语法</h3><p>复杂语法不是因为其语法复杂而得名，而是因为它可以使用复杂的表达式。</p>
<p>任何具有 String 表达的标量变量，数组单元或对象属性都可使用此语法。只需简单地像在 String 以外的地方那样写出表达式，然后用花括号 { 和 } 把它括起来即可。由于 { 无法被转义，只有 $ 紧挨着 { 时才会被识别。可以用 {\$ 来表达 {$。</p>
<h3 id="存取和修改字符串中的字符">存取和修改字符串中的字符</h3><p>String 中的字符可以通过一个从 0 开始的下标，用类似 array 结构中的方括号包含对应的数字来访问和修改，比如 $str[42]。可以把 String 当成字符组成的 array。函数 substr() 和 substr_replace() 可用于操作多于一个字符的情况。</p>
<pre><code>用超出字符串长度的下标写入将会拉长该字符串并以空格填充。非整数类型下标会被转换成整数。非法下标类型会产生一个 E_NOTICE 级别错误。用负数下标写入字符串时会产生一个 E_NOTICE 级别错误，用负数下标读取字符串时返回空字符串。写入时只用到了赋值字符串的第一个字符。用空字符串赋值则赋给的值是 <span class="literal">NULL</span> 字符。
PHP 的字符串在内部是字节组成的数组。因此用花括号访问或修改字符串对多字节字符集很不安全。仅应对单字节编码例如 ISO-<span class="number">8859</span>-<span class="number">1</span> 的字符串进行此类操作。
</code></pre><h2 id="转换成字符串">转换成字符串</h2><p>一个值可以通过在其前面加上 (string) 或用 strval() 函数来转变成字符串。在一个需要字符串的表达式中，会自动转换为 string。比如在使用函数 echo 或 print 时，或在一个变量和一个 string 进行比较时，就会发生这种转换。</p>
<p>一个布尔值 boolean 的 TRUE 被转换成 string 的 “1”。Boolean 的 FALSE 被转换成 “”（空字符串）。这种转换可以在 boolean 和 string 之间相互进行。</p>
<p>一个整数 integer 或浮点数 float 被转换为数字的字面样式的 string（包括 float 中的指数部分）。使用指数计数法的浮点数（4.1E+6）也可转换。</p>
<p>数组 array 总是转换成字符串 “Array”，因此，echo 和 print 无法显示出该数组的内容。要显示某个单元，可以用 echo $arr[‘foo’] 这种结构。</p>
<h2 id="字符串类型详解">字符串类型详解</h2><p>PHP 中的 string 的实现方式是一个由字节组成的数组再加上一个整数指明缓冲区长度。并无如何将字节转换成字符的信息，由程序员来决定。字符串由什么值来组成并无限制；特别的，其值为 0（“NUL bytes”）的字节可以处于字符串任何位置（不过有几个函数，在本手册中被称为非“二进制安全”的，也许会把 NUL 字节之后的数据全都忽略）。</p>
<p>字符串类型的此特性解释了为什么 PHP 中没有单独的“byte”类型 - 已经用字符串来代替了。返回非文本值的函数 - 例如从网络套接字读取的任意数据 - 仍会返回字符串。</p>
<p>由于 PHP 并不特别指明字符串的编码，那字符串到底是怎样编码的呢？例如字符串 “á” 到底是等于 “\xE1”（ISO-8859-1），”\xC3\xA1”（UTF-8，C form），”\x61\xCC\x81”（UTF-8，D form）还是任何其它可能的表达呢？答案是字符串会被按照该脚本文件相同的编码方式来编码。因此如果一个脚本的编码是 ISO-8859-1，则其中的字符串也会被编码为 ISO-8859-1，以此类推。不过这并不适用于激活了 Zend Multibyte 时；此时脚本可以是以任何方式编码的（明确指定或被自动检测）然后被转换为某种内部编码，然后字符串将被用此方式编码。注意脚本的编码有一些约束（如果激活了 Zend Multibyte 则是其内部编码）- 这意味着此编码应该是 ASCII 的兼容超集，例如 UTF-8 或 ISO-8859-1。不过要注意，依赖状态的编码其中相同的字节值可以用于首字母和非首字母而转换状态，这可能会造成问题。</p>
<p>当然了，要做到有用，操作文本的函数必须假定字符串是如何编码的。不幸的是，PHP 关于此的函数有很多变种：</p>
<ul>
<li>某些函数假定字符串是以单字节编码的，但并不需要将字节解释为特定的字符。例如 substr()，strpos()，strlen() 和 strcmp()。理解这些函数的另一种方法是它们作用于内存缓冲区，即按照字节和字节下标操作。</li>
<li>某些函数被传递入了字符串的编码方式，也可能会假定默认无此信息。例如 htmlentities() 和 mbstring 扩展中的大部分函数。</li>
<li>其它函数使用了当前区域（见 setlocale()），但是逐字节操作。例如 strcasecmp()，strtoupper() 和 ucfirst()。这意味着这些函数只能用于单字节编码，而且编码要与区域匹配。例如 strtoupper(“á”) 在区域设定正确并且 á 是单字节编码时会返回 “Á”。如果是用 UTF-8 编码则不会返回正确结果，其结果根据当前区域有可能返回损坏的值。</li>
<li>最后一些函数会假定字符串是使用某特定编码的，通常是 UTF-8。intl 扩展和 PCRE（上例中仅在使用了 u 修饰符时）扩展中的大部分函数都是这样。尽管这是由于其特殊用途，utf8_decode() 会假定 UTF-8 编码而 utf8_encode() 会假定 ISO-8859-1 编码。</li>
</ul>
<p>最后，要书写能够正确使用 Unicode 的程序依赖于很小心地避免那些可能会损坏数据的函数。要使用来自于 intl 和 mbstring 扩展的函数。不过使用能处理 Unicode 编码的函数只是个开始。不管用何种语言提供的函数，最基本的还是了解 Unicode 规格。例如一个程序如果假定只有大写和小写，那可是大错特错。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个字符串 String 就是由一系列的字符组成，其中每个字符等同于一个字节。这就意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode。最大可以达到 2GB。</p>
<h2 id="单引号">单引号</h2><p>定义一个字符串的最简单的方法是用单引号把]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery 选择器]]></title>
    <link href="http://yoursite.com/2015/11/24/jQuery-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2015/11/24/jQuery-选择器/</id>
    <published>2015-11-24T09:22:55.000Z</published>
    <updated>2015-11-25T02:30:37.000Z</updated>
    <content type="html"><![CDATA[<p>选择器是 jQuery 最基础的东西，本文中列举的选择器基本上囊括了所有的 jQuery 选择器，通过这篇文章能够加深对 jQuery 选择器的理解，它们本身用法就非常简单，我更希望的是它能够提升个人编写 jQuery 代码的效率。</p>
<h1 id="基本选择器">基本选择器</h1><h2 id="id_选择器_（指定_id_元素）">id 选择器 （指定 id 元素）</h2><p>将 <code>id = &#39;woolong_id&#39;</code> 的元素背景设置为黑色。（id 选择器返回单个元素）</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'#woolong_id'</span>).css(<span class="string">'background'</span>, <span class="string">'#000'</span>);
});
</code></pre><h2 id="class_选择器_（遍历_css_类元素）">class 选择器 （遍历 css 类元素）</h2><p>将 <code>class = &#39;woolong_class&#39;</code> 的元素背景设置为黑色。</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'.woolong_class'</span>).css(<span class="string">'background'</span>, <span class="string">'#000'</span>);
});
</code></pre><h2 id="element_选择器（遍历_html_元素）">element 选择器（遍历 html 元素）</h2><p>将 <code>p</code> 元素的文字大小设置为 12 px。</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'p'</span>).css(<span class="string">'font-size'</span>, <span class="string">'12px'</span>);
});
</code></pre><h2 id="*_选择器（遍历所有元素）">* 选择器（遍历所有元素）</h2><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'form *'</span>).css(<span class="string">'color'</span>, <span class="string">'#f00'</span>);
});
</code></pre><h2 id="并列选择器">并列选择器</h2><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'p, div'</span>).css(<span class="string">'margin'</span>, <span class="string">'0'</span>);
});
</code></pre><h1 id="层次选择器">层次选择器</h1><h2 id="parent_&gt;_child（直系子元素）">parent &gt; child（直系子元素）</h2><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="comment">// 选取 div 下的第一代 span 元素，将字体颜色设为红色</span>
    $(<span class="string">'div &gt; span'</span>).css(<span class="string">'color'</span>, <span class="string">'#f00'</span>);
});
</code></pre><p>下面的代码，只有第一个 span 会变色，第二个 span 不属于 div 的第一代子元素，颜色保持不变。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span>&gt;</span>123<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span>&gt;</span>456<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h2 id="prev_+_next（下一个兄弟元素，等同于_next()_方法）">prev + next（下一个兄弟元素，等同于 next() 方法）</h2><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="comment">// 选取 class 为 item 的下一个 div 兄弟元素</span>
    $(<span class="string">'.item + div'</span>).css(<span class="string">'color'</span>, <span class="string">'#f00'</span>);
    <span class="comment">// 等价代码</span>
    <span class="comment">// $('.item').next('div').css('color', '#f00');</span>
});
</code></pre><p>下面的代码，只有 123 和 789 会变色</p>
<pre><code><span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>123<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>456<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>789<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h2 id="prev_~_siblings（prev_元素的所有兄弟元素，等同于_nextAll()_方法）">prev ~ siblings（prev 元素的所有兄弟元素，等同于 nextAll() 方法）</h2><pre><code>$(funtion(){
    // 选取 class 为 <span class="keyword">inside</span> 之后的所有 div 兄弟元素
    $('.<span class="keyword">inside</span> ~ div').css('color', '#f00');
    // 等价代码
    // $('.<span class="keyword">inside</span>').nextAll('div').css('color', '#f00');
});
</code></pre><p>下面的代码，G2 和 G4 会变色</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"inside"</span>&gt;</span>G1<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>G2<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>G3<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>G4<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h1 id="过滤选择器">过滤选择器</h1><h2 id="基本过滤选择器">基本过滤选择器</h2><h3 id=":first_和_:last（取第一个元素或最后一个元素）"><code>:first</code> 和 <code>:last</code>（取第一个元素或最后一个元素）</h3><pre><code>$(funciton(){
    $(<span class="string">'span:first).css('</span>colo<span class="string">r', '</span><span class="comment">#foo');</span>
    $(<span class="string">'span:last).css('</span>colo<span class="string">r', '</span><span class="comment">#foo');</span>
});
</code></pre><p>下面的代码，G1（first 元素）和G3（last 元素）会变色</p>
<pre><code><span class="tag">&lt;<span class="title">span</span>&gt;</span>G1<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>G2<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>G3<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</code></pre><h3 id=":not（取非元素）"><code>:not</code>（取非元素）</h3><pre><code>$(funciton(){
    $(<span class="string">'div:not(.woolong_class)).css('</span>colo<span class="string">r', '</span><span class="comment">#foo');</span>
});
</code></pre><p>下面的代码，G1 会变色</p>
<pre><code>&lt;<span class="keyword">div</span>&gt;G1&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>='woolong_class'&gt;G2&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>但是，请注意下面的代码：</p>
<pre><code>&lt;<span class="keyword">div</span>&gt;
    G1
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"wrap"</span>&gt;G2&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>当 G1 所在 div 和 G2 所在 div 是父子关系时，G1 和 G2 都会变色。</p>
<h3 id=":even_和_:odd（取偶数索引或奇数索引元素，索引从_0_开始，even_表示偶数，odd_表示奇数）"><code>:even</code> 和 <code>:odd</code>（取偶数索引或奇数索引元素，索引从 0 开始，even 表示偶数，odd 表示奇数）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'tr:even'</span>).css(<span class="string">'background'</span>, <span class="string">'#EEE'</span>); <span class="comment">// 偶数行颜色</span>
    $(<span class="string">'tr:odd'</span>).css(<span class="string">'background'</span>, <span class="string">'#DADADA'</span>); <span class="comment">// 奇数行颜色</span>
});
</code></pre><p>A、C行颜色#EEE（第一行的索引为0），B、D行颜色#DADADA</p>
<p><img src="/images/201511/jquery.01.png" alt="jquery_01"></p>
<pre><code><span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"200"</span> <span class="attribute">cellpadding</span>=<span class="value">"0"</span> <span class="attribute">cellspacing</span>=<span class="value">"0"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tbody</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>A<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>B<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>C<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span>D<span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</code></pre><h3 id=":eq(x)（取指定索引的元素）"><code>:eq(x)</code>（取指定索引的元素）</h3><p>更改第三行的背景色</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'tr:eq(2)'</span>).css(<span class="string">'background'</span>, <span class="string">'#f00'</span>);
});
</code></pre><h3 id=":gt(x)_和_:lt(x)（取大于或小于索引的元素）"><code>:gt(x)</code> 和 <code>:lt(x)</code>（取大于或小于索引的元素）</h3><p>前两行和最后两行会变色</p>
<pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'ul li:gt(2)'</span>).css(<span class="string">'background'</span>, <span class="string">'#f00'</span>);
    $(<span class="string">'ul li:lt(2)'</span>).css(<span class="string">'background'</span>, <span class="string">'#00f'</span>);
});
</code></pre><p>L4 和 L5 会是红色，L1 和 L2 会是蓝色，L3 是默认颜色</p>
<p><img src="/images/201511/jquery.02.png" alt="jquery_02"></p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>L1<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>L2<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>L3<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>L4<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>L5<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><h3 id=":header（取_H1～H6_标题元素）"><code>:header</code>（取 H1～H6 标题元素）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">':header'</span>).css(<span class="string">'background'</span>, <span class="string">'#efefef'</span>);
});
</code></pre><p>下面的代码，H1～H6 的背景色都会变</p>
<p><img src="/images/201511/jquery.03.png" alt="jquery_03"></p>
<pre><code><span class="tag">&lt;<span class="title">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;<span class="title">h2</span>&gt;</span>H2<span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
<span class="tag">&lt;<span class="title">h3</span>&gt;</span>H3<span class="tag">&lt;/<span class="title">h3</span>&gt;</span>
<span class="tag">&lt;<span class="title">h4</span>&gt;</span>H4<span class="tag">&lt;/<span class="title">h4</span>&gt;</span>
<span class="tag">&lt;<span class="title">h5</span>&gt;</span>H5<span class="tag">&lt;/<span class="title">h5</span>&gt;</span>
<span class="tag">&lt;<span class="title">h6</span>&gt;</span>H6<span class="tag">&lt;/<span class="title">h6</span>&gt;</span>
</code></pre><h2 id="内容过滤选择器">内容过滤选择器</h2><h3 id=":contains(text)（取包含_text_文本的元素）"><code>:contains(text)</code>（取包含 text 文本的元素）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="comment">// dd 元素中国年包含“jQuery”文本的会变色</span>
    $(<span class="string">'dd:contains("jQuery")'</span>).css(<span class="string">'color'</span>, <span class="string">'#f00'</span>);
});
</code></pre><p>下面的代码，第一个 dd 会变色</p>
<p><img src="/images/201511/jquery.04.png" alt="jquery_04"></p>
<pre><code><span class="tag">&lt;<span class="title">dl</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>技术<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span>jQuery, PHP, MySql<span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>SEO<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span>关键字排名<span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>其他<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span><span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dl</span>&gt;</span>
</code></pre><h3 id=":empty（取不包含子元素或文本为空的元素）"><code>:empty</code>（取不包含子元素或文本为空的元素）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'dd:empty'</span>).html(<span class="string">'nothing'</span>);
});
</code></pre><p>下面的代码，第三个 dd 会显示“nothing”文本</p>
<p><img src="/images/201511/jquery.05.png" alt="jquery_05"></p>
<pre><code><span class="tag">&lt;<span class="title">dl</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>技术<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span>jQuery, PHP, MySql<span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>SEO<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span>关键字排名<span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dt</span>&gt;</span>其他<span class="tag">&lt;/<span class="title">dt</span>&gt;</span>
    <span class="tag">&lt;<span class="title">dd</span>&gt;</span><span class="tag">&lt;/<span class="title">dd</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dl</span>&gt;</span>
</code></pre><h3 id=":has(selector)（取选择器匹配的元素）"><code>:has(selector)</code>（取选择器匹配的元素）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="comment">// 为包含 span 元素的 div 添加边框</span>
    $(<span class="string">'div:has(span)'</span>).css(<span class="string">'border'</span>, <span class="string">'1px solid #000'</span>);
});
</code></pre><p>即使 span 不是 div 的直系子元素，也会生效</p>
<p><img src="/images/201511/jquery.06.png" alt="jquery_06"></p>
<pre><code><span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>
        A
        <span class="tag">&lt;<span class="title">span</span>&gt;</span>B<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">h2</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><h3 id=":parent（取包含子元素或文本的元素）"><code>:parent</code>（取包含子元素或文本的元素）</h3><pre><code>$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $(<span class="string">'ol li:parent'</span>).css(<span class="string">'border'</span>, <span class="string">'1px solid #000'</span>);
});
</code></pre><p>下面的代码，A 和 D 所在的 li 会有边框</p>
<p><img src="/images/201511/jquery.07.png" alt="jquery_07"></p>
<pre><code><span class="tag">&lt;<span class="title">ol</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>A<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>D<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ol</span>&gt;</span>
</code></pre><h2 id="可见性过滤选择器">可见性过滤选择器</h2><h3 id=":hidden（取不可见的元素）"><code>:hidden</code>（取不可见的元素）</h3><p> jQuery 至 1.3.2 之后的 :hidden 选择器仅匹配 display:none 或 <input type="hidden"> 的元素，而不匹配 visibility: hidden 或 opacity:0 的元素。这也意味着 hidden 只匹配那些“隐藏的”并且不占空间的元素，像 visibility:hidden 或 opactity:0 的元素占据了空间，会被排除在外。</p>
<p>参照：<a href="http://www.jquerysdk.com/api/hidden-selector" target="_blank" rel="external">http://www.jquerysdk.com/api/hidden-selector</a></p>
<p>下面的代码，先弹出“hello”对话框，然后 hid-1 会显示，hid-2 仍然是不可见的。</p>
<p><img src="/images/201511/jquery.08.png" alt="jquery_08"></p>
<pre><code><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/1999/xhtml"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">head</span> <span class="attribute">runat</span>=<span class="value">"server"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span>
        <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
            <span class="tag">div</span><span class="rules">{
                <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>;
                <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;
                <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;
                <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#FF0000</span></span></span>;
                <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;
            }</span>
            <span class="class">.hid-1</span><span class="rules">{
                <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
            }</span>
            <span class="class">.hid-2</span><span class="rules">{
                <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;
            }</span>
        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/jquery-1.11.3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
            $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
                $(<span class="string">'div:hidden'</span>).show(<span class="number">500</span>);
                alert($(<span class="string">'input:hidden'</span>).val());
            });
        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">body</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"hid-1"</span>&gt;</span>display: none<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"hid-2"</span>&gt;</span>visibility: hidden<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"hello"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><h3 id=":visible（取可见的元素）"><code>:visible</code>（取可见的元素）</h3><p>下面的代码，最后一个div会有背景色</p>
<p><img src="/images/201511/jquery.09.png" alt="jquery_09"></p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"hid-1"</span>&gt;</span>display: none<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"hid-2"</span>&gt;</span>visibility: hidden<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"hello"</span>/&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>
    jQuery 选择器
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        $(<span class="string">'div:visible'</span>).css(<span class="string">'background'</span>, <span class="string">'#EEADBB'</span>);
    });
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><h2 id="属性过滤选择器">属性过滤选择器</h2><h3 id="[attribute]（取拥有_attribute_属性的元素）"><code>[attribute]</code>（取拥有 attribute 属性的元素）</h3><p>下面的代码，最后一个 a 标签没有 title 属性，所以它仍然会带下划线</p>
<p><img src="/images/201511/jquery.10.png" alt="jquery_10"></p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        $(<span class="string">'a[title]'</span>).css(<span class="string">'text-decoration'</span>, <span class="string">'none'</span>);
    });
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"DOM 对象和 jQuery 对象"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>DOM 对象和 jQuery 对象<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"jQuery 选择器大全"</span> <span class="attribute">class</span>=<span class="value">"item-selected"</span>&gt;</span>jQuery 选择器<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"jQuery 事件大全"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>jQuery 事件<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"基于 jQuery 的插件开发"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>基于 jQuery 的插件开发<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"Wordpress &amp; jQuery"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>Wordpress &amp; jQuery<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>其他<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><h3 id="[attribute_=_value]和[attribute_!=_value]（取_attribute_属性值等于_value_或不等于_value_的元素）"><code>[attribute = value]</code>和<code>[attribute != value]</code>（取 attribute 属性值等于 value 或不等于 value 的元素）</h3><p>分别为 class=”item” 和 class!=item 的a标签指定文字颜色</p>
<p><img src="/images/201511/jquery.11.png" alt="jquery_11"></p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        $(<span class="string">'a[class = item]'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>);
        $(<span class="string">'a[class != item]'</span>).css(<span class="string">'color'</span>, <span class="string">'blue'</span>);
    });
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"DOM 对象和 jQuery 对象"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>DOM 对象和 jQuery 对象<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"jQuery 选择器大全"</span> <span class="attribute">class</span>=<span class="value">"item-selected"</span>&gt;</span>jQuery 选择器<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"jQuery 事件大全"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>jQuery 事件<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"基于 jQuery 的插件开发"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>基于 jQuery 的插件开发<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"Wordpress &amp; jQuery"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>Wordpress &amp; jQuery<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"item"</span>&gt;</span>其他<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><h1 id="参考">参考</h1><p><a href="http://www.php100.com/html/webkaifa/javascript/2012/0611/10527.html" target="_blank" rel="external">http://www.php100.com/html/webkaifa/javascript/2012/0611/10527.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>选择器是 jQuery 最基础的东西，本文中列举的选择器基本上囊括了所有的 jQuery 选择器，通过这篇文章能够加深对 jQuery 选择器的理解，它们本身用法就非常简单，我更希望的是它能够提升个人编写 jQuery 代码的效率。</p>
<h1 id="基本选择器">基]]>
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="选择器" scheme="http://yoursite.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP 请求大小]]></title>
    <link href="http://yoursite.com/2015/11/24/HTTP-%E8%AF%B7%E6%B1%82%E5%A4%A7%E5%B0%8F/"/>
    <id>http://yoursite.com/2015/11/24/HTTP-请求大小/</id>
    <published>2015-11-24T06:37:57.000Z</published>
    <updated>2015-11-24T09:16:34.000Z</updated>
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收HTML页面的方法。HTTP 分为 URI，HEADER，Body 三个部分。每个部分都可以包含请求信息，那么每个部分是否都有请求大小限制呢？</p>
<h2 id="URI">URI</h2><p>首先是URI（uniform resource identifier 统一资源标识符，用来唯一的标识一个资源），我们知道，在 GET 请求中，请求参数是放在 URL 进行传递的，所以，HTTP GET 的请求最关心的一个问题：能有多长？我能放多少参数？从 HTTP 1.1 协议中开始找：（ RFC 2616 ）</p>
<pre><code>The HTTP protocol <span class="keyword">does</span> <span class="keyword">not</span> place any a priori limit <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> <span class="property">length</span> <span class="keyword">of</span> a URI
</code></pre><p>所以明确一点的是 HTTP 协议是没有显式限制 URI 的长度的。理论上来说你在 URI 中传递多少参数都是可以的。</p>
<p>但是实际情况却有所不同</p>
<h3 id="浏览器限制">浏览器限制</h3><p>所有主流浏览器都会对 URI 的长度进行限制。如果你在浏览器中输入过长的 URI，那么浏览器会自动进行截断。各个浏览器对 URI 长度的限制各不相同，甚至不同版本也不一样。大约一个概念，2000 字符以内的 URI 都能符合所有主流浏览器的要求。</p>
<h3 id="服务端限制">服务端限制</h3><p>即使客户端同意发送无限长度的 URI，但是服务器一方一般都是有长度限制的。一般服务是没有专门针对 URI 的参数限制的，但是由于 URI 是会包含在 request header 中的，所以对 header 的大小限制是会对 URI 起作用的，比如 nginx 的（ large_client_header_buffers ）这个属性，它默认是 4k。<br><em>ps:这里的“ URI 是包含在 request header 中的” 这句话其实是有问题的。URI 在 HTTP 协议中是叫做request-Line 的，如果具体看协议，是会发现 request-Line 和 request-header 是两个不一样的，就是说 request 的请求其实该分为 request-line , request-header , request-body 三个部分的（具体可以看 <a href="http://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc2616.txt</a> 第4和5章）。但是好像使用的时候都默认将header中理解为包含了 request-line（比如这篇文章 <a href="http://trafficserver.apache.org/docs/v2/sdk/HTTPHeaders.html" target="_blank" rel="external">http://trafficserver.apache.org/docs/v2/sdk/HTTPHeaders.html</a> ）。这里估计是概念和使用的时候导致问题，不必深究了，所以我们不妨将 request-line 理解为包含在 header 中就好。</em></p>
<p>综上所述，这里的 URI 不论是客户端还是服务端，基本上被默认限制住的。</p>
<h2 id="HEADER">HEADER</h2><p>header 中存放的信息非常多，比如 request-line，cookie，还有各种 key-value 的特定 header 字段和值。有时候，我们也会往 header 中添加一些自定义的属性。header 的长度和 URI 的情况是一样的。协议中并没有显示限制 header 的大小。理论上在 header 中放多少属性都是可以的。</p>
<p>但是</p>
<h3 id="浏览器限制-1">浏览器限制</h3><p>各个主流浏览器限制几十 k ～ 几百 M 不等的限制。基本上能满足平时的需求了。但是如果这个长度对你业务有很大影响的话，建议还是亲自测试下。</p>
<h3 id="服务端限制-1">服务端限制</h3><p>比如 nginx 的large_client_header_buffers 就限制了 header 的长度。你也可以自己设置。</p>
<p>可能会影响 header 的参数还有：</p>
<p><strong>client_header_buffer_size</strong></p>
<p><strong>client_header_timeout</strong></p>
<p>各参数可以参考：<a href="http://wiki.nginx.org/HttpCoreModule" target="_blank" rel="external">http://wiki.nginx.org/HttpCoreModule</a></p>
<h2 id="Body">Body</h2><p>body 和 URI，header 非常不一样，不一样的地方原因在于文件上传。HTTP 是支持 request 中带文件的，那么文件的二进制数据不会放在 URI 或者 header 里面，它是放在 body 里面的。那么这个 body 的大小就一定不能默认限制太小，尤其是客户端。</p>
<p>首先理论上，协议是没有对 body 大小做任何限制的。</p>
<p>其次，浏览器也没有对 body 做任何大小限制，因为如果浏览器做了大小限制就意味着它直接影响了你的服务功能。</p>
<p>所以对 body 的限制的任务就放在了服务器上了。来看下 nginx + php-fpm 有哪些地方可以对 body 进行限制 ：</p>
<h3 id="nginx_有一些设置会对_body_大小产生影响">nginx 有一些设置会对 body 大小产生影响</h3><p><strong>client_max_body_size</strong>，这个参数可以限制 body 的大小，默认是 1M</p>
<p><strong>client_body_timeout</strong>，当 body 太大，或者网络太差的时候，这个也有可能会影响请求的成功率的。</p>
<h3 id="php-ini_也有一些设置会对上传的_body_数据产生影响">php.ini 也有一些设置会对上传的 body 数据产生影响</h3><p><strong>upload_max_filesize</strong>，限制最大上传文件大小</p>
<p><strong>post_max_size</strong>，限制 post 的大小</p>
<p><strong>memory_limit</strong>，限制内存使用大小</p>
<p><strong>max_execution_time</strong>，这个是 php 最大执行时间，也有可能影响请求成功率的。</p>
<h2 id="HTTP_请求大小的影响">HTTP 请求大小的影响</h2><h3 id="安全因素考虑">安全因素考虑</h3><p>如果一个网站的服务器不限制 body 大小，那么黑客就可以利用这个地方进行攻击。黑客利用这一点向 HTTP POST 的 body 中传递非常大（比如几 M甚至更大）的请求。那么比如像 nginx + php-fpm 这样的，就会长时间占用服务器一个 php 进程专门用于处理这个请求，导致你对外提供的服务进程减少，如果黑客同时发起n个请求，你的服务器就瘫痪了，这就是 DDOS 攻击。</p>
<h3 id="文件上传服务考虑">文件上传服务考虑</h3><p>文件上传有两种情况：</p>
<p>你可能经常遇到为什么文件上传失败？那么大多是上文说的几个设置没有设置对。</p>
<p>其次，文件上传大小是不是设置越大越好？答案必须是否定的，理由也是安全考虑。满足需求的大小限制就够了。</p>
<p>这里可以解释为什么大部分网站会把文件上传和业务接口分开来提供了。如果你的文件上传服务和业务接口是同一个机器的话，那么就说明你的业务接口可以允许的 body 大小一定是很大的。换句话说，在这种情境下，你的业务中的所有 POST 请求都是不安全的！！只要进行 DDOS 攻击，业务就会瘫痪。</p>
<h2 id="参考">参考</h2><p><a href="http://www.cnblogs.com/yjf512/archive/2013/03/29/2988296.html" target="_blank" rel="external">http://www.cnblogs.com/yjf512/archive/2013/03/29/2988296.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收HTML页面的方法。HTTP 分为 URI，HEADER，Body ]]>
    </summary>
    
      <category term="get" scheme="http://yoursite.com/tags/get/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="post" scheme="http://yoursite.com/tags/post/"/>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[curl 和 libcurl 简介]]></title>
    <link href="http://yoursite.com/2015/11/17/curl-%E5%92%8C-libcurl-%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2015/11/17/curl-和-libcurl-简介/</id>
    <published>2015-11-16T18:43:36.000Z</published>
    <updated>2015-11-20T15:50:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CURL">CURL</h2><p>curl 是<b>利用 URL 语法在命令行方式下</b>工作的开源文件传输工具。</p>
<p>它支持很多协议：DICT, FILE, FTP, FTPS,Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP。</p>
<p>curl 同样支持证书: HTTP POST, HTTP PUT, FTP上传，基于表单的 HTTP 上传，代理（proxies）、cookies、用户名／密码认证（Basic，Digest，NTLM等）、下载文件断点续传，上载文件断点续传（file transfer resume），http 代理服务器管道（proxy tunneling）以及其他特性。</p>
<p>curl 是瑞典 curl 组织开发的，官网是 <a href="http://curl.haxx.se" target="_blank" rel="external">http://curl.haxx.se</a>，可以从官网获取他的源代码和相关说明。</p>
<h2 id="LibCURL">LibCURL</h2><p>libcurl 为一个免费开源的，客户端 url 传输库，支持 DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP 等协议。</p>
<p>同 curl 一样，libcurl 也支持 SSL 证书，HTTP POST, HTTP PUT, FTP 上传，基于表单的 HTTP 上传，代理（proxies）、cookies、用户名／密码认证（Basic，Digest，NTLM等）、下载文件断点续传、上载文件断点续传（file transfer resume）、http 代理服务器管道（proxy tunneling）等。</p>
<p>libcurl 是高度可移植的，可以工作在不同的平台上，支持 Windows、Unix、Linux 等。</p>
<p>libcurl 是免费的、线程安全的、IPV6 兼容的，同时它还有很多其他非常丰富的特性。libcurl 已经被很多知名的大企业以及应用程序所采用。</p>
<p>可以在<a href="http://curl.haxx.se/libcurl/" target="_blank" rel="external">这里</a>获取 libcurl 的源码及相关文档。</p>
<h2 id="CURL_和_libCURL_的区别">CURL 和 libCURL 的区别</h2><h3 id="相同点">相同点</h3><p>curl 和 libcurl 都可以利用多种多样的协议来传输文件，包括 HTTP, HTTPS, FTP, FTPS, GOHPER, LDAP, DICT, TELNET ADN FILE 等。</p>
<h3 id="不同点">不同点</h3><p>curl 是命令行工具，可以通过 shell 或脚本来运行 curl。curl 底层所使用的库是 libcurl。<br>libcurl 是一个库，通常与别的程序绑定在一起使用，如命令工具 curl 就是封装了 libcurl 库。所以我们也可以在你自己的程序或项目中使用 libcurl 以获得类似 CURL 的强大功能。接下来将要介绍的 PHP 扩展就是对 curl 的一个封装。</p>
<h2 id="几个名词">几个名词</h2><h3 id="“curl”的不同意思">“curl”的不同意思</h3><ul>
<li>命令行工具，可以从 shell 或者脚本中或者批处理文件中运行 curl。curl 创建于 1988 年，并且提供了 100 多个选项去控制它。</li>
<li>cURL 是一个软件项目的名字。该软件项目包含了上面所说的 curl 和 libcurl ，并且都是开源的。</li>
<li>CURL 通常用作 PHP 中 libcurl 扩展的名字。这个扩展确保了 PHP 程序猿在程序中可以访问 libcurl 库所提供的功能。</li>
</ul>
<h3 id="curl_–_命令行工具">curl – 命令行工具</h3><ul>
<li>命令行工具，可以从 shell 或者脚本中运行该工具。</li>
<li>提供了 130 多种不同的 “flags”。</li>
<li>通常被用来模拟浏览器的行为。</li>
<li>跨平台。</li>
</ul>
<h3 id="libcurl_–_库">libcurl – 库</h3><ul>
<li>用作其他程序的开发库。</li>
<li>可以与许多语言相结合，如：PHP、C++</li>
<li>跨平台。</li>
<li>提供了多种不同的使用它的APIs。</li>
</ul>
<h2 id="PHP_中使用_curl_和_libcurl">PHP 中使用 curl 和 libcurl</h2><h3 id="PHP中使用_curl">PHP中使用 curl</h3><p>在 PHP 中使用 curl 非常简单，只要调用 PHP 中几个执行系统命令的相关函数即可。</p>
<p>代码示例：</p>
<pre><code><span class="variable">$baidu</span> = shell_exec(<span class="string">"/usr/bin/curl -L http://www.baidu.com"</span>);
var_dump(<span class="variable">$baidu</span>);
</code></pre><h3 id="PHP_中使用_libcurl">PHP 中使用 libcurl</h3><p>在 PHP 中使用 libcurl ，也就是我们通常所说的 PHP 中的 “curl”。这部分的内容会在以后的文章中给出，这里只写出一个示例代码：</p>
<pre><code>// FTP this script <span class="keyword">to</span> a server
<span class="variable">$fp</span> = fopen(__FILE_<span class="number">_</span>, <span class="string">"r"</span>);
<span class="variable">$url</span> = <span class="string">"ftp://username:password@mydomain.com:21/path/to/newfile.php"</span>;
<span class="variable">$ch</span> = curl_init();
curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);
curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);
curl_setopt(<span class="variable">$ch</span>, CURLOPT_UPLOAD, <span class="number">1</span>);
curl_setopt(<span class="variable">$ch</span>, CURLOPT_INFILE, <span class="variable">$fp</span>);
curl_setopt(<span class="variable">$ch</span>, CURLOPT_FTPASCII, <span class="number">1</span>);
curl_setopt(<span class="variable">$ch</span>, CURLOPT_INFILESIZE, filesize(__FILE_<span class="number">_</span>));
<span class="variable">$result</span> = curl_exec(<span class="variable">$ch</span>);
curl_close(<span class="variable">$ch</span>);
</code></pre><h3 id="使用_curl_还是_libcurl_？">使用 curl 还是 libcurl ？</h3><p>使用 curl 还是 libcurl 这个需要根据具体的情况而定。例如，当有一个定时脚本在远程服务器的文件改变时发送邮件或者当前 PHP 环境不支持 libcurl 时，我们应该使用 curl。否则，我们使用 libcurl 即可。</p>
<h2 id="引用">引用</h2><p><a href="http://www.php101.cn" target="_blank" rel="external">php101.cn</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="CURL">CURL</h2><p>curl 是<b>利用 URL 语法在命令行方式下</b>工作的开源文件传输工具。</p>
<p>它支持很多协议：DICT, FILE, FTP, FTPS,Gopher, HTTP, HTTPS, IMAP, IMAPS, L]]>
    </summary>
    
      <category term="curl" scheme="http://yoursite.com/tags/curl/"/>
    
      <category term="libcurl" scheme="http://yoursite.com/tags/libcurl/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web Vulnerabilities Explained]]></title>
    <link href="http://yoursite.com/2015/11/03/Web-Vulnerabilities-Explained/"/>
    <id>http://yoursite.com/2015/11/03/Web-Vulnerabilities-Explained/</id>
    <published>2015-11-03T07:25:45.000Z</published>
    <updated>2015-11-12T18:16:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Information_Gathering">Information Gathering</h2><p>There are many places where you can start gathering information about your target. Information could include:</p>
<ul>
<li>Contact details and personal information for social engineering attacks</li>
<li>Metafiles for the web application meant for crawlers and robots which could pinpoint forbidden directories and files in the website, amongst other things</li>
<li>Examining the application entry/handover points</li>
<li>Analysis of the application’s error codes which may reveal sensitive or information that is not supposed to be shown which can indicate the technologies and products used by it so you can search for vulnerabilitive online for the exact technology the app uses when commencing an attack</li>
<li>Search Engine Discovery or Reconnaissance to find existing vulnerabilities of the application that may be published online.</li>
<li>Mapping the application’s paths can help you identify each area in the website that should be investigated for vulnerabilities</li>
<li>Getting the fingerprint of the web server to get acquainted of the version and type of web server you are dealing with so you can determine known vulnerabilities and exploit them</li>
</ul>
<h3 id="Search_Engine_Discovery">Search Engine Discovery</h3><p>If you are thinking on launching a social engineering attack to gain access you can start with browsing the files that search engines have indexed.</p>
<p>You are search Google for specific file/extensions located in a particular website. Here are some examples you can try out:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filetype:</span>txt <span class="string">inurl:</span>infosecinstitute.com</span><br><span class="line"><span class="string">filetype:</span>pdf <span class="string">inurl:</span>infosecinstitute.com</span><br><span class="line"><span class="string">filetype:</span>doc <span class="string">inurl:</span>infosecinstitute.com</span><br></pre></td></tr></table></figure>
<h3 id="Metafiles">Metafiles</h3><p>You can check the application endpoints that the owners wanted to hide from searh engines in order to determine what they value enough and what they are trying to protect from unwary eyes. One such file is robots.txt, which is usually placed in root of domain or a subdomain.</p>
<h3 id="Testing_error_codes">Testing error codes</h3><p>Most websites disallow access to entire directories and only allow certain files. In PHP, this can be done through adding Options All -Indexes in your root’s .htaccess file. You can use this to see what kind of 403 Forbidden errors ths server returns.</p>
<p>Many websites create a custom 404 page and they prohibit directory listing. However, they do not add a custom 403 HTTP status code page that can lead to infomation about the server being revealed.</p>
<p>An important habit is to check the headers the server returns when you send an HTTP request. In cURL this could be done using ths following command: <code>curl -v websiteURLhere</code></p>
<h3 id="Things_typically_retrieved_during_the_Information_Gathering_phase">Things typically retrieved during the Information Gathering phase</h3><p>In the first step of the information-gathering process, the attacker would try to get hold of data about the <strong>infrastructure-in-use</strong> and the <strong>people-in-use</strong>. The former could be used for discovering new, easier targets and shared resources while the latter could be used to launch brute-force attacks on the ruuning services and initiate social engineering and spearphishing attacks. It is also possible for the attackers to look for different kinds of information leaks, investigations and analyses.</p>
<p>Fetching as much data as possible to see what could be retrieved is a necessity in penetration testing, but web developers could also perform this task to see whether their system is not revealing too much data about itself.</p>
<p>Your website has to be designed usiing good exception handling/coding standards. In case there are flaws in that field, attackers can type malformed queries to the application you are creating or examing and use the displayed errors to learn more about the backend behind the web application (such as table and column names,particular code snippets which could reveal flaws) or the technologies and products that the web application relies on.</p>
<p>The attacker might also try to get to know the technologies and products behind the web application through examining the headers in order to understand what types of vulnerabilities he could exploit.</p>
<p>The attacker can also check the mail headers of emails received from the target, which can reveal the application they were sent from, the IP address and the host of the sending entity.</p>
<p>They can check search engines for subdomains and link them to their respective IP addresses to broaden their attack possibilities with a tool such as <strong><a href="http://www.edge-security.com/theharvester.php" target="_blank" rel="external">theHarvester</a></strong>.</p>
<p>Email addresses can be automatically collected using tools like theHarvester.</p>
<p>Once the attackers found emails, names or other information related to people involved with a target they can head over to the social media to find personal information about those people, which can help them in social engineering attacks. Such sites, like LinkedIn, contain data about the person’s current job, his past jobs, education, job description amongst other data, which could make for one highly targeted spear-phishing attack and point of entry.</p>
<p>Metadat (data about data) could be extracted from publicly available resources from your web application to gain more information about it.</p>
<p>Metadata in images (EXIF or Exchangeable Image File Format which includes the file extensions .jpg amongst orthers) can reveal the GPS coordinates of the people in the photo at the time when what photo was taken (where and when they were), the type of camera and its serial number with possibly all details about the camera. There are programs that can display that metadata such as Photoshop as well as quick methods available online to access that metadata (such as <strong><a href="http://regex.info/exif.cgi" target="_blank" rel="external">http://regex.info/exif.cgi</a></strong>).</p>
<p>Documents found online (such as .pdf, .doc, .ppt, .xls) also contain metadata and a tool called <strong>Metagoofil</strong> could be used to view it. It can reveal machine usernames, worker names, server names, paths (by showing the path where the file was located at a given point), software versions and dates. Those bits of infomation could be used for targeted social engineering attacks, finding existing vulnerabilities in the used software, amongst other purposes.</p>
<p>Cyber-criminals can also run automated software that would check in which popular websites a user is registered to enable even more personal and complicated spear-phishing attacks, attempt credential stuffing/launch brute-force attacks, etc.</p>
<p>EXIF metadata from images can also be removed, even with online tools such as <strong><a href="http://www.verexif.com/en/index.php" target="_blank" rel="external">http://www.verexif.com/en/index.php</a></strong>.</p>
<h2 id="Clickjacking">Clickjacking</h2><p>Clickjacking is an attack in which the attacker uses transparent/opaque layers to trick the users that they are clicking on one button whereas they are actually clicking on a different button possibly on a different website.</p>
<p>To prevent such attacks, you should set in your response headers X-Frame-Options to either deny, SAMEORIGIN or whitelist only particular websites through ALLOW-FROM <urls>.</urls></p>
<p>This is a form of UI redressing that penetration testers should ensure is not possible and web developers remedy through the use of the X-Frame-Options header.</p>
<h2 id="Forced_Browsing">Forced Browsing</h2><p>Forced browsing is a vulnerability in which the attacker can access resources that are not linked to by the application but are still accessible if you know how to find them. For example, you can just change the URL in some predicatable manner and see a resource of another person. This technique allows you to brute-force different combinations and come up with resources that you are interested in.</p>
<p>Sometimes, what you have to change is even easier - there would just be a number that you would have to keep incrementing/decrementing or there would be a name you would have to guess(there are many common names out there).</p>
<p>Automated directory surfing is possible. The automated program can open different directories and if they exist and are accessible - it can record that so that the attacker can check them out later. The first thing that you need to do is prevent users from browsing directories and having a listing with all files/subdirectories that exist there. In PHP, you can do that by creating an .htaccess file in your web root and add the following line to it:</p>
<h3 id="Options_All_-Indexes">Options All -Indexes</h3><p>pass……</p>
<h2 id="Unvalidated_Redirects_and_Forwards">Unvalidated Redirects and Forwards</h2><p>If you have a web application that takes a URL as a parameter and redirects to it without proper validation, then an attacker can give a link to your website. However, that link would actually redirect to another website, which may be malicious in terms of prompting users to install malware or it could be a phishing website looking exactly as yours so the attacker can get the user’s credentials or similar sensitive data.</p>
<p>Here is an example:<a href="http://www.example.com/out?redirect=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FADD" target="_blank" rel="external">http://www.example.com/out?redirect=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FADD</a></p>
<p>An unwary user may not see that this will actually take him to <a href="http://www.en.wikipedia.org/wiki/ADD" target="_blank" rel="external">http://www.en.wikipedia.org/wiki/ADD</a> instead of the given website and attackers can exploit this.</p>
<p>To remedy such a situation avoid redirects and forwards. If they cannot be avoided, do not use user parameters (especially GET parameters which are located in the URL) when determining the destination website. For example, this can be done in PHP simply by adding a location header before a response is sent to the user and you can hardcode the values depending on your app’s logic redirection requirements.</p>
<p>If both are impossible, then you have to ensure the given value is valid and authorized for that particular user.</p>
<p>Particular measures you can implement immediately are:</p>
<ul>
<li>Create a whitelist of trustworthy websites for which user redirection will be allowed (like an array or database table with hosts).</li>
<li>Before redirecting, inform the user to which website they are going to be redirected to and allow them to confirm their intention of goning there. If they do not confirm - do not redirect them.</li>
</ul>
<h2 id="Credential_Stuffing(撞库)">Credential Stuffing(撞库)</h2><p>This attack occurs when there are already leaked accounts and passwords in the Internet or the attacker has acquired them himself from a website he managed to crack and get account/password combinations from that website’s database. Credential stuffing or accunt takeover is the act of using stolen credentials to try to log in to different websites with them and completely control that account. Usually, the attacker would use an account checker that will promptly test many websites if the credentials are valid there. Web automation toolkits such as PhantomJS could be used to create such account checkers and powerful ones cost as little as 100$. Typically, successful logins are between 0.1% and 0.2% of the total login attempts.</p>
<p>There is no proper way to prevent such sa attackers can gain credentials from a third-party website and use them to login as users in your website. One thing you can do is provide some sort of UI informing the users that using the same password  in many websites is dangerous when they are in the registration process.</p>
<p>Another thing you can do to mitigate such an attack is look out for credential leaks of third-party websites, obtain the data that leaked and determine whether the password associated with easy leaked email address in the third-party website is the same as the password in your website. If so, you can lock their account, force them to reset their passwords or undertake any other action that can help users. Facebook has been following this procedure as you can read in <a href="http://www.forves.com/site/erikkani/2015/11/01/the-walking-dead-season-6-episode-4-review" target="_blank" rel="external">Amit Chowedhy’s article for Forbes</a>.</p>
<h2 id="Path_Traversal">Path Traversal</h2><p>This vulnerability can be seen in websites that receive input from the user and use it in a path to access files in the file system. It allows the attacker to access files and/or directories that are restricted or are designed not to be seen by website visitors.</p>
<p>You can see the example in the files/path-traversal folder.</p>
<p>If we have some anchors that load different files on our website:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"?page=about.html"</span>&gt;</span>About<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"?securePage=about"</span>&gt;</span>Better About<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then, a completely insecure way of loading the file would be something like this:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'page'</span>])) &#123;</span><br><span class="line">	<span class="keyword">include_once</span>(<span class="variable">$_GET</span>[<span class="string">'page'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>With this, the user could load a malicious remote file on your website (code injection) and he could traverse all your directories and access their files. This is because the files will be opened by the back-end even if you are not allowing users to open .htaccess, .ini or other files the server will have access to them in most cases.</p>
<p>A better way to load files through a user-provided parameter is to whitelist particular files that could be accessed by your application. If you are only testing the application, this is a recommendation you ought to give the people-in-charge if they are allowing third-party files. You can even force the files to have a particular file extension by not including the file extension  in the parameter. In such cases, replacing all . and / characters is not really necessary but we are showing you how you can use this vector of protection against path traversal as well.</p>
<p>Path traversal is a way to get access to every file existing on the system and it is a big security flaw if found by penetration testers.</p>
<h2 id="Code_Injection">Code Injection</h2><p>If a penetration tester or an attacker has found a code injection vulnerability then he has successfully owned a website so extra caution should be token by developers not to allow this.</p>
<p>Code injection can happen when it is possible to inject programming code that will be executed by the targeted application as its own. It exploits improper handling of the user input and its validation.</p>
<p>To fix this, we have to validate the input. It turns out we want to allow the user to write one number and either subtract, add, multiply, divide it by another number or find the modulus. Thus, we only have to use a regular expression that searches for this exact pattern and if it does not match - we should not evaluate the user’s expression. It would be a good idea to check the size of the input before examining the input but we did not do this in this sample scenario.</p>
<h2 id="OS_Command_Injection">OS Command Injection</h2><p>OS Command Injection is a type of injection that is possible when your web application uses user input to form the string that is going to be executed as a system level command.</p>
<h2 id="Cross-Site_Request_Forgery">Cross-Site Request Forgery</h2><p>CSRF is an attack vector where the user carries out undesired actions in a web application they are currently logged in. For example, an attacker on some site can add an image linking to a particular URL of another web application with GET parameters that perform som action in that web application only if the user/victim is logged in there. By adding the image, the attacker ensures the user’s browser will make a request to the other web application and if the user is logged in there - he will carry out that action.</p>
<h2 id="XSS">XSS</h2><p>XSS is a code injection attack in which a malicious user manages to execute malicious JavaScript on the browser of another user. The malicious attacker does not aim to target a specific user but he exploits vulnerability present in a specific website and all potential users of that website could be his victims as the malicious JavaScript code is treated as a legitimate part of that website.</p>
<h3 id="Persistent_XSS">Persistent XSS</h3><p>Persistent XSS occurs when the attacker manages to persist his malicious JavaScript code in the server. This usually means that he uses one of the website’s forms to add malicious input to the website’s database. Once another user arrives on a page that retrieves the input of the attacker from the database and shows it - the user’s browser executes that code and he potentially becomes a victim. Below is a chart illustrating a sample Persistent XSS attack.</p>
<p>When the victim is redirected to the attacker’s website, the attacker’s website can save the cookie of the user and use it to gain access to his account with methods such as session hijacking.<br><br></p>
<h3 id="Reflected_XSS">Reflected XSS</h3><p>Reflected XSS is a type of XSS that does not necessarily involve persistence (database). The attacker sends a specially crafted URL in some website in a social media, other website, email, or in another way and once the user opens that link the vulnerable website executes additional malicious JavaScript along with the legitimate one. Below is a graphic illustrating how Reflected XSS works.</p>
<p>You can see the difference here is that only users who know about and open the malicious URL will become victims. No person would be able to be targeted by the attacker by just browsing through the website as usual. Reflected XSS can be carried out for XSS vulnerabilities originating when dealing with POST requests as well - in that case the attacker would have to add a form which will make a request to a third-party website and exploit its susceptibility to the vulnerability.</p>
<p>In persistent XSS, the attacker usually do not know who will catch the bait whereas in Reflected XSS the attacker can both throw baits to the general public (by posting the crafted URL on popular public websites) or target specific people by sending the links just to them so it is good to know with which case you are dealing with to find out the attacker’s goals.<br><br></p>
<h3 id="DOM-Based_XSS">DOM-Based XSS</h3><p>DOM-based XSS differs from Reflected and Persister XSS because the malicious JavaScript code does not actually come from some persistent storage and it does not execute as the page loads. Rather, the page loads and then vulnerability in the targeted website’s JavaScript logic executes the malicious JavaScript code that opens possibilities for new vectors of attacks.</p>
<p>This means that not only the back-end of your applications should be controlled for XSS vulnerabilities (unsanitized input) but also your front-end logic, your application’s JavaScript code, if you plan on working with user input there.</p>
<h2 id="Web_Parameter_Tampering">Web Parameter Tampering</h2><p>This attack takes advantage of the possibility to tamper directly with the DOM in your browser. If you use user input to produce a particular action when you should be getting that data from the back-end/database malicious users can tamper with your business logic.</p>
<p>You can press F12, click on Inspect Element or open your browser’s developer tools in another way, which would look something similar to the picture below. In it, you can change any element - even inputs and hidden inputs which will be sent to the back-end with the modified value if you change them and submit a form on a wesite.</p>
<h2 id="SQL_Injection">SQL Injection</h2><p>pass ……</p>
<h2 id="Denial_of_Service">Denial of Service</h2><h3 id="Programming_Vulnerabilities">Programming Vulnerabilities</h3><p>Denial of Service (known as DoS) is attack in which the attackers are attempting to overload the server so that the resource (website) is no accessible to the legitimate users. There are many ways to do it - you can launch an enormous amount of requests for the website/resource, you can exploit a programming flaw that will eat up the server’s resources amongst other methods.</p>
<p>One common way to make the website is unavailable is abuse user input used in loop counters. If you know the application is using your input as a counter in a loop to show you some repeated output you can give it a large value and the server will be busy processing your request rather than serving other users.<br><br></p>
<h3 id="DoS_against_customer_accounts">DoS against customer accounts</h3><p>Another way to cause a denial of service is to launch multiple login attempts for different accounts. Most websites lock the account for a specific period if there are too many login attempts and this can cause DoS for real customers. This problem is exacerbated when the login system does not have a APTCHA to combat automatic requests and when the user accounts are predictable (when the users do not choose their username but are assigned a username from the server). Besides implementing a CAPTCHA and allowing users to name their accounts you can enforce an IP ban address and the user from another - the user would still be able to log in. There is a balance that has to be achieved between security and the ease of doing business when considering which of the 3 security measures to implement that depends on the circumstances surrounding the application.<br><br></p>
<h3 id="ReDoS_(Regular_Expression_Denial_of_Service)">ReDoS (Regular Expression Denial of Service)</h3><p>Regular expressions help us validate, escape and parse inputs throughout our applications. They are tuned up pretty well in terms of performance but there are certain types of regular expression known as “Evil Regexes” which can eat up the server’s computation times when the input’s length increases which makes them very effective for DoS attacks. Evil regexes make it possible for the application’s logic to be stuck on specially crafted input and that is why they are called evil. A regex is considered evil if it contains a grouping with repetition which itself contains another repetition of/and overlapping alternation.</p>
<p>Some of the ways to protect against ReDoS attacks are to maintain regex hygience, avoid nesting repetitions within other repetitions and control the user input. If you have an evil regex - add a maximum length for the user input and ensure to check the input with the regex only if it is within a certain allowed length limit. There are some and they end up used against you: <a href="http://stackoverflow.com/questions/12841970/how-can-i-recognize-an-evil-regex" target="_blank" rel="external">http://stackoverflow.com/questions/12841970/how-can-i-recognize-an-evil-regex</a>.</p>
<h2 id="Man-in-the-middle_attack_(MITM)">Man-in-the-middle attack (MITM)</h2><p>There are many sites out there whose client credentitals are vulnerable when it comes to man-in-the-middle attacks. When connected to a public Wi-Fi, there could easily be someone at that restaurant sniffting the incoming traffic. Here is a sample using Wireshark.</p>
<p>Thus, you should always protect your users by encrypting their client-server communication (using HTTPS).</p>
<h2 id="Session_Hijacking">Session Hijacking</h2><p>If an attacker manages to gain access to the cookie containing your session identifier in a particular website through another attack such as XSS or the one we just discussed (MITM) he could log in the sense that it does not apply any of the defense machanisms mentioned below (such as performing secondary checks to establish the user’s identify through his IP address or another secondary identifier), the attacker could just submit a HTTP request to the website with a fake session cookie that has your session identifier in the cookie’s value and appear logged in as yourself.</p>
<h2 id="Execution_After_Redirect_(EAR)">Execution After Redirect (EAR)</h2><p>If you have a script, which checks if the user is logged in, redirects him to the login page if he is not. It is possible that your application is vulnerable to EAR attacks. This occurs when the attacker ignores your redirects and gets the output that follows the redirect. If you rely on the redirect and execute application logic after it, your users could ignore the redirect with a tool such as Burp Proxy and see the content that is supposed to be only for authorized users - such as sensitive documents.</p>
<p>To combat this, you would have to stop your application from processing any further code after the redirect has been initiated.</p>
<h2 id="Content_Spoofing">Content Spoofing</h2><p>Content Spoofing is closely tied to XSS. Attackers use content spooling when they exploit an injection vulnerability to add seemingly legitimate content on the page while the content usually originates from some input like a GET parameter. When the input is being escaped and XSS is prevented, content spoofing is still possible but in the form of text, (attackers could inject malicious text in a parameter and send the URL to unknowing users so that the users can take wrong decisions).</p>
<p>If your system accepts a GET parameter called error which serves to hold an error message that will be shown in the UI then a malicious person can start sending out links with a crafted value of the error parameter. If your business is a bank, he could change the error message to say that the Bank is bankrupting then this will be shown in the UI so users will possibly believe this and start attempting to withdraw all their cash.</p>
<p>If you are a penetration tester, you ought to be looking for such GET parameters and if you are developing the website, you should be looking for ways to make them as harmless as possible.</p>
<h2 id="Information_Leakage">Information Leakage</h2><p>Information Leakage can take place when the application you are examining or creating shows to users’ sensitive data like the technical details of the web application, data about its users or its environment. This data can be utilized by attackers targeting it in order to ease them in compromising the application even further.</p>
<p>A common mistake here that developers make is to put a web application on a live hosting while their application is essentially in development mode instead of production mode and potentially too much information in that way.</p>
<h2 id="Authentication_vulnerabilities_and_flaws">Authentication vulnerabilities and flaws</h2><p>It can be detrimental for the application you are examining or developing and its users if you do not enforce some minimum length on your user’s passwords. If you do not take any measures, they could just create accounts with empty passwords and you can obviously spot the problems associated with this action. It makes brute-forcing a piece of cake as usernames are either public or easily guessable.</p>
<p>There are different implementations as to what the minimum password length should be. This varies per site but 6, 8 or 12 minimum characters are used most commonly.</p>
<h2 id="Input_Validation_Flaws">Input Validation Flaws</h2><h3 id="Regexes_that_are_too_allowing">Regexes that are too allowing</h3><p>A common mistake when validating input is to produce a regex which matches valid input but also allows invalid one and do not notice it. This would attackers to insert malicious or arbitrary input and make problems within your web application.<br><br></p>
<h3 id="Client-side_validation">Client-side validation</h3><p>If you are validating the user’s input within the client and not within the back-end, because you expect the input is already valid then you are on a very wrong road. Input validation in the client-side can be easily bypassed. For example, users can just remove HTML5 validation attributes from their browser or remove JavaScript code from the page (Google Chrome). Alternatively, they can disable JavaScript at all or use a user agent that is not a real browser (like the command-line cURL we have been using throughout the book).<br><br></p>
<h3 id="Buffer_overflows">Buffer overflows</h3><p>You should always check the length of the incoming input and stop processing it if you find a suspicious size for an input. In fact, you would not be expecting megabytes in characters for a single surname, would you? PHP can deal with some vulnerable to buffer overflows external programs or have vulneralbe extensions in the language itself. In fact, such vulnerablities get fixed periodically and new ones are found regularly. A buffer is just a region of the physical memory storage that is utilized to store data temporarily until it is moved from one spot to another. A buffer overflow occurs when there is an anomaly where the application overruns the buffer’s boundary and starts overwriting the adjacent memory locations. If a buffer overflow attack is successful, it could allow the attacker to execute arbitrary code on the machine and possibly take over your server.</p>
<h2 id="Error_handling_vulnerabilities_and_flaws">Error handling vulnerabilities and flaws</h2><h3 id="Retruning_within_a_finally_block">Retruning within a finally block</h3><p>pass<br><br></p>
<h3 id="Lack_of_error_handling">Lack of error handling</h3><p>Web application should create default views/pages for 404 (File not found), 500 (Internal server error) and other errors/HTTP status codes. Besides boosting the UX it is good security practice because otherwise the application’s container might reveal the stack trace which could pinpoint sensitive information such as the version for that container, information about the used database and so on. For example, if you are using ASP.NET you must define a custom error page because the default framework that is going to be rendered displays the stack trace and other information that is prone to information leakage. If that information about your server, dependencies and database is leaked then an attacker can simply search online for vulnerabilities known for that version of software and launch a successful attack.</p>
<h2 id="Cryptographic_vulnerabilities">Cryptographic vulnerabilities</h2><h3 id="Weak_or_home-grown_algorithms">Weak or home-grown algorithms</h3><p>A common mistake developers make is to use weak or flawed encrypion/hashing algorithms. For example, many developers use md5 or sha1 as their hashing algorithm of choice. Using a md5-signed SSL certificate is not a good idea as it is vulnerable to numerous attacks such as collision attack through which attackers can create a rogue CA (certificate authority) that could be trusted by some common browsers. Luckily, md5-signed SSL certificates are disappearing from the horizon.</p>
<p>If you absolutely want to use md5 for sensitive data such as passwords do not do it without a proper unique salt for each password. There exist many websites offering free lookup of md5 and sha1 hashes in large rainbow tables. Rainbow tables are just that - tables which contain the plaintext string and the hashed variation of that string. Let us take one of the existing websites with rainbow tables: hashkiller.co.uk. The website claims it has 43.745 billion decrypted md5 and sha1 hashes in its database. If you do not use a salt (a random string usually prepended to the password), it is highly likely that many of your user’s passwords are in that database and if someone gets access to your database’s contents - he could get their password’s plaintext variation and log in as any user he wants.<br><br></p>
<h3 id="Insufficient_randomness">Insufficient randomness</h3><p>Functions exposing random generators in PHP such as rand($min, $max) and mt_rand($min, $max) should not be used for cryptographic purposes such as cryptographic keys as they are just not random enough. However, if you just want to display a random popup, search result, page or something like that which is not related to cryptography you should feel free to go ahead and use those random generators. For cryptographic purposes, it would be better to rely on the OS native random generator (such as the /dev/urandom on a Linux machine and the crypto-api on a Windows machine) or a third-party library.<br><br></p>
<h3 id="Other_cryptographic_issues">Other cryptographic issues</h3><p>Many of the vulnerabilities we discussed within the context of authentication can also be found when dealing with cryptography. It is not a good idea to hardcode in the code or in a configuration file your cryptographic keys, nor is it a good idea to allow too long key aging, store the key in plaintext or put it unencrypted in transit. As we discussed just a few lines above, it is not a good to use random generators with insufficient randomness or use too short cryptographic keys or use weak algorithms.</p>
<h2 id="General_Security">General Security</h2><h3 id="HTTPOnly_cookies">HTTPOnly cookies</h3><p>pass</p>
<h2 id="Further_Reading">Further Reading</h2><ul>
<li><a href="http://resources.infosecinstitute.com/n00bz-ctf-challenge-2-practical-website-hacking/" target="_blank" rel="external">http://resources.infosecinstitute.com/n00bz-ctf-challenge-2-practical-website-hacking/</a></li>
<li><a href="http://resources.infosecinstitute.com/mini-course/security-plus-performance-based-questions/" target="_blank" rel="external">resources.infosecinstitute.com/mini-course/security-plus-performance-based-questions/</a></li>
<li><a href="http://resources.infosecinstitute.com/" target="_blank" rel="external">http://resources.infosecinstitute.com/</a></li>
<li><a href="http://www.infosecinstitute.com/courses/ethical_hacking_training.html" target="_blank" rel="external">http://www.infosecinstitute.com/courses/ethical_hacking_training.html</a></li>
<li><a href="http://www.eccouncil.org" target="_blank" rel="external">www.eccouncil.org</a></li>
</ul>
<h2 id="原文地址">原文地址</h2><p>原文地址: <a href="https://github.com/tudouya/blogSource/blob/master/attach/Web-Vulnerabilities-Explained.zip" target="_blank" rel="external">https://github.com/tudouya/blogSource/blob/master/attach/Web-Vulnerabilities-Explained.zip</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Information_Gathering">Information Gathering</h2><p>There are many places where you can start gathering information about your targe]]>
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP中几种加密算法]]></title>
    <link href="http://yoursite.com/2015/10/22/PHP%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2015/10/22/PHP中几种加密算法/</id>
    <published>2015-10-22T03:33:46.000Z</published>
    <updated>2015-10-27T17:05:34.000Z</updated>
    <content type="html"><![CDATA[<p>对于网站的登录验证 token 以及 app 的传输的，加密是其安全不可或缺的部分。下面是对 PHP 的几种常见加密方式作下简介。</p>
<h3 id="MD5()_加密">MD5() 加密</h3><p>函数使用 RSA 数据安全，算法为单向加密不可逆不能解密，网上的 MD5 解密是一定几率撞碰出来的。MD5() 生成16位报文摘要（乱码没搞明白）和32位的算法如下：</p>
<pre><code><span class="comment">// 生成 32 位</span>
<span class="function">echo <span class="title">md5</span><span class="params">(<span class="string">'woolong'</span>, <span class="keyword">false</span>)</span></span>; <span class="comment">// ps: 不加参数 false 也可以，默认为 false </span>
    ------&gt; <span class="number">82</span>ee8b1f012bc0258c00c13b42ab5452
<span class="comment">// 生成 16 位</span>
<span class="function">echo <span class="title">md5</span><span class="params">(<span class="string">'woolong'</span>, <span class="keyword">true</span>)</span></span>; <span class="comment">// ps: 乱码没看明白</span>
    ------&gt; ゐ�+ﾀ%�ﾁ;BｫTR
</code></pre><h3 id="Crypt()_加密">Crypt() 加密</h3><p>将字符串用 UNIX 的标准加密 DES 模块加密。这是单向的加密函数，无法解密。语法格式：　crypt(str,salt);</p>
<pre><code>第一种方式：
crypt(<span class="string">'woolong'</span>); <span class="regexp">//</span> 不加盐值，每次刷新都会变。
    -----&gt; <span class="variable">$1</span><span class="variable">$0jvrmTvG</span><span class="variable">$UHwpKRa54q</span>/<span class="constant">CSw2sC25u4.</span> <span class="comment">## ps: 第二个$到第三个$之间的字符是PHP生成的8位盐值，每次刷新都会变。</span>
crypt(<span class="string">'woolong'</span>, <span class="string">'1234'</span>); <span class="regexp">//</span>加盐值，每次刷新不会变，生成<span class="number">12</span>位加密串
    -----&gt; <span class="number">12</span>rVj5JueNQcE  <span class="comment">## ps: 这种写法的盐值最多四位，大于四位会截取前四位作为盐值。</span>
crypt(<span class="string">'woolong'</span>, <span class="string">'$1$12345678$'</span>); <span class="regexp">//</span>加盐值，每次刷新不会变，生成<span class="number">22</span>位加密串
    -----&gt; <span class="variable">$1</span><span class="variable">$12345678</span><span class="variable">$ELt3kF3kOkIQ2YHEW8JfV0</span> <span class="comment">## ps: 这种写法的盐值最多八位，大于八位会截取前八位作为盐值。</span>
</code></pre><h3 id="Sha1()_加密">Sha1() 加密</h3><p>跟 MD5 加密算法很像， 但是 sha1() 默认情况下返回40个字符串，用法个 MD5() 一样。</p>
<pre><code>sha1(<span class="string">'woolong'</span>, <span class="keyword">false</span>); <span class="regexp">//</span> <span class="symbol">ps:</span> 不加参数 <span class="keyword">false</span> 也可以，默认为 <span class="keyword">false</span>
    -------&gt; <span class="number">1</span>c3100b510f2c82a23b1bfafdf63faa6902eeb3f
sha1(<span class="string">'woolong'</span>, <span class="keyword">true</span>); <span class="regexp">//</span> ps 乱码没懂
    -------&gt; <span class="number">1</span>�蛉*<span class="comment">#笨c�.�?</span>
</code></pre><h3 id="URL_编码加密">URL 编码加密</h3><p>主要是对 URL 加密，这是双向加密，urlencode() 加密， urldecode() 解密。</p>
<pre><code>urlencode('http<span class="envvar">%3A%</span><span class="number">2</span>F<span class="envvar">%2Fphping.net%</span><span class="number">2</span>F2015<span class="envvar">%2F10%</span><span class="number">2</span>F13<span class="envvar">%2FGit%</span>E6<span class="envvar">%98%</span>BE<span class="envvar">%E7%</span>A4<span class="envvar">%BA%</span>E6<span class="envvar">%BC%</span><span class="number">82</span><span class="envvar">%E4%</span>BA<span class="envvar">%AE%</span>E6<span class="envvar">%97%</span>A5<span class="envvar">%E5%</span>BF<span class="envvar">%97%</span>E7<span class="envvar">%9A%</span><span class="number">84</span><span class="envvar">%E5%</span>B0<span class="envvar">%8F%</span>E6<span class="envvar">%8A%</span><span class="number">80</span><span class="envvar">%E5%</span>B7<span class="envvar">%A7%</span><span class="number">2</span>F');
urldecode('http://phping.<span class="winutils">net</span>/<span class="number">2015</span>/<span class="number">10</span>/<span class="number">13</span>/Git显示漂亮日志的小技巧/');
</code></pre><h3 id="Base64_编码加密">Base64 编码加密</h3><p>双向加密，base64_encode() 加密，base64_decode()解密。</p>
<pre><code>base64_encode<span class="list">('双向加密，base64_encode<span class="list">()</span> 加密，base64_decode<span class="list">()</span>解密。--woolong')</span><span class="comment">;</span>
base64_decode<span class="list">('<span class="number">5</span>Y+M5ZCR5Yqg5a+G77yMYmFzZTY0X2VuY29kZSgpIOWKoOWvhu+8jGJhc2U2NF9kZWNvZGUoKeino+WvhuOAgi0td29vbG9uZw==')</span><span class="comment">;</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>对于网站的登录验证 token 以及 app 的传输的，加密是其安全不可或缺的部分。下面是对 PHP 的几种常见加密方式作下简介。</p>
<h3 id="MD5()_加密">MD5() 加密</h3><p>函数使用 RSA 数据安全，算法为单向加密不可逆不能解密，网上的 ]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="加密" scheme="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git显示漂亮日志的小技巧]]></title>
    <link href="http://yoursite.com/2015/10/13/Git%E6%98%BE%E7%A4%BA%E6%BC%82%E4%BA%AE%E6%97%A5%E5%BF%97%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2015/10/13/Git显示漂亮日志的小技巧/</id>
    <published>2015-10-13T02:54:06.000Z</published>
    <updated>2015-10-27T17:05:21.000Z</updated>
    <content type="html"><![CDATA[<p>Git的传统log如下所示，你喜欢吗？</p>
<p><img src="/images/201510/git.log01.png" alt="git_log01"></p>
<p>看看下面这个你喜欢不喜欢？</p>
<p><img src="/images/201510/git.log02.png" alt="git_log2"></p>
<p>要做到这样，命令行如下：</p>
<pre><code>git <span class="keyword">log</span> --<span class="keyword">graph</span> --pretty=<span class="keyword">format</span>:'%Cred%<span class="keyword">h</span>%Creset -%C(yellow)%<span class="keyword">d</span>%Creset %s <span class="label">$Cgreen</span>(%cr) %C(bold blue)&lt;%<span class="keyword">an</span>&gt;%Creset' --abbrev-commit --
</code></pre><p>这样有点长了，我们可以这样：</p>
<pre><code>git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'<span class="variable">%Cred</span><span class="variable">%h</span><span class="variable">%Creset</span> -<span class="variable">%C</span>(yellow)<span class="variable">%d</span><span class="variable">%Creset</span> <span class="variable">%s</span> <span class="variable">%Cgreen</span>(<span class="variable">%cr</span>) <span class="variable">%C</span>(bold blue)&lt;<span class="variable">%an</span>&gt;<span class="variable">%Creset</span>' --abbrev-commit --"</span>
</code></pre><p>然后，我们以后就可以使用这样的短命令了： </p>
<pre><code><span class="title">git</span> lg
</code></pre><p>如果你想看看 git log -pretty=format 的参数，你可以看看<a href="http://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2" target="_blank" rel="external">这篇文章</a></p>
<blockquote>
<p>ps:来自 <a href="http://coolshell.cn/articles/7755.html" target="_blank" rel="external">http://coolshell.cn/articles/7755.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git的传统log如下所示，你喜欢吗？</p>
<p><img src="/images/201510/git.log01.png" alt="git_log01"></p>
<p>看看下面这个你喜欢不喜欢？</p>
<p><img src="/images/201510/]]>
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="log" scheme="http://yoursite.com/tags/log/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySql性能优化的最佳20+条经验]]></title>
    <link href="http://yoursite.com/2015/10/10/MySql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%9C%80%E4%BD%B320-%E6%9D%A1%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/2015/10/10/MySql性能优化的最佳20-条经验/</id>
    <published>2015-10-09T17:53:26.000Z</published>
    <updated>2015-10-27T17:05:12.000Z</updated>
    <content type="html"><![CDATA[<p>今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们不会讲过多的SQL语句的优化，而只是针对MySQL这一Web应用最多的数据库。希望下面的这些优化技巧对你有用。</p>
<h3 id="1-_为查询缓存优化你的查询">1. 为查询缓存优化你的查询</h3><p>大多数的 MySQL 服务器都开启了查询缓存。这是提高性能最有效的方法之一，而且这是被 MySQL 的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。</p>
<p>这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让 MySQL 不使用缓存。请看下面的例子：</p>
<pre><code>// 不使用查询缓存
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT id FROM user WHERE dateline &gt;= CURDATE()"</span>);

// 使用查询缓存
<span class="variable">$time</span> = date(<span class="string">"Y-m-d"</span>);
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT id FROM user WHERE dateline &gt;= '$time'"</span>);
</code></pre><h3 id="2-_EXPLAIN_你的_SELECT_查询">2. EXPLAIN 你的 SELECT 查询</h3><p>使用 <a href="http://dev.mysql.com/doc/refman/5.0/en/explain.html" target="_blank" rel="external">EXPLAIN</a> 关键字可以让你知道 MySQL 是如何处理你的 SQL 语句的。这可以帮你i分析你的查询语句或是表结构的性能瓶颈。</p>
<p>EXPLAIN 的查询结果还会告诉你你的索引主键被如何利用的，你的数据表是如何被搜索和排序的…等等。</p>
<p>挑一个你的 SELECT 语句（推荐选最复杂的，有多表连接的），把关键字 EXPLAIN 加到前面。你可以使用 phpmyadmin 来做这个事。然后，你会看到一张表格。下面的这个示例中，我们忘记加上了 group_id 索引，并且有表连接：</p>
<p><img src="/images/201509/unoptimized_explain.jpg" alt="explain"></p>
<p>当我们为 group_id 字段加上索引后：</p>
<p><img src="/images/201509/optimized_explain.jpg" alt="explain"></p>
<p>我们可以看到，前一个结果显示了 7883 行，而后一个只是搜索了两个表的 9 和 16 行。查看 rows 列可以让我们找到潜在的性能问题。</p>
<h3 id="3-_当只要一行数据时使用_LIMIT_1">3. 当只要一行数据时使用 LIMIT 1</h3><p>当你查询表的时候，你已经知道结果智慧有一条结果，但因为你可能需要去 fetch 游标，或是你也许会去检查返回的记录数。</p>
<p>在这种情况下，加上 LIMIT 1 可以增加性能。这样 MySQL 数据库引擎会在找到一条数据后停止搜索，而不是继续往后查下一条符合记录的数据。</p>
<p>下面的示例只是为了找一下是否有“中国”的用户，很明显，后面的会比前面的更有效率。（请注意，第一条中是 SELECT *，第二条是 SELECT 1）</p>
<pre><code>// 没有效率的：
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT * FROM user WHERE country = 'China'"</span>);
<span class="keyword">if</span> (mysql_num_rows(<span class="variable">$r</span>) &gt; <span class="number">0</span>) {
    // ...
}

// 有效率的：
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT 1 FROM user WHERE country = 'China' LIMIT 1"</span>);
<span class="keyword">if</span> (mysql_num_rows(<span class="variable">$r</span>) &gt; <span class="number">0</span>) {
    // ...
}
</code></pre><h3 id="4-_为搜索字段建索引">4. 为搜索字段建索引</h3><p>索引并不一定就是给主键或是唯一的字段。如果在你的表中有某个字段你总经常用来做搜索，那么请为它建立索引吧。</p>
<p><img src="/images/201509/search_index.jpg" alt="search"></p>
<p>从上图你可以看到那个搜索字串 “last_name_LIKE ‘a%’”，一个是建了索引，一个是没有建索引，性能差了 4 倍左右。 </p>
<p>另外，你应该也知道什么样的搜索是不能使用正常索引的。例如，当你需要在一篇大的文章中搜索一个词时，如：“WHERE post_content LIKE ‘%apple%’”，索引可能是没有意义的。你可能需要使用 <a href="http://dev.mysql.com/doc/refman/5.1/en/fulltext-search.html" target="_blank" rel="external">MySQL 全文索引</a> 或是自己做一个索引（比如说：搜索关键词或是 Tag 什么的）。</p>
<h3 id="5-_在_JOIN_表的时候使用同样类型的例，并将其索引">5. 在 JOIN 表的时候使用同样类型的例，并将其索引</h3><p>如果你的应用程序有很多 JOIN 查询，你应该确认两个表中 JOIN 的字段是被建过索引的。这样 MySQL 内部会启动为你优化 JOIN 的 SQL 语句的机制。</p>
<p>而且，这些被用来 JOIN 的字段，应该是相同类型的。例如：如果你要把 DECIMAL 字段和一个 INT 字段 JOIN 在一起，MySQL 就无法使用它们的索引。对于那些 STRING 类型，还需要有相同的字符集才行。（两个表的字符集有可能不一样）</p>
<pre><code>// 在<span class="keyword">state</span>中查找company
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT company_name FROM users LEFT JOIN companies ON (users.state = companies.state) WHERE users.id = $user_id"</span>);
// 两个 <span class="keyword">state</span> 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。
</code></pre><h3 id="6-_千万不要_OEDER_BY_RAND()">6. 千万不要 OEDER BY RAND()</h3><p>想打乱返回的数据行？随机挑一个数据？真不知道谁发明了这种用法，但很多新手很喜欢这样用。但你却不了解这样做有多么可怕的性能问题。</p>
<p>如果你真的想把返回的数据行打乱了，你有 N 种方法可以达到这个目的。这样使用只能让你的数据库的性能呈指数级下降。这里的问题是：MySQL 会不得不去执行 RAND() 函数（很耗 CPU 时间），而且这是为每一行记录去记行，然后再对其排序。就算是你用了 LIMIT 1 也无济于事（因为要排序）。</p>
<p>下面的示例是随机挑一条记录</p>
<pre><code>// 千万不要这样做：
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT username FROM user ORDER BY RAND() LIMIT 1"</span>);

// 这要会更好：
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT count(*) FROM user"</span>);
<span class="variable">$d</span> = mysql_fetch_row(<span class="variable">$r</span>);
<span class="variable">$rand</span> = mt_rand(<span class="number">0</span>,<span class="variable">$d</span>[<span class="number">0</span>] - <span class="number">1</span>);
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT username FROM user LIMIT $rand, 1"</span>);
</code></pre><h3 id="7-_避免_SELECT_*">7. 避免 SELECT *</h3><p>从数据库里读出越多的数据，那么查询就会变得越慢。并且，如果你的数据库服务器和 WEB 服务器是两台独立的服务器的话，这还会增加网络传输的负载。</p>
<p>所以，你应该养成一个需要什么就取什么的好的习惯。</p>
<pre><code>// 不推荐
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT * FROM user WHERE user_id = 1"</span>);
<span class="variable">$d</span> = mysql_fetch_assoc(<span class="variable">$r</span>);
echo <span class="string">"Welcome {$d['username']}"</span>;

// 推荐
<span class="variable">$r</span> = mysql_query(<span class="string">"SELECT username FROM user WHERE user_id = 1"</span>);
<span class="variable">$d</span> = mysql_fetch_assoc(<span class="variable">$r</span>);
echo <span class="string">"Welcome {$d['username']}"</span>;
</code></pre><h3 id="8-_永远为每张表设置一个_ID">8. 永远为每张表设置一个 ID</h3><p>我们应该为数据库里的每张表都设置一个 ID 做为其主键，而且最好的是一个 INT 型的（推荐使用 UNSIGNED ），并设置上自动增加的 AUTO_INCREMENT 标志。</p>
<p>就算是你 users 表有一个主键叫 “ email ”的字段，你也别让它成为主键。使用 VARCHAR 类型来当主键会使性能下降。另外，在你的程序中，你应该使用表的 ID 来构造你的数据结构。</p>
<p>而且，在 MySQL 数据引擎下，还有一些操作需要使用主键，在这些情况下，主键的性能和设置变得非常重要，比如，集群，分区……</p>
<p>在这里，只有一个情况是例外，那就是“关联表”的“外键”，也就是说，这个表的主键，通过若干个别的表主键构成。我们把这个情况叫做“外键”。比如：有一个“学生表”有学生的 ID，有一个“课程表”有课程 ID，那么，“成绩表”就是“关联表”了，其关联了学生表和课程表，在成绩表中，学生 ID 和课程 ID 叫“外键”其共同组成主键。</p>
<h3 id="9-_使用_ENUM_而不是_VARCHAR">9. 使用 ENUM 而不是 VARCHAR</h3><p><a href="http://dev.mysql.com/doc/refman/5.0/en/enum.html" target="_blank" rel="external">ENUM</a> 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。</p>
<p>如果你有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，你知道这些字段的取值是有限而且固定的，那么，你应该使用 ENUM 而不是 VARCHAR。</p>
<p>MySQL 也有一个“建议”（见第十条）告诉你怎么去重新组织你的表结构。当你有一个 VARCHAR 字段时，这个建议会告诉你把其改成 ENUM 类型。使用 PROCEDURE ANALYSE() 你可以得到相关的建议。</p>
<h3 id="10-_从_PROCEDURE_ANALYSE()_取得建议">10. 从 PROCEDURE ANALYSE() 取得建议</h3><p><a href="http://dev.mysql.com/doc/refman/5.0/en/procedure-analyse.html" target="_blank" rel="external">PROCEDURE ANALYSE()</a> 会让 MySQL 帮你去分析你的字段和其实际的数据，并会给你一些有用的建议。只有表中有实际的数据，这些建议才会变得有用，因为要做一些大的决定是需要有数据作为基础的。</p>
<p>例如，如果你创建了一个 INT 字段作为你的主键，然而并没有太多的数据，那么，PROCEDURE ANALYSE() 会建议你把这个字段的类型改成 MEDIUMINT 。或是你使用了一个 VARCHAR 字段，因为数据不多，你可能会得到一个让你把它改成 ENUM 的建议。这些建议，都是可能因为数据不够多，所以决策做得就不够准。</p>
<p>在 phpmyadmin 里，你可以在查看表时，点击 “ Propose table structure ” 来查看这些建议</p>
<p><img src="/images/201509/suggestions.jpg" alt="procedure"></p>
<p>一定要注意，这些只是建议，只有当你的表里的数据越来越多时，这些建议才会变得准确。一定要记住，你才是最终做决定的人。</p>
<h3 id="11-_尽可能的使用_NOT_NULL">11. 尽可能的使用 NOT NULL</h3><p>除非你有一个很特别的原因去使用 NULL 值，否则你应该总是让你的字段保持 NOT NULL。这看起来好像有点争议，请往下看。</p>
<p>首先，问问你自己“ Empty ”和“ NULL ”有多大的区别（如果是 INT，那就是 0 和 NULL ）？如果你觉得它们之间没有什么区别，那么你就不要使用 NULL。（你知道吗？在 Oracle 里，NULL 和 Empty 的字符串是一样的！)</p>
<p>不要以为 NULL 不需要空间，其需要额外的空间，并且，在你进行比较的时候，你的程序会更复杂。 当然，这里并不是说你就不能使用 NULL 了，现实情况是很复杂的，依然会有些情况下，你需要使用 NULL 值。</p>
<p>下面摘自 MySQL 自己的文档：</p>
<pre><code>“ <span class="constant">NULL</span> columns <span class="built_in">require</span> additional <span class="constant">space</span> <span class="operator">in</span> <span class="operator">the</span> row <span class="built_in">to</span> record whether their values are <span class="constant">NULL</span>. For MyISAM tables, <span class="keyword">each</span> <span class="constant">NULL</span> column takes <span class="constant">one</span> bit extra, rounded up <span class="built_in">to</span> <span class="operator">the</span> nearest <span class="keyword">byte</span>.”
</code></pre><h3 id="12-_Prepared_Statements">12. Prepared Statements</h3><p>Prepared Statements 很像存储过程，是一种运行在后台的 SQL 语句集合，我们可以从使用 prepared statements 获得很多好处，无论是性能问题还是安全问题。</p>
<p>Prepared Statements 可以检查一些你绑定好的变量，这样可以保护你的程序不会受到“ SQL 注入式”攻击。当然，你也可以手动地检查你的这些变量，然而，手动的检查容易出问题，而且很经常会被程序员忘了。当我们使用一些 framework 或是 ORM 的时候，这样的问题会好一些。</p>
<p>在性能方面，当一个相同的查询被使用多次的时候，这会为你带来可观的性能优势。你可以给这些 Prepared Statements 定义一些参数，而 MySQL 只会解析一次。</p>
<p>因为最新版本的 MySQL 在传输 Prepared Statements 是使用二进制形势，所以这会使得网络传输非常有效率。</p>
<p>当然，也有一些情况下，我们需要避免使用 Prepared Statements，因为其不支持查询缓存。但据说版本 5.1 后支持了。</p>
<p>在 PHP 中要使用 prepared statements ，你可以查看其使用手册：<a href="http://php.net/manual/en/book.mysqli.php" target="_blank" rel="external">mysqli</a> 扩展 或是使用数据库抽象层，如： <a href="http://us.php.net/manual/en/book.pdo.php" target="_blank" rel="external">PDO</a>.</p>
<pre><code>// 创建 prepared statement
<span class="keyword">if</span> (<span class="variable">$stmt</span> = <span class="variable">$mysqli-</span>&gt;prepare(<span class="string">"SELECT username FROM user WHERE state=?"</span>)) {
    // 绑定参数
    <span class="variable">$stmt-</span>&gt;bind_param(<span class="string">"s"</span>, <span class="variable">$state</span>);
    // 执行
    <span class="variable">$stmt-</span>&gt;execute();
    // 绑定结果
    <span class="variable">$stmt-</span>&gt;bind_result(<span class="variable">$username</span>);
    // 移动游标
    <span class="variable">$stmt-</span>&gt;fetch();
    printf(<span class="string">"%s is from %s\n"</span>, <span class="variable">$username</span>, <span class="variable">$state</span>);
    <span class="variable">$stmt-</span>&gt;close();
}
</code></pre><h3 id="13-_无缓冲的查询">13. 无缓冲的查询</h3><p>正常的情况下，当你在你的脚本中执行一个 SQL 语句的时候，你的程序会停在那里直到没这个 SQL 语句返回，然后你的程序再往下继续执行。你可以使用无缓冲查询来改变这个行为。</p>
<p>关于这个事情，在 PHP 的文档中有一个非常不错的说明： <a href="http://php.net/manual/en/function.mysql-unbuffered-query.php" target="_blank" rel="external">mysql_unbuffered_query()</a> 函数：</p>
<pre><code>“ mysql_unbuffered_query() sends the <span class="type">SQL</span> query query to <span class="type">MySQL</span> <span class="keyword">without</span> automatically fetching <span class="keyword">and</span> buffering the <span class="literal">result</span> rows <span class="keyword">as</span> mysql_query() does. <span class="type">This</span> saves a considerable amount <span class="keyword">of</span> memory <span class="keyword">with</span> <span class="type">SQL</span> queries that produce large <span class="literal">result</span> sets, <span class="keyword">and</span> you can start working on the <span class="literal">result</span> <span class="type">set</span> immediately after the first row has been retrieved <span class="keyword">as</span> you don’t have to wait until the complete <span class="type">SQL</span> query has been performed. ”
</code></pre><p>上面那句话翻译过来是说，mysql_unbuffered_query() 发送一个 SQL 语句到 MySQL 而并不像 mysql_query() 一样去自动 fethch 和缓存结果。这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句，并且，你不需要等到所有的结果都返回，只需要第一行数据返回的时候，你就可以开始马上开始工作于查询结果了。</p>
<p>然而，这会有一些限制。因为你要么把所有行都读走，或是你要在进行下一次的查询前调用 <a href="http://us2.php.net/manual/en/function.mysql-free-result.php" target="_blank" rel="external">mysql_free_result()</a> 清除结果。而且， <a href="http://us2.php.net/manual/en/function.mysql-num-rows.php" target="_blank" rel="external">mysql_num_rows()</a> 或 <a href="http://us2.php.net/manual/en/function.mysql-data-seek.php" target="_blank" rel="external">mysql_data_seek()</a> 将无法使用。所以，是否使用无缓冲的查询你需要仔细考虑。</p>
<h3 id="14-_把_IP_地址存成_UNSIGNED_INT">14. 把 IP 地址存成 UNSIGNED INT</h3><p>很多程序员都会创建一个 VARCHAR(15) 字段来存放字符串形式的 IP 而不是整型的 IP 。如果你用整型来存放，只需要4个字节，并且你可以有定长的字段。而且，这会为你带来查询上的优势，尤其是当你需要使用这样的 WHERE 条件：IP between ip1 and ip2。</p>
<p>我们必需要使用 UNSIGNED INT ，因为 IP 地址会使用整个 32 位的无符号整型。</p>
<p>而你的查询，你可以使用 <a href="http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton" target="_blank" rel="external">INET_ATON()</a> 来把一个字符串 IP 转成一个整形，并使用 <a href="http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-ntoa" target="_blank" rel="external">INET_NTOA()</a> 把一个整型转成一个字符串 IP 。在 PHP 中，也有这样的函数 <a href="http://php.net/manual/en/function.ip2long.php" target="_blank" rel="external">ip2long()</a> 和 <a href="http://us.php.net/manual/en/function.long2ip.php" target="_blank" rel="external">long2ip()</a>。</p>
<pre><code>$r = "<span class="operator"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> ip = <span class="keyword">INET_ATON</span>(<span class="string">'{$_SERVER['</span>REMOTE_ADDR<span class="string">']}'</span>) <span class="keyword">WHERE</span> user_id = $user_id<span class="string">";</span></span>
</code></pre><h3 id="15-_固定长度的表会更快">15. 固定长度的表会更快</h3><p>如果表中的所有字段都是“固定长度”的，整个表会被认为是 <a href="">“static”</a> 或 <a href="">“fixed-length”</a>。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要你包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</p>
<p>固定长度的表会提高性能，因为 MySQL 搜寻得会更快一些，因为这些固定的长度是很容易计算下一个数据的偏移量的，所以读取的自然也会很快。而如果字段不是定长的，那么，每一次要找下一条的话，需要程序找到主键。</p>
<p>并且，固定长度的表也更容易被缓存和重建。不过，唯一的副作用是，固定长度的字段会浪费一些空间，因为定长的字段无论你用不用，他都是要分配那么多的空间。</p>
<p>使用“垂直分割”技术（见下一条），你可以把表分割成两个：一个是定长的，一个则是不定长的。</p>
<h3 id="16-_垂直分割">16. 垂直分割</h3><p>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。（以前，在银行做过项目，见过一张表有 100 多个字段，很恐怖）</p>
<p>示例一：在 Users 表中有一个字段是家庭地址，这个字段是可选字段，相比起，而且你在数据库操作的时候除了个人信息外，你并不需要经常读取或是改写这个字段。那么，为什么不把他放到另外一张表中呢？ 这样会让你的表有更好的性能，大家想想是不是，大量的时候，我对于用户表来说，只有用户 ID ，用户名，口令，用户角色等会被经常使用。小一点的表总是会有好的性能。</p>
<p>示例二： 你有一个叫 “ last_login ” 的字段，它会在每次用户登录时被更新。但是，每次更新时会导致该表的查询缓存被清空。所以，你可以把这个字段放到另一个表中，这样就不会影响你对用户 ID ，用户名，用户角色的不停地读取了，因为查询缓存会帮你增加很多性能。</p>
<p>另外，你需要注意的是，这些被分出去的字段所形成的表，你不会经常性地去 JOIN 他们，不然的话，这样的性能会比不分割时还要差，而且，会是极数级的下降。</p>
<h3 id="17-_拆分大的_DELETE_或_INSERT_语句">17. 拆分大的 DELETE 或 INSERT 语句</h3><p>如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止响应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。</p>
<p>Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。</p>
<p>如果你把你的表锁上一段时间，比如 30 秒钟，那么对于一个有很高访问量的站点来说，这 30 秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你泊 WEB 服务 Crash ，还可能会让你的整台服务器马上掛了。</p>
<p>所以，如果你有一个大的处理，你定你一定把其拆分，使用 LIMIT 条件是一个好的方法。下面是一个示例：</p>
<pre><code><span class="keyword">while</span> (<span class="number">1</span>) {
    <span class="comment">//每次只做1000条</span>
    mysql_query(<span class="string">"DELETE FROM logs WHERE log_date &lt;= '2009-11-01' LIMIT 1000"</span>);
    <span class="keyword">if</span> (mysql_affected_rows() == <span class="number">0</span>) {
    <span class="comment">// 没得可删了，退出！</span>
    <span class="keyword">break</span>;
    }
    <span class="comment">// 每次都要休息一会儿</span>
    usleep(<span class="number">50000</span>);
}
</code></pre><h3 id="18-_越小的列会越快">18. 越小的列会越快</h3><p>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把你的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。</p>
<p>参看 MySQL 的文档 <a href="http://dev.mysql.com/doc/refman/5.0/en/storage-requirements.html" target="_blank" rel="external">Storage Requirements</a> 查看所有的数据类型。</p>
<p>如果一个表只有几列罢了（比如说字典表，配置表），那么，我们就没有理由使用 INT 来做主键，使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些。如果你不需要记录时间，使用 DATE 要比 DATETIME 好得多。</p>
<p>当然，你也需要留够足够的扩展空间，不然，你日后来干这个事，你会死的很难看，参看 <a href="http://slashdot.org/story/06/11/09/1534204/slashdot-posting-bug-infuriates-haggard-admins" target="_blank" rel="external">Slashdot</a> 的例子（ 2009 年 11 月 06 日），一个简单的 ALTER TABLE 语句花了 3 个多小时，因为里面有一千六百万条数据。</p>
<h3 id="19-_选择正确的存储引擎">19. 选择正确的存储引擎</h3><p>在 MySQL 中有两个存储引擎 MyISAM 和 InnoDB，每个引擎都有利有弊。酷壳以前文章<a href="http://coolshell.cn/articles/652.html" target="_blank" rel="external">《MySQL: InnoDB 还是 MyISAM?》</a>讨论和这个事情。</p>
<p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到写操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p>
<p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p>
<p>下面是MySQL的手册</p>
<ul>
<li><a href="http://dev.mysql.com/doc/refman/5.1/en/myisam-storage-engine.html" target="_blank" rel="external">target=”_blank”MyISAM Storage Engine</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.1/en/innodb.html" target="_blank" rel="external">InnoDB Storage Engine</a></li>
</ul>
<h3 id="20-_使用一个对象关系映射器（Object_Relational_Mapper）">20. 使用一个对象关系映射器（Object Relational Mapper）</h3><p>使用 ORM (Object Relational Mapper)，你能够获得可靠的性能增涨。一个 ORM 可以做的所有事情，也能被手动的编写出来。但是，这需要一个高级专家。</p>
<p>ORM 的最重要的是“ Lazy Loading ”，也就是说，只有在需要去取值的时候才会去真正的去做。但你也需要小心这种机制的副作用，因为这很有可能会因为要去创建很多很多小的查询反而会降低性能。</p>
<p>ORM 还可以把你的 SQL 语句打包成一个事务，这会比单独执行他们快得多得多。</p>
<p>目前，个人最喜欢 PHP 的 ORM 是：<a href="http://www.doctrine-project.org/" target="_blank" rel="external">Doctrine</a>。</p>
<h3 id="21-_小心“永久链接”">21. 小心“永久链接”</h3><p>“永久链接”的目的是用来减少重新创建 MySQL 链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。而且，自从我们的 Apache 开始重用它的子进程后——也就是说，下一次的 HTTP 请求会重用 Apache 的子进程，并重用相同的 MySQL 链接。</p>
<ul>
<li><a href="">PHP手册：mysql_pconnect()</a></li>
</ul>
<p>在理论上来说，这听起来非常的不错。但是从个人经验（也是大多数人的）上来说，这个功能制造出来的麻烦事更多。因为，你只有有限的链接数，内存问题，文件句柄数，等等。</p>
<p>而且，Apache 运行在极端并行的环境中，会创建很多很多的子进程。这就是为什么这种“永久链接”机制工作不好的原因。在你决定要使用“永久链接”之前，你需要好好地考虑一下你的整个系统的架构。</p>
<h3 id="22-_引用">22. 引用</h3><p><a href="http://coolshell.cn/articles/1846.html" target="_blank" rel="external">http://coolshell.cn/articles/1846.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们]]>
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP程序员的技术成长规划（转）]]></title>
    <link href="http://yoursite.com/2015/10/09/PHP%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2015/10/09/PHP程序员的技术成长规划/</id>
    <published>2015-10-08T17:29:02.000Z</published>
    <updated>2015-10-27T17:04:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>按照了解的很多PHP/LNMP程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段PHP程序员的技术要求，来帮助很多PHP程序做对照设定学习成长目标。<br>本文按照目前主流技术做了一个基本的梳理，整个是假设PHP程序员不是基础非常扎实的情况进行的设定，并且所有设定都非常具体明确清晰，可能会让人觉得不适，请理解仅代表一家之言。（未来技术变化不在讨论范围）</p>
<h3 id="第一阶段：基础阶段">第一阶段：基础阶段</h3><p>重点：把LNMP搞熟练（核心是安装配置基本操作）<br>目标：能够完成基本的LNMP系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在PHP中型系统中支持某个PHP功能模块的开发。<br>时间：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。</p>
<h4 id="Linux">Linux</h4><p>基本命令、操作、启动、基本服务配置（包括rpm安装文件，各种服务配置等）；会写简单的shell脚本和awk/sed 脚本命令等。</p>
<h4 id="Nginx">Nginx</h4><p>做到能够安装配置nginx+php，知道基本的nginx核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让nginx+php_fpm顺利工作。</p>
<h4 id="MySQL">MySQL</h4><p>会自己搭建mysql，知道基本的mysql配置选项；知道innodb和myisam的区别，知道针对InnoDB和MyISAM两个引擎的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个MySQL数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的MySQL数据库。</p>
<h4 id="PHP">PHP</h4><p>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk图片处理等等；熟悉各种跟MySQL操作链接的api（mysql/mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的PHP框架（ThinkPHP、Zendframework、Yii、Yaf等）；了解基本MVC的运行机制和为什么这么做，稍微知道不同的PHP框架之间的区别；能够快速学习一个MVC框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。</p>
<h4 id="前端">前端</h4><p>如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么web标准，div+css的web/wap页面模式，知道HTML5和HTML4的区别；了解一些基本的前端只是和JS框架（jQuery之类的）；了解一些基本的JavaScript编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）</p>
<h4 id="系统设计">系统设计</h4><p>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -&gt; Nginx+PHP -&gt; 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；</p>
<h3 id="第二阶段：提高阶段">第二阶段：提高阶段</h3><p>重点：提高针对LNMP的技能，能够更全面的对LNMP有熟练的应用。<br>目标：能够随时随地搭建好LNMP环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；</p>
<h4 id="Linux-1">Linux</h4><p>在第一阶段的基础上面，能够流畅的使用Shell脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的Linux程序（包括各种库、包、第三方依赖等等，比如MongoDB/Redis/Sphinx/Luncene/SVN之类的）；了解基本的Linux服务，知道如何查看Linux的性能指标数据，知道基本的Linux下面的问题跟踪等。</p>
<h4 id="Nginx-1">Nginx</h4><p>在第一阶段的基础上面，了解复杂一些的Nginx配置；包括 多核配置、events、proxypass，sendfile/tcp*配置，知道超时等相关配置和性能影响；知道nginx除了web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的nginx配置调优；知道如何配置权限、编译一个nginx扩展到nginx；知道基本的nginx运行原理（master/worker机制，epoll），知道为什么nginx性能比apache性能好等知识；</p>
<h4 id="MySQL/MongoDB">MySQL/MongoDB</h4><p>在第一阶段的基础上面，在MySQL开发方面，掌握很多小技巧，包括常规SQL优化（group by/order by/rand优化等）；除了能够搭建MySQL，还能够冷热备份MySQL数据，还知道影响innodb/myisam性能的配置选项（比如key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道如何搭建mysql主从同步的环境，知道各个binlog_format的区别；知道MySQL的性能追查，包括slow_log/explain等，还能够知道基本的索引建立处理等知识；原理方面了解基本的MySQL的架构（Server+存储引擎），知道基本的InnoDB/MyISAM索引存储结构和不同（聚簇索引，B树）；知道基本的InnoDB事务处理机制；了解大部分MySQL异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情况，建议了解一下NoSQL的代表MongoDB数据库，顺便对比跟MySQL的差别，同事能够在合适的应用场景安全谨慎的使用MongoDB，知道基本的PHP与MongoDB的结合开发。</p>
<h4 id="Redis/Memcached">Redis/Memcached</h4><p>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道Memcached和Redis的异同和应用场景，能够独立安装 Redis/Memcached，了解Memcahed的一些基本特性和限制，比如最大的value值，知道PHP跟他们的使用结合；Redis了解基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解Redis的事务等等。原理部分，能够大概了解Memcached的内存结构（slab机制），redis就了解常用数据类型底层实现存储结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下Redis的事务、RDB、AOF等机制更好</p>
<h4 id="PHP-1">PHP</h4><p>除了第一阶段的能力，安装配置方面能够随意安装PHP和各种第三方扩展的编译安装配置；了解php-fpm的大部分配置选项和含义（如max_requests/max_children/request_terminate_timeout之类的影响性能的配置），知道mod_php/fastcgi的区别；在PHP方面已经能够熟练各种基础技术，还包括各种深入些的PHP，包括对PHP面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已经阅读过最少一个以上常规PHP MVC框架的代码了，知道基本PHP框架内部实现机制和设计思想；在PHP开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的PHP MVC框架来充分让开发自由化，让自己深入理解MVC模式，也让自己能够在业务项目开发里快速升级；熟悉PHP的各种代码优化方法，熟悉大部分PHP安全方面问题的解决处理；熟悉基本的PHP执行的机制原理（Zend引擎/扩展基本工作机制）；</p>
<h4 id="C/C++">C/C++</h4><p>开始涉猎一定的C/C++语言，能够写基本的C/C++代码，对基本的C/C++语法熟悉（指针、数组操作、字符串、常规标准API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对Linux下面的C语言开发有基本的了解概念，会简单的makefile文件编写，能够使用简单的GCC/GDB的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）</p>
<h4 id="前端-1">前端</h4><p>在第一阶段的基础上面，熟悉基本的HTTP协议（协议代码200/300/400/500，基本的HTTP交互头）；条件允许，可以在深入写出稍微优雅的HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap之类）；如果条件允许，可以深入学习JavaScript编程，比如闭包机制、DOM处理；再深入些可以读读jQuery源码做深入学习。（本项不做重点学习，除非对前端有兴趣）</p>
<h4 id="系统设计-1">系统设计</h4><p>能够设计大部分中型系统的网站架构、数据库、基本PHP框架选型；性能测试排查处理等；能够完成类似：浏览器 -&gt; CDN(Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；能够支撑每天数百万到千万流量基本网站的开发维护工作；</p>
<h3 id="第三阶段：高级阶段">第三阶段：高级阶段</h3><p>重点：除了基本的LNMP程序，还能够在某个方向或领域有深入学习。（纵深维度发展）<br>目标：除了能够完成基本的PHP业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立hold深入某个技术方向，在这块比较专业。（比如在MySQL、Nginx、PHP、Redis等等任一方向深入研究）</p>
<h4 id="Linux-2">Linux</h4><p>除了第二阶段的能力，在Linux下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar等)；在shell脚本方面，已经能够编写比较复杂的shell脚本（超过500行）来协助完成很多包括备份、自动化处理、监控等工作的shell；对awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对Linux内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如NFS、磁盘管理等等；</p>
<h4 id="Nginx-2">Nginx</h4><p>在第二阶段的基础上面，已经能够把Nginx操作的很熟练，能够对Nginx进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于Nginx工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的master/worker工作机制，Nginx内部的事件处理，内存管理等等；同时可以学习Nginx扩展的开发，可以定制一些自己私有的扩展；同时可以对Nginx+Lua有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对Nginx原理的深入理解，可以考虑成为Nginx方向的深入专业者。</p>
<h4 id="MySQL/MongoDB-1">MySQL/MongoDB</h4><p>在第二阶段的基础上面，在MySQL应用方面，除了之前的基本SQL优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的MySQL的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL高可用架构等都有涉及了解；对MySQL应用层面，对MySQL的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对MySQL性能方面，有包括磁盘优化（SAS迁移到SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout等）、连接池软件选择应用，对show *（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL备份技术的深入熟悉，包括灾备还原、对Binlog的深入理解，冷热备份，多IDC备份等；在MySQL原理方面，有更多了解，比如对MySQL的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考CSV引擎开发自己简单的存储引擎来保存一些数据，增强对MySQL的理解；在这个过程，如果自己有兴趣，也可以考虑往DBA方向发展。MongoDB层面，可以考虑比如说在写少读多的情况开始在线上应用MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解RMDBS和NoSQL的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下MongoDB的工作机制。</p>
<h4 id="Redis/Memcached-1">Redis/Memcached</h4><p>在第二阶段的基础上面，能够更深入的应用和学习。因为Memcached不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis部分，可以多做一些复杂的数据结构的应用（zset来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及aof等同步机制的学习应用，设计一个高可用的Redis应用架构和集群；建议可以深入的学习一下Redis的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个Redis方面非常专业的使用者。</p>
<h4 id="PHP-2">PHP</h4><p>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在PHP开发中遇到95%的问题，了解大部分PHP的技巧；对大部分的PHP框架能够迅速在一天内上手使用，并且了解各个主流PHP框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如memcached扩展配置中的memcache.hash_strategy、apc扩展配置中的apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection之类的）；对php的工作机制比较了解，包括php-fpm工作机制（比如php-fpm在不同配置机器下面开启进程数量计算以及原理），对zend引擎有基本熟悉（vm/gc/stream处理），阅读过基本的PHP内核源码（或者阅读过相关文章），对PHP内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的PHP扩展开发，了解一些扩展开发的中高级知识（minit/rinit等），熟悉php跟apache/nginx不同的通信交互方式细节（mod_php/fastcgi）；除了开发PHP扩展，可以考虑学习开发Zend扩展，从更底层去了解PHP。</p>
<h4 id="C/C++-1">C/C++</h4><p>在第二阶段基础上面，能够在C/C++语言方面有更深入的学习了解，能够完成中小型C/C++系统的开发工作；除了基本第二阶段的基础C/C++语法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree等）方便在特殊工作中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存/信号量/管道等）；多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型/多线程模型/异步网络IO模型的差别和选型，熟悉不同异步网络IO模型的原理和差异（select/poll/epoll/iocp等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如muduo）；同时能够设计好的高并发程序架构（leader-follow/master-worker等）；了解大部分C/C++后端Server开发中的问题（内存管理、日志打印、高并发、前后端通信协议、服务监控），知道各个后端服务RPC通信问题（struct/http/thirft/protobuf等）；能够更熟络的使用GCC和GDB来开发编译调试程序，在线上程序core掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库（比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追bug；</p>
<h4 id="前端-2">前端</h4><p>深入了解HTTP协议（包括各个细致协议特殊协议代码和背后原因，比如302静态文件缓存了，502是nginx后面php挂了之类的）；除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似jQuery的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验JavaScript功力；</p>
<h4 id="其他领域语言学习">其他领域语言学习</h4><p>在基础的PHP/C/C++语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java/Golang，数据统计分析可以了解了解R语言，如果想换个视角做后端业务，可以试试 Node.js还有前面提到的跟Nginx结合的Nginx_Lua等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang的解决方案简单的惊人；比如在不想选择C/C++的情况下，还有类似高效的Erlang/Golang可用等等；主要是提升视野。</p>
<h4 id="其他专业方向学习">其他专业方向学习</h4><p>在本阶段里面，会除了基本的LNMP技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发（Android/IOS）、计算机安全、嵌入式系统、硬件等方向。</p>
<h4 id="系统设计-2">系统设计</h4><p>系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器 -&gt; CDN -&gt; 负载均衡 -&gt;接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据库 -&gt; 各路复杂后端RPC交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；能够支撑每天数千万到数亿流量网站的正常开发维护工作。</p>
<h3 id="第四阶段：架构阶段">第四阶段：架构阶段</h3><p>ps: 暂时不展开讨论，等下次专门撰文来描述补充本部分内容</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>按照了解的很多PHP/LNMP程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷漫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段PHP程序员的技术要求，来帮助很多PHP程序做对照设定学习成长目标。<br>本文按照目前主]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[json.stringify() 和 json.parse()]]></title>
    <link href="http://yoursite.com/2015/10/07/json-stringify-%E5%92%8C-json-parse/"/>
    <id>http://yoursite.com/2015/10/07/json-stringify-和-json-parse/</id>
    <published>2015-10-07T15:24:43.000Z</published>
    <updated>2015-10-27T17:04:21.000Z</updated>
    <content type="html"><![CDATA[<h4 id="stringify()_把一个对象、数组等解析成字符串格式">stringify() 把一个对象、数组等解析成字符串格式</h4><pre><code><span class="variable"><span class="keyword">var</span> obj</span> = {a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>};
json.stringify(obj);

结果：
'{<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>}'
</code></pre><h4 id="parse()_把一个字符串解析成_json_对象">parse() 把一个字符串解析成 json 对象</h4><pre><code><span class="variable"><span class="keyword">var</span> str</span> = '{<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>}';
json.parse(str);

结果：
{a:<span class="number">1</span>,b:<span class="number">2</span>,c:<span class="number">3</span>}
</code></pre><p>未作更深的研究，以后有时间在补充。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="stringify()_把一个对象、数组等解析成字符串格式">stringify() 把一个对象、数组等解析成字符串格式</h4><pre><code><span class="variable"><span class="keyword">var</span> ]]>
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="parse" scheme="http://yoursite.com/tags/parse/"/>
    
      <category term="stringify" scheme="http://yoursite.com/tags/stringify/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[渗透测试必备－Firefox 全套渗透装]]></title>
    <link href="http://yoursite.com/2015/09/30/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%BF%85%E5%A4%87%EF%BC%8DFirefox%E5%85%A8%E5%A5%97%E6%B8%97%E9%80%8F%E8%A3%85/"/>
    <id>http://yoursite.com/2015/09/30/渗透测试必备－Firefox全套渗透装/</id>
    <published>2015-09-30T03:11:02.000Z</published>
    <updated>2015-10-27T17:04:03.000Z</updated>
    <content type="html"><![CDATA[<p>工欲善必先利其器，firefox一直是各位渗透师必备的利器，小编这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。</p>
<h3 id="1-_Firebug">1. <a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/" target="_blank" rel="external">Firebug</a></h3><p>Firefox的 五星级强力推荐插件之一，不需要多解释 </p>
<h3 id="2-_User_Agent_Switcher">2. <a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/" target="_blank" rel="external">User Agent Switcher</a></h3><p>改变客户端的User Agent的一款插件</p>
<h3 id="3-_Hackbar">3. <a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar/" target="_blank" rel="external">Hackbar</a></h3><p>91ri.org的攻城师们的必备工具，提供了SQL注入和XSS攻击，能够快速对字符串进行各种编码。</p>
<h3 id="4-_HttpFox">4. <a href="https://addons.mozilla.org/en-US/firefox/addon/httpfox/" target="_blank" rel="external">HttpFox</a></h3><p>监测和分析浏览器与web服务器之间的HTTP流量</p>
<h3 id="5-_Live_HTTP_Headers">5. <a href="https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/" target="_blank" rel="external">Live HTTP Headers</a></h3><p>即时查看一个网站的HTTP头</p>
<h3 id="6-_Tamper_Data">6. <a href="https://addons.mozilla.org/en-US/firefox/addon/tamper-data/" target="_blank" rel="external">Tamper Data</a></h3><p>查看和修改HTTP/HTTPS头和POST参数</p>
<h3 id="7-_ShowIP">7. <a href="https://addons.mozilla.org/en-US/firefox/addon/showip/" target="_blank" rel="external">ShowIP</a></h3><p>在状态栏显示当前页的IP地址、主机名、ISP、国家和城市等信息。</p>
<h3 id="8-_OSVDB">8. <a href="https://addons.mozilla.org/en-us/firefox/addon/osvdb/" target="_blank" rel="external">OSVDB</a></h3><p>开放源码的漏洞数据库检索</p>
<h3 id="9-_Packet_Storm_search_plugin">9. <a href="https://addons.mozilla.org/en-us/firefox/addon/packet-storm-search-plugin/" target="_blank" rel="external">Packet Storm search plugin</a></h3><p>Packet Storm提供的插件，可以搜索漏洞、工具和exploits等。</p>
<h3 id="10-_Offsec_Exploit-db_Search">10. <a href="https://addons.mozilla.org/en-us/firefox/addon/offsec-exploit-db-search/" target="_blank" rel="external">Offsec Exploit-db Search</a></h3><p>搜索Exploit-db信息</p>
<h3 id="11-_Security_Focus_Vulnerabilities_Search_Plugin">11. <a href="https://addons.mozilla.org/en-us/firefox/addon/securityfocus-vulnerabilities-/" target="_blank" rel="external">Security Focus Vulnerabilities Search Plugin</a></h3><p>在Security Focus上搜索漏洞</p>
<h3 id="12-_Cookie_Watcher">12. <a href="https://addons.mozilla.org/en-us/firefox/addon/watcher/" target="_blank" rel="external">Cookie Watcher</a></h3><p>在状态栏显示cookie</p>
<h3 id="13-_Header_Spy">13. <a href="https://addons.mozilla.org/en-us/firefox/addon/header-spy/" target="_blank" rel="external">Header Spy</a></h3><p>在状态栏显示HTTP头</p>
<h3 id="14-_Groundspeed">14. <a href="https://addons.mozilla.org/en-us/firefox/addon/groundspeed/" target="_blank" rel="external">Groundspeed</a></h3><p>Manipulate the application user interface.</p>
<h3 id="15-_CipherFox">15. <a href="https://addons.mozilla.org/en-us/firefox/addon/cipherfox/" target="_blank" rel="external">CipherFox</a></h3><p>在状态栏显示当前SSL/TLS的加密算法和证书</p>
<h3 id="16-_XSS_Me">16. <a href="https://addons.mozilla.org/en-us/firefox/addon/xss-me/" target="_blank" rel="external">XSS Me</a></h3><p>XSS测试扩展</p>
<h3 id="17-_SQL_Inject_Me">17. <a href="https://addons.mozilla.org/en-us/firefox/addon/sql-inject-me/" target="_blank" rel="external">SQL Inject Me</a></h3><p>SQL注入测试扩展</p>
<h3 id="18-_Wappalyzer">18. <a href="https://addons.mozilla.org/en-us/firefox/addon/wappalyzer/" target="_blank" rel="external">Wappalyzer</a></h3><p>查看网站使用的应用程序</p>
<h3 id="19-_Poster">19. <a href="https://addons.mozilla.org/en-us/firefox/addon/poster/" target="_blank" rel="external">Poster</a></h3><p>发送与Web服务器交互的HTTP请求，并查看输出结果</p>
<h3 id="20-_Javascript_Deobfuscator">20. <a href="https://addons.mozilla.org/en-us/firefox/addon/deobfuscator/" target="_blank" rel="external">Javascript Deobfuscator</a></h3><p>显示网页上运行的Javascript代码</p>
<h3 id="21-_Modify_Headers">21. <a href="https://addons.mozilla.org/en-us/firefox/addon/modify-headers/" target="_blank" rel="external">Modify Headers</a></h3><p>修改HTTP请求头</p>
<h3 id="22-_FoxyProxy">22. <a href="https://addons.mozilla.org/en-us/firefox/addon/foxyproxy-standard/" target="_blank" rel="external">FoxyProxy</a></h3><p>代理工具</p>
<h3 id="23-_FlagFox">23. <a href="https://addons.mozilla.org/en-us/firefox/addon/flagfox/" target="_blank" rel="external">FlagFox</a></h3><p>可以在地址栏或状态栏上显示出当前网站所在国家的国旗，也有更多的其他功能，如：双击国旗可以实现WOT功能；鼠标中键点击是whois功能。当然用户可以在选项里设置快捷键实现诸如复制IP，维基百科查询等功能。</p>
<h3 id="24-_Greasemonkey">24. <a href="https://addons.mozilla.org/en-us/firefox/addon/greasemonkey/" target="_blank" rel="external">Greasemonkey</a></h3><p>greasemonkey 使你可以向任何网页添加DHTML语句(用户脚本)来改变它们的显示方式。就像CSS可以让你接管网页的样式，而用户脚本(User Script)则可以让你轻易地控制网页设计与交互的任何方面。例如:</p>
<ul>
<li>使页面上显示的 URL 都成为可以直接点击进入的链接。</li>
<li>增强网页实用性，使你经常访问的网站更符合你的习惯。</li>
<li>绕过网站上经常出现的那些烦人的 Bug。</li>
</ul>
<h3 id="25-_Domain_Details">25. <a href="https://addons.mozilla.org/en-us/firefox/addon/domain-details/" target="_blank" rel="external">Domain Details</a></h3><p>显示服务器类型、IP地址、域名注册信息等</p>
<h3 id="26-_Websecurify">26. <a href="https://addons.mozilla.org/en-us/firefox/addon/websecurify/" target="_blank" rel="external">Websecurify</a></h3><p>Websecurify是WEB安全检测软件的Firefox的扩展，可以针对Web应用进行安全评估</p>
<h3 id="27-_XSSed_Search">27. <a href="https://addons.mozilla.org/en-us/firefox/addon/xssed-search/" target="_blank" rel="external">XSSed Search</a></h3><p>搜索XSSed.Com跨站脚本数据库</p>
<h3 id="28-_ViewStatePeeker">28. <a href="https://addons.mozilla.org/en-us/firefox/addon/viewstatepeeker/" target="_blank" rel="external">ViewStatePeeker</a></h3><p>查看asp.net的iewState</p>
<h3 id="29-_CryptoFox">29. <a href="https://addons.mozilla.org/en-US/firefox/addon/cryptofox/" target="_blank" rel="external">CryptoFox</a></h3><p>破解MD5、加密/解密工具</p>
<h3 id="30-_WorldIP">30. <a href="https://addons.mozilla.org/en-US/firefox/addon/worldip-flag-and-datacenter-pi/" target="_blank" rel="external">WorldIP</a></h3><p>显示服务器的IP、地址、PING、Traceroute、RDNS等信息</p>
<h3 id="31-_Server_Spy">31. <a href="https://addons.mozilla.org/en-US/firefox/addon/server-spy/" target="_blank" rel="external">Server Spy</a></h3><p>识别访问的web服务器类型，版本以及IP地址的插件</p>
<h3 id="32-_Default_Passwords">32. <a href="https://addons.mozilla.org/en-US/firefox/addon/default-passwords-cirtne-58786/" target="_blank" rel="external">Default Passwords</a></h3><p>搜索CIRT.net默认密码数据库。</p>
<h3 id="33-_Snort_IDS_Rule_Search">33. <a href="https://addons.mozilla.org/en-US/firefox/addon/snort-ids-rule-search/" target="_blank" rel="external">Snort IDS Rule Search</a></h3><p>搜索Snort的IDS规则，做签名开发的应该很有用。</p>
<h3 id="34-_FireCAT">34. <a href="">FireCAT</a></h3><p>FireCAT (Firefox Catalog of Auditing exTensions) 是一个收集最有效最有用的应用程序安全审计和风险评估工具的列表(这些工具以Firefox插件形式发布的),FireCAT中没有收集的安全工具类型包 括:fuzzer,代理和应用程序扫描器.</p>
<h3 id="引用">引用</h3><p><a href="https://www.91ri.org/4441.html" target="_blank" rel="external">https://www.91ri.org/4441.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>工欲善必先利其器，firefox一直是各位渗透师必备的利器，小编这里推荐34款firefox渗透测试辅助插件，其中包含渗透测试、信息收集、代理、加密解密等功能。</p>
<h3 id="1-_Firebug">1. <a href="https://addons.mozil]]>
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL 索引简介]]></title>
    <link href="http://yoursite.com/2015/09/29/MySQL-%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2015/09/29/MySQL-索引简介/</id>
    <published>2015-09-28T18:02:31.000Z</published>
    <updated>2015-10-27T17:03:44.000Z</updated>
    <content type="html"><![CDATA[<p>索引对查询的速度有着至关重要的影响，理解索引也是进行数据库性能调优的起点。索引是在存储引擎中实现的，而不是在服务器层中实现的。几种常见的索引类型：</p>
<h3 id="B-Tree类型的索引">B-Tree类型的索引</h3><ul>
<li>普通索引(Normal Indexes)—普通索引是最基本的索引而且没有任何限制(比如唯一性等限制)。普通索引可以包含重复的值。</li>
<li>唯一索引(Unique Indexes)—唯一索引和普通索引基本上是相同的。有一点不同的是：使用唯一索引的索引的列的所有值必须是唯一的，在该列中不能使用重复的值，但可以使用 null。如果是组合索引，则列值的组合必须唯一。</li>
<li>主键索引(Primary keys)—它是一种特殊的唯一索引，不允许有空值。主键索引相当于“唯一索引+not null”。所有使用主键索引的列必须唯一并且不能为空。通常我们使用”auto_increment”来设置主键。 </li>
<li>全文索引(Full-text Indexes)—全文索引用在 MySQL 的全文搜索中。通常这种索引被用在搜索引擎类的应用中，用来从某个字段中检索特别的关键字。目前只有MyISAM引擎支持。</li>
</ul>
<p>B-Tree类型的索引可以用于表达式中列的比较，如&gt;、&gt;=、&lt;、&lt;=或BETWEEN运算符。这种类型的索引也可以用在LIKE、IN、IS NULL等的比较中。当然，在某些场景下，MySQL并不会使用索引，如NOT IN、IS NOT NULL,、LIKE ‘%sql%’ 等。</p>
<h3 id="空间索引(Spacial_Indexes)(R-tree)">空间索引(Spacial Indexes)(R-tree)</h3><p>只有MyISAM存储引擎才支持空间索引。它就像B-Tree索引一样，但是它并不仅仅遵循从做到右的顺序。空间索引仅仅被用在某些特殊的场景中，如MySQL GIS functions。</p>
<h3 id="哈希索引(Hash_Indexes)">哈希索引(Hash Indexes)</h3><p>hash就是一种（key=&gt;value）形式的键值对，哈希索引完全不同于B-Tree索引。哈希索引只能被用在相等比较中，如”=”和”!=”操作，而且速度非常快。目前只有Memory 存储引擎支持哈希索引。</p>
<h3 id="引用">引用</h3><p><a href="http://www.php101.cn/2014/08/14/MySQl%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/" target="_blank" rel="external">http://www.php101.cn/2014/08/14/MySQl%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/</a><br><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="external">http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html</a><br><a href="http://blog.csdn.net/dyllove98/article/details/9631303" target="_blank" rel="external">http://blog.csdn.net/dyllove98/article/details/9631303</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>索引对查询的速度有着至关重要的影响，理解索引也是进行数据库性能调优的起点。索引是在存储引擎中实现的，而不是在服务器层中实现的。几种常见的索引类型：</p>
<h3 id="B-Tree类型的索引">B-Tree类型的索引</h3><ul>
<li>普通索引(Normal I]]>
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript 对象与 JOSON]]></title>
    <link href="http://yoursite.com/2015/09/28/javascript-%E5%AF%B9%E8%B1%A1%E4%B8%8E-JOSON/"/>
    <id>http://yoursite.com/2015/09/28/javascript-对象与-JOSON/</id>
    <published>2015-09-27T17:41:41.000Z</published>
    <updated>2015-10-27T17:03:19.000Z</updated>
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><p>JavaScript 对象与传统的面向对象中的对象几乎没有相似之处，传统的面向对象语言中，创建一个对象必须先有对象的模板：类，类中定义了对象的属性和操作这些属性的方法。通过实例化来构筑一个对象，然后使用对象间的协作来完成一项功能，通过功能的集合来完成整个工程。而Javascript中是没有类的概念的，借助JavaScript的动态性，我们完全可以创建一个空的对象(而不是类)，通过像对象动态的添加属性来完善对象的功能。 </p>
<p>JSON 即 JavaScript Object Notation 是一种轻量级数据交换格式，采用完全独立于语言的文本格式，非常适合于服务器与 JavaScript 的交互，当两个应用程序、或者两台服务器、或者两种语言之间进行“交流”时，他们都趋向于采用字符串。</p>
<p>JSON 是一种数据交换格式，像 XML 和 YAML 一样是一种在各种不同语言间传递结构化信息的方式。从另一方面来说，JavaScript 对象是 JavaScript 语言中的一种数据类型，就像 PHP 中的数组、C++ 中类和结构体。</p>
<h3 id="定义_JSON_与_JavaScript">定义 JSON 与 JavaScript</h3><p>在 JavaScript 程序中定义对象的时候，对象的属性名可以加双引号也可以不加双引号。如果属性名包含特殊字符(如!、if 等)的时候，就必须加双引号。<br>在定义 JSON 的时候，属性名必须加双引号。</p>
<p>代码示例：</p>
<p>1.定义 JavaScript 对象</p>
<pre><code><span class="number">1.</span> var obj = {name: <span class="string">"woolong"</span>, <span class="string">"gender"</span>: <span class="string">"man"</span>}; <span class="preprocessor"># 两个属性可以加双引号也可以不加</span>
<span class="number">2.</span> var obj = {<span class="string">"!"</span>: <span class="string">"hello word"</span>}; <span class="preprocessor"># 属性名包含特殊字符时必须加双引号 </span>
</code></pre><p>2.定义 JSON 字符串</p>
<pre><code><span class="number">1.</span> var jsonStr = {<span class="string">"name"</span>: <span class="string">"woolong"</span>}; <span class="preprocessor"># 定义 JSON 时必须加双引号。</span>
</code></pre><h3 id="JavaScript_对象转换为_JSON">JavaScript 对象转换为 JSON</h3><p>我们可以使用 JavaScript 的内置函数将 JavaScript 对象转换为 JSON，这个函数就是 JSON.stringify()。</p>
<p>代码示例：</p>
<pre><code>1. var obj = {name: <span class="string">"woolong"</span>, <span class="keyword">gender</span>: <span class="string">"man"</span>};
2. var jsonObj = JSON.stringify(obj);
3. console.log(jsonObj); // 输出结果为：{<span class="string">"name"</span>: <span class="string">"woolong"</span>, <span class="string">"gender"</span>: <span class="string">"man"</span>}
</code></pre><p>在将 JavaScript 对象转换为 JSON 的时候，有一点是需要我们注意的：<br>如果对象中包含有值为函数和日期的属性，JSON 会忽略值为函数的属性，并将值为日期的属性转换为字符串。<br>代码示例：</p>
<pre><code><span class="number">1.</span> var obj = {
<span class="number">2.</span>             name: <span class="string">"woolong"</span>,
<span class="number">3.</span>             birthday: <span class="keyword">new</span> Date(),
<span class="number">4.</span>             action: function () {
<span class="number">5.</span>                     document.write(<span class="string">"wolf"</span>);
<span class="number">6.</span>             }
<span class="number">7.</span> };
<span class="number">8.</span> var jsonObj = JSON.stringify(obj);
<span class="number">9.</span> console.<span class="built_in">log</span>(jsonObj); <span class="comment">//输出结果为：{"name":"woolong","birthday":"2015-09-28T08:47:44.358Z"}</span>
</code></pre><h3 id="JavaScript_中解析_JSON">JavaScript 中解析 JSON</h3><p>在老版本的 JS 中，大家通常都使用 eval() 函数来解析 JSON，但是 ECMAScript5 给我们提供了一个解析 JSON 的新函数 JSON.parse()。<br>这个函数的使用方法比较简单，大家可以自行尝试。当对某个 JSON 字符串应用该函数以后，该 JSON 就被转换为 JavaScript 的对象，也就是说当用 typeof 运算符查看该函数的类型时，返回的值是 Object。<br>同样有一点需要注意的是，该函数是 ECMAScript5 以后才支持的，如果是旧版本的浏览器那么可能不支持该函数。解决的方法是加载一个实现该函数的 JS 文件，即 json2.js。如果使用的是 JQuery 框架，jQuery.parseJSON()，该函数调用了 JSON.parse() 方法。<br>关于使用 eval() 方法解析 JSON ，这个等深入学习后会记录下来。</p>
<h3 id="一个很重要的概念">一个很重要的概念</h3><p>作为一个前端菜鸟，经常听到别人说“JSON对象”，但是其实并没有“JSON对象”这个概念，JSON真正的表现形式是字符串。</p>
<h3 id="引用">引用</h3><p><a href="http://www.php101.cn/2014/08/12/javascript%E5%AF%B9%E8%B1%A1%E4%B8%8EJSON/" target="_blank" rel="external">http://www.php101.cn/2014/08/12/javascript%E5%AF%B9%E8%B1%A1%E4%B8%8EJSON/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="简介">简介</h3><p>JavaScript 对象与传统的面向对象中的对象几乎没有相似之处，传统的面向对象语言中，创建一个对象必须先有对象的模板：类，类中定义了对象的属性和操作这些属性的方法。通过实例化来构筑一个对象，然后使用对象间的协作来完成一项功能，通过功]]>
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git 创建分支]]></title>
    <link href="http://yoursite.com/2015/09/25/Git-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2015/09/25/Git-创建分支/</id>
    <published>2015-09-25T08:12:20.000Z</published>
    <updated>2015-10-27T17:02:57.000Z</updated>
    <content type="html"><![CDATA[<p>使用 Git 本地创建分支</p>
<h5 id="1-_查看分支">1. 查看分支</h5><pre><code>git branch
/<span class="keyword">*</span><span class="keyword">*</span> 这里会列出所有本地的分支，查看原称分支 git branch -a <span class="keyword">*</span><span class="keyword">*</span>/
</code></pre><h5 id="2-_创建本地分支">2. 创建本地分支</h5><pre><code>git checkout -b test1
/<span class="keyword">*</span><span class="keyword">*</span> git checktout 也是切换分支<span class="keyword">*</span><span class="keyword">*</span>/
</code></pre><h5 id="3-_提交到远程">3. 提交到远程</h5><pre><code>上一步虽然创建了分支，但是远程还没有该分支，需要提交一次
</code></pre><h5 id="4-本地分支与云端库比较">4.本地分支与云端库比较</h5><pre><code><span class="comment">// 获取远端库最新信息</span>
git fetch origin
<span class="comment">// 做比较</span>
git diff 本地分支名 origin 远端分支名
<span class="comment">// 有时间改动文件比较多，只想显示文件</span>
git diff 本地分支名 origin 远端分支名 --state
</code></pre><p>备注下来，以便查阅，后续会有改动 。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用 Git 本地创建分支</p>
<h5 id="1-_查看分支">1. 查看分支</h5><pre><code>git branch
/<span class="keyword">*</span><span class="keyword">*</span> 这里会列出所]]>
    </summary>
    
      <category term="diff" scheme="http://yoursite.com/tags/diff/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP 缓存技术]]></title>
    <link href="http://yoursite.com/2015/09/22/PHP-%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2015/09/22/PHP-缓存技术/</id>
    <published>2015-09-22T09:23:35.000Z</published>
    <updated>2015-10-27T17:02:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_数据缓存">1. 数据缓存</h3><p>主要是指数据库查询结果的缓存，每次访问页面的时候先检测响应的缓存数据是否存在，如果不存在，就连接数据库查询数据，并把查询结果保存到文件中，以后同样的查询结果就直接从缓存中获取。用空间（硬盘）换速度是关键点。</p>
<h3 id="2-_内存缓存">2. 内存缓存</h3><p>Memcached是高性能的分布式内存缓存服务器。一般的使用目的是通过缓存数据库查询结果，减少数据库的访问次数，以提高动态 WEB 的访问速度、减少数据库负载。</p>
<p>它是将需要缓存的信息，缓存到系统内存中，需要获取信息中，直接到内存中取，比较常用的方式是 key-&gt;value 方式。</p>
<h3 id="3-_页面缓存">3. 页面缓存</h3><p>访问 WEB 页面时，先检测相应的缓存页面文件是否存在，如果不存在，则连接数据库，查询数据，显示页面并同时生成缓存页面文件，下次访问的时候缓存的页面文件就发挥作用了。页面缓存有一下几种方式。</p>
<h6 id="时间触发缓存">时间触发缓存</h6><p>检查文件是否存在并且缓存时间是否过期,如果文件修改的时间没有过期时间，那么就用缓存，否则更新缓存。</p>
<h6 id="内容出发缓存">内容出发缓存</h6><p>当页面数据有更新时，更改数据库的同时也强制更新缓存。</p>
<h6 id="页面部分缓存">页面部分缓存</h6><p>将一个页面中不经常变的部分进行静态缓存，而经常变化的块不缓存，最后组装在一起显示；可以使用类似于 ob_get_contents 的方式实现，也可以利用类似 ESI 之类的页面片段缓存策略，使其用来做动态页面中相对静态的片段部分的缓存。该种方式可以用于如商城中的商品页；</p>
<h6 id="全页面静态化缓存">全页面静态化缓存</h6><p>直接生成 HTML 或 XML 等文本文件，有更新的时候重生成一次，而不会去走php服务器解析的流程，适合于不太变化的页面。</p>
<h3 id="4-_PHP_的OPCode（缓冲器、加速器）缓存">4. PHP 的OPCode（缓冲器、加速器）缓存</h3><p>有eAccelerator， APC， PHPA，XCache，这个没有太深的研究，暂不多说。</p>
<h3 id="5-_Apache_缓存模块">5.  Apache 缓存模块</h3><p>Apache 安装完以后，是不允许被 cache 的。如果外接了cache 或 squid 服务器要求进行 web 加速的话，就需要在 htttpd.conf 里进行设置，当然前提是在安装 Apache 的时候要激活 mod_cache 的模块。<br>安装 Apache 时：./configure –enable-cache –enable-disk-cache –enable-mem-cache</p>
<h3 id="6-_基于反向代理的_WEB_缓存">6.  基于反向代理的 WEB 缓存</h3><p>如 Nginx ，SQUID ，mod_proxy ( apache2 以上又分为 mod_proxy 和 mod_cache )</p>
<h3 id="7-_DNS_轮询">7. DNS 轮询</h3><p>大多域名注册商都支持多条A记录的解析，其实这就是DNS轮询，DNS服务器将解析请求按照A记录的顺序，逐一分配到不同的IP上，这样就完成了简单的负载均衡。更深层次的暂未研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_数据缓存">1. 数据缓存</h3><p>主要是指数据库查询结果的缓存，每次访问页面的时候先检测响应的缓存数据是否存在，如果不存在，就连接数据库查询数据，并把查询结果保存到文件中，以后同样的查询结果就直接从缓存中获取。用空间（硬盘）换速度是关键点。</p>
]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP的运行模式（理论）]]></title>
    <link href="http://yoursite.com/2015/09/21/PHP%E7%9A%84%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/09/21/PHP的运行模式/</id>
    <published>2015-09-21T08:52:19.000Z</published>
    <updated>2015-10-27T17:01:07.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要介绍几种运行模式：CGI 通用网关接口(Common Gateway Interface)、FAST-CGI 常驻性 CGI(long-live CGI)、CLI 命令行运行(Command Line Interface)。</p>
<h3 id="1-_CGI_通用网关接口_(Common_Gateway_Interface)">1. CGI 通用网关接口 (Common Gateway Interface)</h3><p>CGI是一段程序，就像桥梁一样连接着 HTML 和 WEB 服务器，它把 HTML 接收到的指令传递给服务器的执行程序，在把服务器的运行结果返回给 HTML 。CGI 的跨平台性能非常的好，几乎可以在所有的操作系统上实现。但是 CGI 已经是比较老的模式了，最近几年很少用，被FAST－CGI替代。</p>
<p>当有一个请求时，首先要创建一个CGI子进程，然后处理请求，处理完后在结束该子进程，这就是 fork－and－execute 模式。如果用户的请iu数量非常多时，会产生大量的CGI子进程，有多少个请求就会产生多少个子进程，这样会大量挤占系统的资源如 CPU、内存等，这是造成 CGI 性能低下的主要原因。</p>
<h3 id="2-_FAST-CGI_常驻性_CGI(long-live_CGI)">2. FAST-CGI 常驻性 CGI(long-live CGI)</h3><p>fast-cgi 是cgi的升级版本，FastCGI 像是一个常驻 (long-live) 型的 CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去 fork 一 次 (这是 CGI 最为人诟病的 fork-and-execute 模式)。PHP使用PHP-FPM(FastCGI Process Manager)，全称PHP FastCGI进程管理器进行管理。</p>
<p>FastCGI的工作原理：</p>
<ol>
<li><p>Web Server启动时载入FastCGI进程管理器(IIS ISAPI或Apache Module)</p>
</li>
<li><p>FastCGI进程管理器自身初始化，启动多个CGI解释器进程 (在任务管理器中可见多个php-cgi.exe)并等待来自Web Server的连接。</p>
</li>
<li><p>当客户端请求到达 Web Server 时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。Web server 将 CGI 环境变量和标准输入发送到 FastCGI 子进程 php-cgi 。</p>
</li>
<li><p>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 Web Server 。当 FastCGI 子进程关闭连接时，请求便告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器 (运行在Web Server中)的下一个连接。 在 CGI 模式中，php-cgi 在此便退出了。</p>
</li>
</ol>
<p>在上述情况中，你可以想象 CGI 通常有多慢。每一个 Web 请求 PHP 都必须重新解析 php.ini、重新载入全部扩展并重初始化全部数据结构。使用 FastCGI ，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接 (Persistent database connection) 可以工作。</p>
<p>Fastcgi的优点：</p>
<ol>
<li><p>从稳定性上看, FastCGI 是以独立的进程池来运行 CGI ,单独一个进程死掉,系统可以很轻易的丢弃该进程,然后重新分配新的进程来运行逻辑。</p>
</li>
<li><p>从安全性上看, FastCGI 支持分布式运算。FastCGI 和宿主的 server 完全独立, FastCGI 挂掉的话不会影响宿主 server。</p>
</li>
<li><p>从性能上看, FastCGI 把动态逻辑的处理从 server 中分离出来, 大负荷的 IO 处理还是留给宿主 server, 宿主 server 只进行 IO 处理。对于一个普通的动态网页来说, 逻辑处理可能只有一小部分,FastCGI 进程暂用的系统资源会非常少，配合静态缓存页面，性能会得到很大的提升。</p>
</li>
</ol>
<p>Fastcgi的优点：</p>
<ul>
<li>从实际使用来看，用 FastCGI 模式更适合生产环境的服务器。但对于开发用机器来说就不太合适。因为当使用 Zend Studio 调试程序时，由于 FastCGI 会认为 PHP 进程超时，从而在页面返回 500错误。</li>
<li>目前的 FastCGI 和 Server 沟通还不够智能，一个 FastCGI 进程如果执行时间过长会被当成是死进程杀掉重起，这样在处理长时间任务的时候很麻烦，这样做也使得 FastCGI 无法允许联机调试。因为是多进程，所以比 CGI 多线程消耗更多的服务器内存，PHP-CGI 解释器每进程消耗 7 至 25 兆内存，将这个数字乘以 50 或 100 就是很大的内存数。</li>
</ul>
<h3 id="3-_CLI_命令行运行(Command_Line_Interface)">3. CLI 命令行运行(Command Line Interface)</h3><p>它是 PHP 的命令行运行模式，大家经常使用它，但是可能并没有注意到（命令行中使用 php -v 等，有兴趣的可以输入 php -h 深入研究）</p>
<p>优点：</p>
<ol>
<li><p>使用多进程，子进程结束以后，内核会负责回收资源。</p>
</li>
<li><p>使用多进程，子进程异常退出不会导致整个进程 Thread 退出，父进程还有机会重建流程；</p>
</li>
<li><p>一个常驻主进程，只负责任务分发，逻辑更清楚。</p>
</li>
</ol>
<h3 id="总结">总结</h3><p>每种运行模式都有自己的优缺点，没有绝对的好与坏，主要是看运行的环境。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要介绍几种运行模式：CGI 通用网关接口(Common Gateway Interface)、FAST-CGI 常驻性 CGI(long-live CGI)、CLI 命令行运行(Command Line Interface)。</p>
<h3 id="1-_CGI_通]]>
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="运行模式" scheme="http://yoursite.com/tags/%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[完全理解 SQL 之 SELECT 句式]]></title>
    <link href="http://yoursite.com/2015/09/20/10-steps-to-learn-SQL/"/>
    <id>http://yoursite.com/2015/09/20/10-steps-to-learn-SQL/</id>
    <published>2015-09-19T16:47:18.000Z</published>
    <updated>2015-10-27T17:00:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-SQL_一种声明式语言">1.SQL 一种声明式语言</h1><p>SQL是一种声“明式”语言。SQL语言是为计算机声明了一个你想从数据库中获得结果的范例（可以理解为SQL语句），而不是告诉计算机如何得到SQL查询的结果。</p>
<p>如果SQL语言这么简单，那么人么为什么“闻SQL色变”？主要原因是：潜意识中是按照编程命令式编程思维方式思考问题。就好比这样：程序执行顺训，从上到下，第一个函数执行完后在执行下一个。这种命令式编程的思维惯式。</p>
<h1 id="2-SQL_语法的执行顺序">2.SQL 语法的执行顺序</h1><p>SQL语句有一个非常困惑大家的特性：SQL语句的执行顺训跟SQL语句的语法顺训并不一致。SQL语句的执行顺序是：</p>
<pre><code>* <span class="keyword">FROM</span>
* <span class="keyword">WHERE</span>
* <span class="keyword">GROUP</span> <span class="keyword">BY</span>
* HAVING
* <span class="keyword">SELECT</span>
* <span class="keyword">DISTINCT</span>
* <span class="keyword">UNION</span>
* <span class="keyword">ORDER</span> <span class="keyword">BY</span>
</code></pre><p>这里我们需要注意三个地方</p>
<pre><code><span class="number">1</span>. <span class="keyword">FROM</span> 才是 SQL 语句执行的第一步，并非 <span class="keyword">SELECT</span>。数据库在执行语句第一步是将数据从硬盘加载到数据缓冲区中，以便对这些数据进行操作。
<span class="number">2</span>. <span class="keyword">SELECT</span> 是在大部分语句执行后才执行的，严格的说是在 <span class="keyword">FROM</span> 和 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 之后执行的。理解这一点非常重要，这就是你不能在 <span class="keyword">WHERE</span> 中使用在 <span class="keyword">SELECT</span> 中设别名的字段作为判断条件的原因。
<span class="number">3</span>. 无论在语法还是执行顺序上，<span class="keyword">UNION</span> 总是排在 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 之前。很多人认为每个 <span class="keyword">UNION</span> 段都能使用 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序，但是根据 SQL 语言标准和各个数据库 SQL 的执行差异来看，这并不是真的。尽管某些数据库允许 SQL 语句对子查询或者派生表进行排序，但是这并不说明这个排序在 <span class="keyword">UNION</span> 操作过后仍保持排序的顺序。
 注意：并非所有的数据库对 SQL 语句使用相同的解析方式。如 MySQL、PostgreSQL 和 SQLite 中就不会按照第二点执行。
</code></pre><h3 id="我们学到了什么">我们学到了什么</h3><p>既然并不是所有的数据库都是按照上面方式执行，那我们学到了什么？我们的收获是永远要记得：SQL 语句的语法顺序和其执行顺序并不一致，这样我们就能避免一般性的错误。如果你能记住 SQL 语法顺序和执行顺序的差异，那你就能很容易的理解一些常见的 SQL 问题。</p>
<p>当然，如果一种语言被设计成语法顺序直接反应其语句的执行顺序，那么这种语言对程序员是十分友好的，如：微软的 LINO 语言。</p>
<h1 id="3-SQL_语言的核心是对表的引用（table_references）">3.SQL 语言的核心是对表的引用（table references）</h1><p>由于 SQL 语句语法顺序和执行顺序的不同，很多人认为 SELECT 中的字段信息是 SQL 语句的核心。但是真正的核心在于对表的引用。</p>
<p>根据 SQL 标准，FROM 语句被定义为：</p>
<pre><code><span class="tag">&lt;<span class="title">from</span> <span class="attribute">clause</span> &gt;</span> ::= FROM <span class="tag">&lt;<span class="title">table</span> <span class="attribute">reference</span>&gt;</span> [ { <span class="tag">&lt;<span class="title">comma</span>&gt;</span> <span class="tag">&lt;<span class="title">table</span> <span class="attribute">reference</span>&gt;</span> }... ]
</code></pre><p>FROM 语句的输出”是一张联合表，来自于所有引用的表在某一维度上的联合。我们来慢慢分析：</p>
<pre><code>FROM <span class="tag">a</span>, b
</code></pre><p>上面这句 FROM 语句的输出是一张联合表，联合了表 a 和表 b 。如果 a 表有三个字段， b 表有 5 个字段，那么这个“输出表”就有 8 （ =5+3）个字段。</p>
<p>这个联合表里的数据是 a＊b，即 a 和 b 的笛卡尔积。换句话说，也就是 a 表中的每一条数据都要跟 b 表中的每一条数据配对。如果 a 表有3 条数据， b 表有 5 条数据，那么联合表就会有 15 （ =5＊3）条数据。</p>
<p>FROM 输出的结果被 WHERE 语句筛选后要经过 GROUP BY 语句处理，从而形成新的输出结果。我们后面还会再讨论这方面问题。</p>
<p>如果我们从集合论（关系代数）的角度来看，一张数据库的表就是一组数据元的关系，而每个 SQL 语句会改变一种或数种关系，从而产生出新的数据元的关系（即产生新的表）。</p>
<p>我们学到了什么？</p>
<p> 思考问题的时候从表的角度来思考问题，这样很容易理解数据如何在 SQL 语句的“流水线”上进行了什么样的变动。</p>
<h1 id="4-灵活引用表能使_SQL_语句变得更强大">4.灵活引用表能使 SQL 语句变得更强大</h1><p>灵活引用表能使 SQL 语句变得更强大。一个简单的例子就是 JOIN 的使用。严格的说 JOIN 语句并非是 SELECT 中的一部分，而是一种特殊的表引用语句。 SQL 语言标准中表的连接定义如下：</p>
<pre><code><span class="tag">&lt;<span class="title">table</span> <span class="attribute">reference</span>&gt;</span> ::=
    <span class="tag">&lt;<span class="title">table</span> <span class="attribute">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">derived</span> <span class="attribute">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">joined</span> <span class="attribute">table</span>&gt;</span>
</code></pre><p>就拿之前的例子来说：</p>
<pre><code>FROM <span class="tag">a</span>, b
</code></pre><p>a 可能输如下表的连接：</p>
<pre><code><span class="label">a1</span> JOIN <span class="literal">a2</span> ON <span class="literal">a1</span>.id = <span class="literal">a2</span>.id
</code></pre><p>将它放到之前的例子中就变成了：</p>
<pre><code><span class="label">FROM</span> <span class="literal">a1</span> JOIN <span class="literal">a2</span> ON <span class="literal">a1</span>.id = <span class="literal">a2</span>.id, <span class="keyword">b</span>
</code></pre><p>尽管将一个连接表用逗号跟另一张表联合在一起并不是常用作法，但是你的确可以这么做。结果就是，最终输出的表就有了 a1+a2+b 个字段了。</p>
<p>在 SQL 语句中派生表的应用甚至比表连接更加强大，下面我们就要讲到表连接。</p>
<h3 id="我们学到了什么？">我们学到了什么？</h3><p>思考问题时，要从表引用的角度出发，这样就很容易理解数据是怎样被 SQL 语句处理的，并且能够帮助你理解那些复杂的表引用是做什么的。</p>
<p>更重要的是，要理解 JOIN 是构建连接表的关键词，并不是 SELECT 语句的一部分。有一些数据库允许在 INSERT 、 UPDATE 、 DELETE 中使用 JOIN 。</p>
<h1 id="5-SQL_语句中推荐使用表连接">5.SQL 语句中推荐使用表连接</h1><p>我们先看看刚刚这句话：</p>
<pre><code>FROM <span class="tag">a</span>, b
</code></pre><p>高级 SQL 程序员也许学会给你忠告：尽量不要使用逗号来代替 JOIN 进行表的连接，这样会提高你的 SQL 语句的可读性，并且可以避免一些错误。</p>
<p>利用逗号来简化 SQL 语句有时候会造成思维上的混乱，想一下下面的语句：</p>
<pre><code>FROM <span class="tag">a</span>, <span class="tag">b</span>, c, d, e, f, g, h
WHERE <span class="tag">a</span><span class="class">.a1</span> = <span class="tag">b</span><span class="class">.bx</span>
AND <span class="tag">a</span><span class="class">.a2</span> = c<span class="class">.c1</span>
AND d<span class="class">.d1</span> = <span class="tag">b</span><span class="class">.bc</span>
-- etc...
</code></pre><p>我们不难看出使用 JOIN 语句的好处在于：</p>
<pre><code><span class="bullet">* </span>安全。 JOIN 和要连接的表离得非常近，这样就能避免错误。
<span class="bullet">* </span>更多连接的方式，JOIN 语句能去区分出来外连接和内连接等。
</code></pre><h3 id="我们学到了什么？-1">我们学到了什么？</h3><p>记着要尽量使用 JOIN 进行表的连接，永远不要在 FROM 后面使用逗号连接表。</p>
<h1 id="6-SQL_语句中不同的连接操作">6.SQL 语句中不同的连接操作</h1><p>SQL 语句中，表连接的方式从根本上分为五种：</p>
<pre><code><span class="bullet">* </span>EQUI JOIN
<span class="bullet">* </span>SEMI JOIN
<span class="bullet">* </span>ANTI JOIN
<span class="bullet">* </span>CROSS JOIN
<span class="bullet">* </span>DIVISION
</code></pre><h3 id="EQUI_JOIN">EQUI JOIN</h3><p>这是一种最普通的 JOIN 操作，它包含两种连接方式：</p>
<pre><code>* INNER <span class="built_in">JOIN</span>（或者是 <span class="built_in">JOIN</span> ）
* OUTER <span class="built_in">JOIN</span>（包括： <span class="built_in">LEFT</span> 、 <span class="built_in">RIGHT</span>、 FULL OUTER <span class="built_in">JOIN</span>）
</code></pre><p>用例子最容易说明其中区别：</p>
<pre><code>-<span class="ruby">- <span class="constant">This</span> table reference contains authors <span class="keyword">and</span> their books.
</span>-<span class="ruby">- <span class="constant">There</span> is one record <span class="keyword">for</span> each book <span class="keyword">and</span> its author.
</span>-<span class="ruby">- authors without books are <span class="constant">NOT</span> included
</span>author JOIN book ON author.id = book.author_id

-<span class="ruby">- <span class="constant">This</span> table reference contains authors <span class="keyword">and</span> their books
</span>-<span class="ruby">- <span class="constant">There</span> is one record <span class="keyword">for</span> each book <span class="keyword">and</span> its author.
</span>-<span class="ruby">- ... <span class="constant">OR</span> there is an <span class="string">"empty"</span> record <span class="keyword">for</span> authors without books
</span>-<span class="ruby">- (<span class="string">"empty"</span> meaning that all book columns are <span class="constant">NULL</span>)
</span>author LEFT OUTER JOIN book ON author.id = book.author_id
</code></pre><h3 id="SEMI_JOIN">SEMI JOIN</h3><p>这种连接关系在 SQL 中有两种表现方式：使用 IN，或者使用 EXISTS。“ SEMI ”在拉丁文中是“半”的意思。这种连接方式是只连接目标表的一部分。这是什么意思呢？再想一下关于作者和书名的连接。我们想象一下这样的情况：我们不需要作者 / 书名这样的组合，只是需要那些在书名表中的书的作者信息。那我们就能这么写：</p>
<pre><code>-- <span class="keyword">Using</span> <span class="keyword">IN</span>
<span class="keyword">FROM</span> author
<span class="keyword">WHERE</span> author.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> book.author_id <span class="keyword">FROM</span> book)

-- <span class="keyword">Using</span> EXISTS
<span class="keyword">FROM</span> author
<span class="keyword">WHERE</span> EXISTS (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> book.author_id = author.id)
</code></pre><p>尽管没有严格的规定说明你何时应该使用 IN ，何时应该使用 EXISTS ，但是这些事情你还是应该知道的：</p>
<pre><code><span class="bullet">* </span>IN比 EXISTS 的可读性更好
<span class="bullet">* </span>EXISTS 比IN 的表达性更好（更适合复杂的语句）
<span class="bullet">* </span>二者之间性能没有差异（但对于某些数据库来说性能差异会非常大）
</code></pre><p>因为使用 INNER JOIN 也能得到书名表中书所对应的作者信息，所以很多初学者机会认为可以通过 DISTINCT 进行去重，然后将 SEMI JOIN 语句写成这样：</p>
<pre><code><span class="comment">-- Find only those authors who also have books</span>
<span class="operator">SELECT <span class="keyword">DISTINCT</span> first_name, last_name
<span class="keyword">FROM</span> author
<span class="keyword">JOIN</span> book <span class="keyword">ON</span> author.<span class="keyword">id</span> = book.author_id</span>
</code></pre><p>这是一种很糟糕的写法，原因如下：</p>
<pre><code><span class="bullet">* </span>SQL 语句性能低下：因为去重操作（ DISTINCT ）需要数据库重复从硬盘中读取数据到内存中。
<span class="bullet">* </span>这么写并非完全正确：尽管也许现在这么写不会出现问题，但是随着 SQL 语句变得越来越复杂，你想要去重得到正确的结果就变得十分困难。
</code></pre><p>更多的关于滥用 DISTINCT 的危害可以参考这篇博文</p>
<p>（<a href="http://blog.jooq.org/2013/07/30/10-common-mistakes-java-developers-make-when-writing-sql/" target="_blank" rel="external">http://blog.jooq.org/2013/07/30/10-common-mistakes-java-developers-make-when-writing-sql/</a>）。</p>
<h3 id="ANTI_JOIN">ANTI JOIN</h3><p>这种连接的关系跟 SEMI JOIN 刚好相反。在 IN 或者 EXISTS 前加一个 NOT 关键字就能使用这种连接。举个例子来说，我们列出书名表里没有书的作者：</p>
<pre><code>-- <span class="keyword">Using</span> <span class="keyword">IN</span>
<span class="keyword">FROM</span> author
<span class="keyword">WHERE</span> author.id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> book.author_id <span class="keyword">FROM</span> book)

-- <span class="keyword">Using</span> EXISTS
<span class="keyword">FROM</span> author
<span class="keyword">WHERE</span> <span class="keyword">NOT</span> EXISTS (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> book.author_id = author.id)
</code></pre><p>关于性能、可读性、表达性等特性也完全可以参考 SEMI JOIN。</p>
<p>这篇博文介绍了在使用 NOT IN 时遇到 NULL 应该怎么办，因为有一点背离本篇主题，就不详细介绍，有兴趣的同学可以读一下</p>
<p>（<a href="http://blog.jooq.org/2012/01/27/sql-incompatibilities-not-in-and-null-values/" target="_blank" rel="external">http://blog.jooq.org/2012/01/27/sql-incompatibilities-not-in-and-null-values/</a>）。</p>
<h3 id="CROSS_JOIN">CROSS JOIN</h3><p>这个连接过程就是两个连接的表的乘积：即将第一张表的每一条数据分别对应第二张表的每条数据。我们之前见过，这就是逗号在 FROM 语句中的用法。在实际的应用中，很少有地方能用到 CROSS JOIN，但是一旦用上了，你就可以用这样的 SQL语句表达：</p>
<pre><code>-- Combine <span class="keyword">every</span> author with <span class="keyword">every</span> book
author CROSS <span class="keyword">JOIN</span> book
</code></pre><h3 id="DIVISION">DIVISION</h3><p>DIVISION 的确是一个怪胎。简而言之，如果 JOIN 是一个乘法运算，那么 DIVISION 就是 JOIN 的逆过程。DIVISION 的关系很难用 SQL 表达出来，介于这是一个新手指南，解释 DIVISION 已经超出了我们的目的。但是有兴趣的同学还是可以来看看这三篇文章</p>
<p>（<a href="http://blog.jooq.org/2012/03/30/advanced-sql-relational-division-in-jooq/" target="_blank" rel="external">http://blog.jooq.org/2012/03/30/advanced-sql-relational-division-in-jooq/</a>）</p>
<p>（<a href="http://en.wikipedia.org/wiki/Relational_algebra#Division" target="_blank" rel="external">http://en.wikipedia.org/wiki/Relational_algebra#Division</a>）</p>
<p>（<a href="https://www.simple-talk.com/sql/t-sql-programming/divided-we-stand-the-sql-of-relational-division/" target="_blank" rel="external">https://www.simple-talk.com/sql/t-sql-programming/divided-we-stand-the-sql-of-relational-division/</a>）。</p>
<p>推荐阅读 →_→ <a href="http://blog.jobbole.com/40443/" target="_blank" rel="external">《画图解释SQL联合语句》</a></p>
<h3 id="我们学到了什么？-2">我们学到了什么？</h3><p>学到了很多！让我们在脑海中再回想一下。 SQL 是对表的引用， JOIN 则是一种引用表的复杂方式。但是 SQL 语言的表达方式和实际我们所需要的逻辑关系之间是有区别的，并非所有的逻辑关系都能找到对应的 JOIN 操作，所以这就要我们在平时多积累和学习关系逻辑，这样你就能在以后编写 SQL 语句中选择适当的 JOIN 操作了。</p>
<h1 id="7-SQL_中如同变量的派生表">7.SQL 中如同变量的派生表</h1><p>在这之前，我们学习到过 SQL 是一种声明性的语言，并且 SQL 语句中不能包含变量。但是你能写出类似于变量的语句，这些就叫做派生表：</p>
<p>说白了，所谓的派生表就是在括号之中的子查询：</p>
<pre><code>-- A derived table
<span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author)
</code></pre><p>需要注意的是有些时候我们可以给派生表定义一个相关名（即我们所说的别名）。</p>
<pre><code>-- A derived table <span class="keyword">with</span> an <span class="keyword">alias</span>
<span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author) a
</code></pre><p>派生表可以有效的避免由于 SQL 逻辑而产生的问题。举例来说：如果你想重用一个用 SELECT 和 WHERE 语句查询出的结果，这样写就可以（以 Oracle 为例）：</p>
<pre><code>-- <span class="keyword">Get</span> authors<span class="comment">' first and last names, and their age in days</span>
<span class="keyword">SELECT</span> first_name, last_name, age
<span class="keyword">FROM</span> (
  <span class="keyword">SELECT</span> first_name, last_name, current_date - date_of_birth age
  <span class="keyword">FROM</span> author
)
-- <span class="keyword">If</span> the age <span class="keyword">is</span> greater than <span class="number">10000</span> days
<span class="keyword">WHERE</span> age &gt; <span class="number">10000</span>
</code></pre><p>需要我们注意的是：在有些数据库，以及 SQL ： 1990 标准中，派生表被归为下一级——通用表语句（ common table experssion）。这就允许你在一个 SELECT 语句中对派生表多次重用。上面的例子就（几乎）等价于下面的语句：</p>
<pre><code><span class="keyword">WITH</span> a <span class="keyword">AS</span> (
  <span class="keyword">SELECT</span> first_name, last_name, current_date - date_of_birth age
  <span class="keyword">FROM</span> author
)
<span class="keyword">SELECT</span> *
<span class="keyword">FROM</span> a
<span class="keyword">WHERE</span> age &gt; <span class="number">10000</span>
</code></pre><p>当然了，你也可以给“ a ”创建一个单独的视图，这样你就可以在更广泛的范围内重用这个派生表了。更多信息可以阅读下面的文章（<a href="http://en.wikipedia.org/wiki/View_%28SQL%29" target="_blank" rel="external">http://en.wikipedia.org/wiki/View_%28SQL%29</a>）。</p>
<h3 id="我们学到了什么？-3">我们学到了什么？</h3><p>我们反复强调，大体上来说 SQL 语句就是对表的引用，而并非对字段的引用。要好好利用这一点，不要害怕使用派生表或者其他更复杂的语句。</p>
<h1 id="8-SQL_语句中_GROUP_BY_是对表的引用进行的操作">8.SQL 语句中 GROUP BY 是对表的引用进行的操作</h1><p>让我们再回想一下之前的 FROM 语句：</p>
<pre><code>FROM <span class="tag">a</span>, b
</code></pre><p>现在，我们将 GROUP BY 应用到上面的语句中：</p>
<pre><code>GROUP BY A<span class="class">.x</span>, A<span class="class">.y</span>, B.z
</code></pre><p>上面语句的结果就是产生出了一个包含三个字段的新的表的引用。我们来仔细理解一下这句话：当你应用 GROUP BY 的时候， SELECT 后没有使用聚合函数的列，都要出现在 GROUP BY 后面。</p>
<p>需要注意的是：其他字段能够使用聚合函数：</p>
<pre><code>SELECT A<span class="class">.x</span>, A<span class="class">.y</span>, <span class="function"><span class="title">SUM</span><span class="params">(A.z)</span></span>
FROM A
GROUP BY A<span class="class">.x</span>, A.y
</code></pre><p>还有一点值得留意的是： MySQL 并不坚持这个标准，这的确是令人很困惑的地方。但是不要被 MySQL 所迷惑。 GROUP BY 改变了对表引用的方式。你可以像这样既在 SELECT 中引用某一字段，也在 GROUP BY 中对其进行分组。</p>
<h3 id="我们学到了什么？-4">我们学到了什么？</h3><p>GROUP BY，再次强调一次，是在表的引用上进行了操作，将其转换为一种新的引用方式。</p>
<h1 id="9-SQL_语句中的_SELECT_实质上是对关系的映射">9.SQL 语句中的 SELECT 实质上是对关系的映射</h1><p>我个人比较喜欢“映射”这个词，尤其是把它用在关系代数上。一旦你建立起来了表的引用，经过修改、变形，你能够一步一步的将其映射到另一个模型中。 SELECT 语句就像一个“投影仪”，我们可以将其理解成一个将源表中的数据按照一定的逻辑转换成目标表数据的函数。</p>
<p>通过 SELECT语句，你能对每一个字段进行操作，通过复杂的表达式生成所需要的数据。</p>
<p>SELECT 语句有很多特殊的规则，至少你应该熟悉以下几条：</p>
<pre><code><span class="number">1.</span> 你仅能够使用那些能通过表引用而得来的字段；
<span class="number">2.</span> 如果你有 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 语句，你只能够使用 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 语句后面的字段或者聚合函数；
<span class="number">3.</span> 当你的语句中没有 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 的时候，可以使用开窗函数代替聚合函数；
<span class="number">4.</span> 当你的语句中没有 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 的时候，你不能同时使用聚合函数和其它函数；
<span class="number">5.</span> 有一些方法可以将普通函数封装在聚合函数中；
<span class="number">6.</span> ……
</code></pre><p>一些更复杂的规则多到足够写出另一篇文章了。比如：为何你不能在一个没有 GROUP BY 的 SELECT 语句中同时使用普通函数和聚合函数？（上面的第 4 条）</p>
<p>原因如下：</p>
<pre><code><span class="number">1</span>. 凭直觉，这种做法从逻辑上就讲不通。
<span class="number">2</span>. 如果直觉不能够说服你，那么语法肯定能。 SQL : <span class="number">1999</span> 标准引入了 GROUPING SETS，SQL： <span class="number">2003</span> 标准引入了 <span class="keyword">group</span> sets : <span class="keyword">GROUP</span> <span class="keyword">BY</span>() 。无论什么时候，只要你的语句中出现了聚合函数，而且并没有明确的 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 语句，这时一个不明确的、空的 GROUPING <span class="keyword">SET</span> 就会被应用到这段 SQL 中。因此，原始的逻辑顺序的规则就被打破了，映射（即 <span class="keyword">SELECT</span> ）关系首先会影响到逻辑关系，其次就是语法关系。（译者注：这段话原文就比较艰涩，可以简单理解如下：在既有聚合函数又有普通函数的 SQL 语句中，如果没有 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 进行分组，SQL 语句默认视整张表为一个分组，当聚合函数对某一字段进行聚合统计的时候，引用的表中的每一条 <span class="keyword">record</span> 就失去了意义，全部的数据都聚合为一个统计值，你此时对每一条 <span class="keyword">record</span> 使用其它函数是没有意义的）。
</code></pre><p>糊涂了？是的，我也是。我们再回过头来看点浅显的东西吧。</p>
<h3 id="我们学到了什么？-5">我们学到了什么？</h3><p>SELECT 语句可能是 SQL 语句中最难的部分了，尽管他看上去很简单。其他语句的作用其实就是对表的不同形式的引用。而 SELECT 语句则把这些引用整合在了一起，通过逻辑规则将源表映射到目标表，而且这个过程是可逆的，我们可以清楚的知道目标表的数据是怎么来的。</p>
<p>想要学习好 SQL 语言，就要在使用 SELECT 语句之前弄懂其他的语句，虽然 SELECT 是语法结构中的第一个关键词，但它应该是我们最后一个掌握的。</p>
<h1 id="10-SQL_语句中的几个简单的关键词：DISTINCT，UNION，ORDER_BY_和_OFFSET">10.SQL 语句中的几个简单的关键词：DISTINCT，UNION，ORDER BY 和 OFFSET</h1><p>在学习完复杂的 SELECT 豫剧之后，我们再来看点简单的东西：</p>
<pre><code>* 集合运算（ <span class="keyword">DISTINCT</span> 和 <span class="keyword">UNION</span> ）
* 排序运算（ <span class="keyword">ORDER</span> <span class="keyword">BY</span>，OFFSET…FETCH）
</code></pre><h3 id="集合运算（_set_operation）：">集合运算（ set operation）：</h3><p>集合运算主要操作在于集合上，事实上指的就是对表的一种操作。从概念上来说，他们很好理解：</p>
<pre><code><span class="bullet">* </span>DISTINCT 在映射之后对数据进行去重
<span class="bullet">* </span>UNION 将两个子查询拼接起来并去重
<span class="bullet">* </span>UNION ALL 将两个子查询拼接起来但不去重
<span class="bullet">* </span>EXCEPT 将第二个字查询中的结果从第一个子查询中去掉
<span class="bullet">* </span>INTERSECT 保留两个子查询中都有的结果并去重
</code></pre><h3 id="排序运算（_ordering_operation）：">排序运算（ ordering operation）：</h3><p>排序运算跟逻辑关系无关。这是一个 SQL 特有的功能。排序运算不仅在 SQL 语句的最后，而且在 SQL 语句运行的过程中也是最后执行的。使用 ORDER BY 和 OFFSET…FETCH 是保证数据能够按照顺序排列的最有效的方式。其他所有的排序方式都有一定随机性，尽管它们得到的排序结果是可重现的。</p>
<p>OFFSET…SET是一个没有统一确定语法的语句，不同的数据库有不同的表达方式，如 MySQL 和 PostgreSQL 的 LIMIT…OFFSET、SQL Server 和 Sybase 的 TOP…START AT 等。具体关于 OFFSET..FETCH 的不同语法可以参考这篇文章<br>（<a href="http://www.jooq.org/doc/3.1/manual/sql-building/sql-statements/select-statement/limit-clause/" target="_blank" rel="external">http://www.jooq.org/doc/3.1/manual/sql-building/sql-statements/select-statement/limit-clause/</a>）。</p>
<p>让我们在工作中尽情的使用 SQL！</p>
<p>正如其他语言一样，想要学好 SQL 语言就要大量的练习。上面的 10 个简单的步骤能够帮助你对你每天所写的 SQL 语句有更好的理解。另一方面来讲，从平时常见的错误中也能积累到很多经验。</p>
<p>基本参考<a href="http://blog.jobbole.com/55086/" target="_blank" rel="external">十步完全理解SQL</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-SQL_一种声明式语言">1.SQL 一种声明式语言</h1><p>SQL是一种声“明式”语言。SQL语言是为计算机声明了一个你想从数据库中获得结果的范例（可以理解为SQL语句），而不是告诉计算机如何得到SQL查询的结果。</p>
<p>如果SQL语言这么简单]]>
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <link href="http://yoursite.com/2015/09/19/hello-world/"/>
    <id>http://yoursite.com/2015/09/19/hello-world/</id>
    <published>2015-09-18T17:29:02.000Z</published>
    <updated>2015-10-27T16:59:33.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to My Notes! This is my very first post. 开始写博客了，一直以来想把自己的学习的东西记录下来，可能比较懒吧，最近才开始有了真实的行动来完成。</p>
<h2 id="构建博客的框架">构建博客的框架</h2><pre><code>结构采用比较流行的 hexo，之所以选择他是因为他方便、快。
博客主题采用的是当前星最高的也是我比较喜欢的主题 <span class="keyword">next</span>。
</code></pre><h2 id="博客的主要内容">博客的主要内容</h2><pre><code>主要记录自己在工作学习中用的知识点，以备平时需要时查询，也希望大家来交流下经验。
</code></pre><h2 id="后记">后记</h2><pre><code>比自己聪明的人还在努力的学习，我有什么资格来放弃学习！
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to My Notes! This is my very first post. 开始写博客了，一直以来想把自己的学习的东西记录下来，可能比较懒吧，最近才开始有了真实的行动来完成。</p>
<h2 id="构建博客的框架">构建博客的框架</h2><pre>]]>
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
